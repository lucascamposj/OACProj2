// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2018 20:25:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PipelineInit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PipelineInit_vlg_sample_tst(
	clock,
	clock2,
	sampler_tx
);
input  clock;
input  clock2;
output sampler_tx;

reg sample;
time current_time;
always @(clock or clock2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PipelineInit_vlg_check_tst (
	A,
	adressMem,
	atualPC,
	B,
	EscreveMem,
	EscreveReg,
	High,
	Instruction,
	Low,
	MemDataIn,
	MemParaReg,
	MemReadValue,
	outALU,
	proxPC,
	WBwriteData,
	WBwriteRegister,
	sampler_rx
);
input [31:0] A;
input [9:0] adressMem;
input [31:0] atualPC;
input [31:0] B;
input  EscreveMem;
input  EscreveReg;
input [31:0] High;
input [31:0] Instruction;
input [31:0] Low;
input [31:0] MemDataIn;
input  MemParaReg;
input [31:0] MemReadValue;
input [31:0] outALU;
input [31:0] proxPC;
input [31:0] WBwriteData;
input [4:0] WBwriteRegister;
input sampler_rx;

reg [31:0] A_expected;
reg [9:0] adressMem_expected;
reg [31:0] atualPC_expected;
reg [31:0] B_expected;
reg  EscreveMem_expected;
reg  EscreveReg_expected;
reg [31:0] High_expected;
reg [31:0] Instruction_expected;
reg [31:0] Low_expected;
reg [31:0] MemDataIn_expected;
reg  MemParaReg_expected;
reg [31:0] MemReadValue_expected;
reg [31:0] outALU_expected;
reg [31:0] proxPC_expected;
reg [31:0] WBwriteData_expected;
reg [4:0] WBwriteRegister_expected;

reg [31:0] A_prev;
reg [9:0] adressMem_prev;
reg [31:0] atualPC_prev;
reg [31:0] B_prev;
reg  EscreveMem_prev;
reg  EscreveReg_prev;
reg [31:0] High_prev;
reg [31:0] Instruction_prev;
reg [31:0] Low_prev;
reg [31:0] MemDataIn_prev;
reg  MemParaReg_prev;
reg [31:0] MemReadValue_prev;
reg [31:0] outALU_prev;
reg [31:0] proxPC_prev;
reg [31:0] WBwriteData_prev;
reg [4:0] WBwriteRegister_prev;

reg [31:0] A_expected_prev;
reg [9:0] adressMem_expected_prev;
reg [31:0] atualPC_expected_prev;
reg [31:0] B_expected_prev;
reg  EscreveMem_expected_prev;
reg  EscreveReg_expected_prev;
reg [31:0] High_expected_prev;
reg [31:0] Instruction_expected_prev;
reg [31:0] Low_expected_prev;
reg [31:0] MemDataIn_expected_prev;
reg  MemParaReg_expected_prev;
reg [31:0] MemReadValue_expected_prev;
reg [31:0] outALU_expected_prev;
reg [31:0] proxPC_expected_prev;

reg [31:0] last_A_exp;
reg [9:0] last_adressMem_exp;
reg [31:0] last_atualPC_exp;
reg [31:0] last_B_exp;
reg  last_EscreveMem_exp;
reg  last_EscreveReg_exp;
reg [31:0] last_High_exp;
reg [31:0] last_Instruction_exp;
reg [31:0] last_Low_exp;
reg [31:0] last_MemDataIn_exp;
reg  last_MemParaReg_exp;
reg [31:0] last_MemReadValue_exp;
reg [31:0] last_outALU_exp;
reg [31:0] last_proxPC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	adressMem_prev = adressMem;
	atualPC_prev = atualPC;
	B_prev = B;
	EscreveMem_prev = EscreveMem;
	EscreveReg_prev = EscreveReg;
	High_prev = High;
	Instruction_prev = Instruction;
	Low_prev = Low;
	MemDataIn_prev = MemDataIn;
	MemParaReg_prev = MemParaReg;
	MemReadValue_prev = MemReadValue;
	outALU_prev = outALU;
	proxPC_prev = proxPC;
	WBwriteData_prev = WBwriteData;
	WBwriteRegister_prev = WBwriteRegister;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	adressMem_expected_prev = adressMem_expected;
	atualPC_expected_prev = atualPC_expected;
	B_expected_prev = B_expected;
	EscreveMem_expected_prev = EscreveMem_expected;
	EscreveReg_expected_prev = EscreveReg_expected;
	High_expected_prev = High_expected;
	Instruction_expected_prev = Instruction_expected;
	Low_expected_prev = Low_expected;
	MemDataIn_expected_prev = MemDataIn_expected;
	MemParaReg_expected_prev = MemParaReg_expected;
	MemReadValue_expected_prev = MemReadValue_expected;
	outALU_expected_prev = outALU_expected;
	proxPC_expected_prev = proxPC_expected;
end


// expected atualPC[ 31 ]
initial
begin
	atualPC_expected[31] = 1'bX;
	atualPC_expected[31] = #59999000 1'b0;
end 
// expected atualPC[ 30 ]
initial
begin
	atualPC_expected[30] = 1'bX;
	atualPC_expected[30] = #59999000 1'b0;
end 
// expected atualPC[ 29 ]
initial
begin
	atualPC_expected[29] = 1'bX;
	atualPC_expected[29] = #59999000 1'b0;
end 
// expected atualPC[ 28 ]
initial
begin
	atualPC_expected[28] = 1'bX;
	atualPC_expected[28] = #59999000 1'b0;
end 
// expected atualPC[ 27 ]
initial
begin
	atualPC_expected[27] = 1'bX;
	atualPC_expected[27] = #59999000 1'b0;
end 
// expected atualPC[ 26 ]
initial
begin
	atualPC_expected[26] = 1'bX;
	atualPC_expected[26] = #59999000 1'b0;
end 
// expected atualPC[ 25 ]
initial
begin
	atualPC_expected[25] = 1'bX;
	atualPC_expected[25] = #59999000 1'b0;
end 
// expected atualPC[ 24 ]
initial
begin
	atualPC_expected[24] = 1'bX;
	atualPC_expected[24] = #59999000 1'b0;
end 
// expected atualPC[ 23 ]
initial
begin
	atualPC_expected[23] = 1'bX;
	atualPC_expected[23] = #59999000 1'b0;
end 
// expected atualPC[ 22 ]
initial
begin
	atualPC_expected[22] = 1'bX;
	atualPC_expected[22] = #59999000 1'b0;
end 
// expected atualPC[ 21 ]
initial
begin
	atualPC_expected[21] = 1'bX;
	atualPC_expected[21] = #59999000 1'b0;
end 
// expected atualPC[ 20 ]
initial
begin
	atualPC_expected[20] = 1'bX;
	atualPC_expected[20] = #59999000 1'b0;
end 
// expected atualPC[ 19 ]
initial
begin
	atualPC_expected[19] = 1'bX;
	atualPC_expected[19] = #59999000 1'b0;
end 
// expected atualPC[ 18 ]
initial
begin
	atualPC_expected[18] = 1'bX;
	atualPC_expected[18] = #59999000 1'b0;
end 
// expected atualPC[ 17 ]
initial
begin
	atualPC_expected[17] = 1'bX;
	atualPC_expected[17] = #59999000 1'b0;
end 
// expected atualPC[ 16 ]
initial
begin
	atualPC_expected[16] = 1'bX;
	atualPC_expected[16] = #59999000 1'b0;
end 
// expected atualPC[ 15 ]
initial
begin
	atualPC_expected[15] = 1'bX;
	atualPC_expected[15] = #59999000 1'b0;
end 
// expected atualPC[ 14 ]
initial
begin
	atualPC_expected[14] = 1'bX;
	atualPC_expected[14] = #59999000 1'b0;
end 
// expected atualPC[ 13 ]
initial
begin
	atualPC_expected[13] = 1'bX;
	atualPC_expected[13] = #59999000 1'b0;
end 
// expected atualPC[ 12 ]
initial
begin
	atualPC_expected[12] = 1'bX;
	atualPC_expected[12] = #59999000 1'b0;
end 
// expected atualPC[ 11 ]
initial
begin
	atualPC_expected[11] = 1'bX;
	atualPC_expected[11] = #59999000 1'b0;
end 
// expected atualPC[ 10 ]
initial
begin
	atualPC_expected[10] = 1'bX;
	atualPC_expected[10] = #59999000 1'b0;
end 
// expected atualPC[ 9 ]
initial
begin
	atualPC_expected[9] = 1'bX;
	atualPC_expected[9] = #59999000 1'b0;
end 
// expected atualPC[ 8 ]
initial
begin
	atualPC_expected[8] = 1'bX;
	atualPC_expected[8] = #59999000 1'b0;
end 
// expected atualPC[ 7 ]
initial
begin
	atualPC_expected[7] = 1'bX;
	atualPC_expected[7] = #59999000 1'b0;
end 
// expected atualPC[ 6 ]
initial
begin
	atualPC_expected[6] = 1'bX;
	atualPC_expected[6] = #59999000 1'b0;
end 
// expected atualPC[ 5 ]
initial
begin
	atualPC_expected[5] = 1'bX;
	atualPC_expected[5] = #59999000 1'b0;
end 
// expected atualPC[ 4 ]
initial
begin
	atualPC_expected[4] = 1'bX;
	atualPC_expected[4] = #59999000 1'b0;
end 
// expected atualPC[ 3 ]
initial
begin
	atualPC_expected[3] = 1'bX;
	atualPC_expected[3] = #59999000 1'b0;
end 
// expected atualPC[ 2 ]
initial
begin
	atualPC_expected[2] = 1'bX;
	atualPC_expected[2] = #59999000 1'b0;
end 
// expected atualPC[ 1 ]
initial
begin
	atualPC_expected[1] = 1'bX;
	atualPC_expected[1] = #59999000 1'b0;
end 
// expected atualPC[ 0 ]
initial
begin
	atualPC_expected[0] = 1'bX;
	atualPC_expected[0] = #59999000 1'b0;
end 
// expected proxPC[ 31 ]
initial
begin
	proxPC_expected[31] = 1'bX;
	proxPC_expected[31] = #59999000 1'b0;
end 
// expected proxPC[ 30 ]
initial
begin
	proxPC_expected[30] = 1'bX;
	proxPC_expected[30] = #59999000 1'b0;
end 
// expected proxPC[ 29 ]
initial
begin
	proxPC_expected[29] = 1'bX;
	proxPC_expected[29] = #59999000 1'b0;
end 
// expected proxPC[ 28 ]
initial
begin
	proxPC_expected[28] = 1'bX;
	proxPC_expected[28] = #59999000 1'b0;
end 
// expected proxPC[ 27 ]
initial
begin
	proxPC_expected[27] = 1'bX;
	proxPC_expected[27] = #59999000 1'b0;
end 
// expected proxPC[ 26 ]
initial
begin
	proxPC_expected[26] = 1'bX;
	proxPC_expected[26] = #59999000 1'b0;
end 
// expected proxPC[ 25 ]
initial
begin
	proxPC_expected[25] = 1'bX;
	proxPC_expected[25] = #59999000 1'b0;
end 
// expected proxPC[ 24 ]
initial
begin
	proxPC_expected[24] = 1'bX;
	proxPC_expected[24] = #59999000 1'b0;
end 
// expected proxPC[ 23 ]
initial
begin
	proxPC_expected[23] = 1'bX;
	proxPC_expected[23] = #59999000 1'b0;
end 
// expected proxPC[ 22 ]
initial
begin
	proxPC_expected[22] = 1'bX;
	proxPC_expected[22] = #59999000 1'b0;
end 
// expected proxPC[ 21 ]
initial
begin
	proxPC_expected[21] = 1'bX;
	proxPC_expected[21] = #59999000 1'b0;
end 
// expected proxPC[ 20 ]
initial
begin
	proxPC_expected[20] = 1'bX;
	proxPC_expected[20] = #59999000 1'b0;
end 
// expected proxPC[ 19 ]
initial
begin
	proxPC_expected[19] = 1'bX;
	proxPC_expected[19] = #59999000 1'b0;
end 
// expected proxPC[ 18 ]
initial
begin
	proxPC_expected[18] = 1'bX;
	proxPC_expected[18] = #59999000 1'b0;
end 
// expected proxPC[ 17 ]
initial
begin
	proxPC_expected[17] = 1'bX;
	proxPC_expected[17] = #59999000 1'b0;
end 
// expected proxPC[ 16 ]
initial
begin
	proxPC_expected[16] = 1'bX;
	proxPC_expected[16] = #59999000 1'b0;
end 
// expected proxPC[ 15 ]
initial
begin
	proxPC_expected[15] = 1'bX;
	proxPC_expected[15] = #59999000 1'b0;
end 
// expected proxPC[ 14 ]
initial
begin
	proxPC_expected[14] = 1'bX;
	proxPC_expected[14] = #59999000 1'b0;
end 
// expected proxPC[ 13 ]
initial
begin
	proxPC_expected[13] = 1'bX;
	proxPC_expected[13] = #59999000 1'b0;
end 
// expected proxPC[ 12 ]
initial
begin
	proxPC_expected[12] = 1'bX;
	proxPC_expected[12] = #59999000 1'b0;
end 
// expected proxPC[ 11 ]
initial
begin
	proxPC_expected[11] = 1'bX;
	proxPC_expected[11] = #59999000 1'b0;
end 
// expected proxPC[ 10 ]
initial
begin
	proxPC_expected[10] = 1'bX;
	proxPC_expected[10] = #59999000 1'b0;
end 
// expected proxPC[ 9 ]
initial
begin
	proxPC_expected[9] = 1'bX;
	proxPC_expected[9] = #59999000 1'b0;
end 
// expected proxPC[ 8 ]
initial
begin
	proxPC_expected[8] = 1'bX;
	proxPC_expected[8] = #59999000 1'b0;
end 
// expected proxPC[ 7 ]
initial
begin
	proxPC_expected[7] = 1'bX;
	proxPC_expected[7] = #59999000 1'b0;
end 
// expected proxPC[ 6 ]
initial
begin
	proxPC_expected[6] = 1'bX;
	proxPC_expected[6] = #59999000 1'b0;
end 
// expected proxPC[ 5 ]
initial
begin
	proxPC_expected[5] = 1'bX;
	proxPC_expected[5] = #59999000 1'b0;
end 
// expected proxPC[ 4 ]
initial
begin
	proxPC_expected[4] = 1'bX;
	proxPC_expected[4] = #59999000 1'b0;
end 
// expected proxPC[ 3 ]
initial
begin
	proxPC_expected[3] = 1'bX;
	proxPC_expected[3] = #59999000 1'b0;
end 
// expected proxPC[ 2 ]
initial
begin
	proxPC_expected[2] = 1'bX;
	proxPC_expected[2] = #59999000 1'b0;
end 
// expected proxPC[ 1 ]
initial
begin
	proxPC_expected[1] = 1'bX;
	proxPC_expected[1] = #59999000 1'b0;
end 
// expected proxPC[ 0 ]
initial
begin
	proxPC_expected[0] = 1'bX;
	proxPC_expected[0] = #59999000 1'b0;
end 
// expected Instruction[ 31 ]
initial
begin
	Instruction_expected[31] = 1'bX;
	Instruction_expected[31] = #59999000 1'b0;
end 
// expected Instruction[ 30 ]
initial
begin
	Instruction_expected[30] = 1'bX;
	Instruction_expected[30] = #59999000 1'b0;
end 
// expected Instruction[ 29 ]
initial
begin
	Instruction_expected[29] = 1'bX;
	Instruction_expected[29] = #59999000 1'b0;
end 
// expected Instruction[ 28 ]
initial
begin
	Instruction_expected[28] = 1'bX;
	Instruction_expected[28] = #59999000 1'b0;
end 
// expected Instruction[ 27 ]
initial
begin
	Instruction_expected[27] = 1'bX;
	Instruction_expected[27] = #59999000 1'b0;
end 
// expected Instruction[ 26 ]
initial
begin
	Instruction_expected[26] = 1'bX;
	Instruction_expected[26] = #59999000 1'b0;
end 
// expected Instruction[ 25 ]
initial
begin
	Instruction_expected[25] = 1'bX;
	Instruction_expected[25] = #59999000 1'b0;
end 
// expected Instruction[ 24 ]
initial
begin
	Instruction_expected[24] = 1'bX;
	Instruction_expected[24] = #59999000 1'b0;
end 
// expected Instruction[ 23 ]
initial
begin
	Instruction_expected[23] = 1'bX;
	Instruction_expected[23] = #59999000 1'b0;
end 
// expected Instruction[ 22 ]
initial
begin
	Instruction_expected[22] = 1'bX;
	Instruction_expected[22] = #59999000 1'b0;
end 
// expected Instruction[ 21 ]
initial
begin
	Instruction_expected[21] = 1'bX;
	Instruction_expected[21] = #59999000 1'b0;
end 
// expected Instruction[ 20 ]
initial
begin
	Instruction_expected[20] = 1'bX;
	Instruction_expected[20] = #59999000 1'b0;
end 
// expected Instruction[ 19 ]
initial
begin
	Instruction_expected[19] = 1'bX;
	Instruction_expected[19] = #59999000 1'b0;
end 
// expected Instruction[ 18 ]
initial
begin
	Instruction_expected[18] = 1'bX;
	Instruction_expected[18] = #59999000 1'b0;
end 
// expected Instruction[ 17 ]
initial
begin
	Instruction_expected[17] = 1'bX;
	Instruction_expected[17] = #59999000 1'b0;
end 
// expected Instruction[ 16 ]
initial
begin
	Instruction_expected[16] = 1'bX;
	Instruction_expected[16] = #59999000 1'b0;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
	Instruction_expected[15] = #59999000 1'b0;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
	Instruction_expected[14] = #59999000 1'b0;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
	Instruction_expected[13] = #59999000 1'b0;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
	Instruction_expected[12] = #59999000 1'b0;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
	Instruction_expected[11] = #59999000 1'b0;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
	Instruction_expected[10] = #59999000 1'b0;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
	Instruction_expected[9] = #59999000 1'b0;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
	Instruction_expected[8] = #59999000 1'b0;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
	Instruction_expected[7] = #59999000 1'b0;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
	Instruction_expected[6] = #59999000 1'b0;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
	Instruction_expected[5] = #59999000 1'b0;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
	Instruction_expected[4] = #59999000 1'b0;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
	Instruction_expected[3] = #59999000 1'b0;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
	Instruction_expected[2] = #59999000 1'b0;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
	Instruction_expected[1] = #59999000 1'b0;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
	Instruction_expected[0] = #59999000 1'b0;
end 
// expected A[ 31 ]
initial
begin
	A_expected[31] = 1'bX;
	A_expected[31] = #59999000 1'b0;
end 
// expected A[ 30 ]
initial
begin
	A_expected[30] = 1'bX;
	A_expected[30] = #59999000 1'b0;
end 
// expected A[ 29 ]
initial
begin
	A_expected[29] = 1'bX;
	A_expected[29] = #59999000 1'b0;
end 
// expected A[ 28 ]
initial
begin
	A_expected[28] = 1'bX;
	A_expected[28] = #59999000 1'b0;
end 
// expected A[ 27 ]
initial
begin
	A_expected[27] = 1'bX;
	A_expected[27] = #59999000 1'b0;
end 
// expected A[ 26 ]
initial
begin
	A_expected[26] = 1'bX;
	A_expected[26] = #59999000 1'b0;
end 
// expected A[ 25 ]
initial
begin
	A_expected[25] = 1'bX;
	A_expected[25] = #59999000 1'b0;
end 
// expected A[ 24 ]
initial
begin
	A_expected[24] = 1'bX;
	A_expected[24] = #59999000 1'b0;
end 
// expected A[ 23 ]
initial
begin
	A_expected[23] = 1'bX;
	A_expected[23] = #59999000 1'b0;
end 
// expected A[ 22 ]
initial
begin
	A_expected[22] = 1'bX;
	A_expected[22] = #59999000 1'b0;
end 
// expected A[ 21 ]
initial
begin
	A_expected[21] = 1'bX;
	A_expected[21] = #59999000 1'b0;
end 
// expected A[ 20 ]
initial
begin
	A_expected[20] = 1'bX;
	A_expected[20] = #59999000 1'b0;
end 
// expected A[ 19 ]
initial
begin
	A_expected[19] = 1'bX;
	A_expected[19] = #59999000 1'b0;
end 
// expected A[ 18 ]
initial
begin
	A_expected[18] = 1'bX;
	A_expected[18] = #59999000 1'b0;
end 
// expected A[ 17 ]
initial
begin
	A_expected[17] = 1'bX;
	A_expected[17] = #59999000 1'b0;
end 
// expected A[ 16 ]
initial
begin
	A_expected[16] = 1'bX;
	A_expected[16] = #59999000 1'b0;
end 
// expected A[ 15 ]
initial
begin
	A_expected[15] = 1'bX;
	A_expected[15] = #59999000 1'b0;
end 
// expected A[ 14 ]
initial
begin
	A_expected[14] = 1'bX;
	A_expected[14] = #59999000 1'b0;
end 
// expected A[ 13 ]
initial
begin
	A_expected[13] = 1'bX;
	A_expected[13] = #59999000 1'b0;
end 
// expected A[ 12 ]
initial
begin
	A_expected[12] = 1'bX;
	A_expected[12] = #59999000 1'b0;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
	A_expected[11] = #59999000 1'b0;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
	A_expected[10] = #59999000 1'b0;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
	A_expected[9] = #59999000 1'b0;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
	A_expected[8] = #59999000 1'b0;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
	A_expected[7] = #59999000 1'b0;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
	A_expected[6] = #59999000 1'b0;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
	A_expected[5] = #59999000 1'b0;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
	A_expected[4] = #59999000 1'b0;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
	A_expected[3] = #59999000 1'b0;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
	A_expected[2] = #59999000 1'b0;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
	A_expected[1] = #59999000 1'b0;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
	A_expected[0] = #59999000 1'b0;
end 
// expected B[ 31 ]
initial
begin
	B_expected[31] = 1'bX;
	B_expected[31] = #59999000 1'b0;
end 
// expected B[ 30 ]
initial
begin
	B_expected[30] = 1'bX;
	B_expected[30] = #59999000 1'b0;
end 
// expected B[ 29 ]
initial
begin
	B_expected[29] = 1'bX;
	B_expected[29] = #59999000 1'b0;
end 
// expected B[ 28 ]
initial
begin
	B_expected[28] = 1'bX;
	B_expected[28] = #59999000 1'b0;
end 
// expected B[ 27 ]
initial
begin
	B_expected[27] = 1'bX;
	B_expected[27] = #59999000 1'b0;
end 
// expected B[ 26 ]
initial
begin
	B_expected[26] = 1'bX;
	B_expected[26] = #59999000 1'b0;
end 
// expected B[ 25 ]
initial
begin
	B_expected[25] = 1'bX;
	B_expected[25] = #59999000 1'b0;
end 
// expected B[ 24 ]
initial
begin
	B_expected[24] = 1'bX;
	B_expected[24] = #59999000 1'b0;
end 
// expected B[ 23 ]
initial
begin
	B_expected[23] = 1'bX;
	B_expected[23] = #59999000 1'b0;
end 
// expected B[ 22 ]
initial
begin
	B_expected[22] = 1'bX;
	B_expected[22] = #59999000 1'b0;
end 
// expected B[ 21 ]
initial
begin
	B_expected[21] = 1'bX;
	B_expected[21] = #59999000 1'b0;
end 
// expected B[ 20 ]
initial
begin
	B_expected[20] = 1'bX;
	B_expected[20] = #59999000 1'b0;
end 
// expected B[ 19 ]
initial
begin
	B_expected[19] = 1'bX;
	B_expected[19] = #59999000 1'b0;
end 
// expected B[ 18 ]
initial
begin
	B_expected[18] = 1'bX;
	B_expected[18] = #59999000 1'b0;
end 
// expected B[ 17 ]
initial
begin
	B_expected[17] = 1'bX;
	B_expected[17] = #59999000 1'b0;
end 
// expected B[ 16 ]
initial
begin
	B_expected[16] = 1'bX;
	B_expected[16] = #59999000 1'b0;
end 
// expected B[ 15 ]
initial
begin
	B_expected[15] = 1'bX;
	B_expected[15] = #59999000 1'b0;
end 
// expected B[ 14 ]
initial
begin
	B_expected[14] = 1'bX;
	B_expected[14] = #59999000 1'b0;
end 
// expected B[ 13 ]
initial
begin
	B_expected[13] = 1'bX;
	B_expected[13] = #59999000 1'b0;
end 
// expected B[ 12 ]
initial
begin
	B_expected[12] = 1'bX;
	B_expected[12] = #59999000 1'b0;
end 
// expected B[ 11 ]
initial
begin
	B_expected[11] = 1'bX;
	B_expected[11] = #59999000 1'b0;
end 
// expected B[ 10 ]
initial
begin
	B_expected[10] = 1'bX;
	B_expected[10] = #59999000 1'b0;
end 
// expected B[ 9 ]
initial
begin
	B_expected[9] = 1'bX;
	B_expected[9] = #59999000 1'b0;
end 
// expected B[ 8 ]
initial
begin
	B_expected[8] = 1'bX;
	B_expected[8] = #59999000 1'b0;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
	B_expected[7] = #59999000 1'b0;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
	B_expected[6] = #59999000 1'b0;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
	B_expected[5] = #59999000 1'b0;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
	B_expected[4] = #59999000 1'b0;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
	B_expected[3] = #59999000 1'b0;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
	B_expected[2] = #59999000 1'b0;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
	B_expected[1] = #59999000 1'b0;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
	B_expected[0] = #59999000 1'b0;
end 
// expected outALU[ 31 ]
initial
begin
	outALU_expected[31] = 1'bX;
	outALU_expected[31] = #59999000 1'b0;
end 
// expected outALU[ 30 ]
initial
begin
	outALU_expected[30] = 1'bX;
	outALU_expected[30] = #59999000 1'b0;
end 
// expected outALU[ 29 ]
initial
begin
	outALU_expected[29] = 1'bX;
	outALU_expected[29] = #59999000 1'b0;
end 
// expected outALU[ 28 ]
initial
begin
	outALU_expected[28] = 1'bX;
	outALU_expected[28] = #59999000 1'b0;
end 
// expected outALU[ 27 ]
initial
begin
	outALU_expected[27] = 1'bX;
	outALU_expected[27] = #59999000 1'b0;
end 
// expected outALU[ 26 ]
initial
begin
	outALU_expected[26] = 1'bX;
	outALU_expected[26] = #59999000 1'b0;
end 
// expected outALU[ 25 ]
initial
begin
	outALU_expected[25] = 1'bX;
	outALU_expected[25] = #59999000 1'b0;
end 
// expected outALU[ 24 ]
initial
begin
	outALU_expected[24] = 1'bX;
	outALU_expected[24] = #59999000 1'b0;
end 
// expected outALU[ 23 ]
initial
begin
	outALU_expected[23] = 1'bX;
	outALU_expected[23] = #59999000 1'b0;
end 
// expected outALU[ 22 ]
initial
begin
	outALU_expected[22] = 1'bX;
	outALU_expected[22] = #59999000 1'b0;
end 
// expected outALU[ 21 ]
initial
begin
	outALU_expected[21] = 1'bX;
	outALU_expected[21] = #59999000 1'b0;
end 
// expected outALU[ 20 ]
initial
begin
	outALU_expected[20] = 1'bX;
	outALU_expected[20] = #59999000 1'b0;
end 
// expected outALU[ 19 ]
initial
begin
	outALU_expected[19] = 1'bX;
	outALU_expected[19] = #59999000 1'b0;
end 
// expected outALU[ 18 ]
initial
begin
	outALU_expected[18] = 1'bX;
	outALU_expected[18] = #59999000 1'b0;
end 
// expected outALU[ 17 ]
initial
begin
	outALU_expected[17] = 1'bX;
	outALU_expected[17] = #59999000 1'b0;
end 
// expected outALU[ 16 ]
initial
begin
	outALU_expected[16] = 1'bX;
	outALU_expected[16] = #59999000 1'b0;
end 
// expected outALU[ 15 ]
initial
begin
	outALU_expected[15] = 1'bX;
	outALU_expected[15] = #59999000 1'b0;
end 
// expected outALU[ 14 ]
initial
begin
	outALU_expected[14] = 1'bX;
	outALU_expected[14] = #59999000 1'b0;
end 
// expected outALU[ 13 ]
initial
begin
	outALU_expected[13] = 1'bX;
	outALU_expected[13] = #59999000 1'b0;
end 
// expected outALU[ 12 ]
initial
begin
	outALU_expected[12] = 1'bX;
	outALU_expected[12] = #59999000 1'b0;
end 
// expected outALU[ 11 ]
initial
begin
	outALU_expected[11] = 1'bX;
	outALU_expected[11] = #59999000 1'b0;
end 
// expected outALU[ 10 ]
initial
begin
	outALU_expected[10] = 1'bX;
	outALU_expected[10] = #59999000 1'b0;
end 
// expected outALU[ 9 ]
initial
begin
	outALU_expected[9] = 1'bX;
	outALU_expected[9] = #59999000 1'b0;
end 
// expected outALU[ 8 ]
initial
begin
	outALU_expected[8] = 1'bX;
	outALU_expected[8] = #59999000 1'b0;
end 
// expected outALU[ 7 ]
initial
begin
	outALU_expected[7] = 1'bX;
	outALU_expected[7] = #59999000 1'b0;
end 
// expected outALU[ 6 ]
initial
begin
	outALU_expected[6] = 1'bX;
	outALU_expected[6] = #59999000 1'b0;
end 
// expected outALU[ 5 ]
initial
begin
	outALU_expected[5] = 1'bX;
	outALU_expected[5] = #59999000 1'b0;
end 
// expected outALU[ 4 ]
initial
begin
	outALU_expected[4] = 1'bX;
	outALU_expected[4] = #59999000 1'b0;
end 
// expected outALU[ 3 ]
initial
begin
	outALU_expected[3] = 1'bX;
	outALU_expected[3] = #59999000 1'b0;
end 
// expected outALU[ 2 ]
initial
begin
	outALU_expected[2] = 1'bX;
	outALU_expected[2] = #59999000 1'b0;
end 
// expected outALU[ 1 ]
initial
begin
	outALU_expected[1] = 1'bX;
	outALU_expected[1] = #59999000 1'b0;
end 
// expected outALU[ 0 ]
initial
begin
	outALU_expected[0] = 1'bX;
	outALU_expected[0] = #59999000 1'b0;
end 

// expected MemParaReg
initial
begin
	MemParaReg_expected = 1'bX;
end 

// expected EscreveMem
initial
begin
	EscreveMem_expected = 1'bX;
end 
// expected adressMem[ 9 ]
initial
begin
	adressMem_expected[9] = 1'bX;
	adressMem_expected[9] = #59999000 1'b0;
end 
// expected adressMem[ 8 ]
initial
begin
	adressMem_expected[8] = 1'bX;
	adressMem_expected[8] = #59999000 1'b0;
end 
// expected adressMem[ 7 ]
initial
begin
	adressMem_expected[7] = 1'bX;
	adressMem_expected[7] = #59999000 1'b0;
end 
// expected adressMem[ 6 ]
initial
begin
	adressMem_expected[6] = 1'bX;
	adressMem_expected[6] = #59999000 1'b0;
end 
// expected adressMem[ 5 ]
initial
begin
	adressMem_expected[5] = 1'bX;
	adressMem_expected[5] = #59999000 1'b0;
end 
// expected adressMem[ 4 ]
initial
begin
	adressMem_expected[4] = 1'bX;
	adressMem_expected[4] = #59999000 1'b0;
end 
// expected adressMem[ 3 ]
initial
begin
	adressMem_expected[3] = 1'bX;
	adressMem_expected[3] = #59999000 1'b0;
end 
// expected adressMem[ 2 ]
initial
begin
	adressMem_expected[2] = 1'bX;
	adressMem_expected[2] = #59999000 1'b0;
end 
// expected adressMem[ 1 ]
initial
begin
	adressMem_expected[1] = 1'bX;
	adressMem_expected[1] = #59999000 1'b0;
end 
// expected adressMem[ 0 ]
initial
begin
	adressMem_expected[0] = 1'bX;
	adressMem_expected[0] = #59999000 1'b0;
end 
// expected MemDataIn[ 31 ]
initial
begin
	MemDataIn_expected[31] = 1'bX;
	MemDataIn_expected[31] = #59999000 1'b0;
end 
// expected MemDataIn[ 30 ]
initial
begin
	MemDataIn_expected[30] = 1'bX;
	MemDataIn_expected[30] = #59999000 1'b0;
end 
// expected MemDataIn[ 29 ]
initial
begin
	MemDataIn_expected[29] = 1'bX;
	MemDataIn_expected[29] = #59999000 1'b0;
end 
// expected MemDataIn[ 28 ]
initial
begin
	MemDataIn_expected[28] = 1'bX;
	MemDataIn_expected[28] = #59999000 1'b0;
end 
// expected MemDataIn[ 27 ]
initial
begin
	MemDataIn_expected[27] = 1'bX;
	MemDataIn_expected[27] = #59999000 1'b0;
end 
// expected MemDataIn[ 26 ]
initial
begin
	MemDataIn_expected[26] = 1'bX;
	MemDataIn_expected[26] = #59999000 1'b0;
end 
// expected MemDataIn[ 25 ]
initial
begin
	MemDataIn_expected[25] = 1'bX;
	MemDataIn_expected[25] = #59999000 1'b0;
end 
// expected MemDataIn[ 24 ]
initial
begin
	MemDataIn_expected[24] = 1'bX;
	MemDataIn_expected[24] = #59999000 1'b0;
end 
// expected MemDataIn[ 23 ]
initial
begin
	MemDataIn_expected[23] = 1'bX;
	MemDataIn_expected[23] = #59999000 1'b0;
end 
// expected MemDataIn[ 22 ]
initial
begin
	MemDataIn_expected[22] = 1'bX;
	MemDataIn_expected[22] = #59999000 1'b0;
end 
// expected MemDataIn[ 21 ]
initial
begin
	MemDataIn_expected[21] = 1'bX;
	MemDataIn_expected[21] = #59999000 1'b0;
end 
// expected MemDataIn[ 20 ]
initial
begin
	MemDataIn_expected[20] = 1'bX;
	MemDataIn_expected[20] = #59999000 1'b0;
end 
// expected MemDataIn[ 19 ]
initial
begin
	MemDataIn_expected[19] = 1'bX;
	MemDataIn_expected[19] = #59999000 1'b0;
end 
// expected MemDataIn[ 18 ]
initial
begin
	MemDataIn_expected[18] = 1'bX;
	MemDataIn_expected[18] = #59999000 1'b0;
end 
// expected MemDataIn[ 17 ]
initial
begin
	MemDataIn_expected[17] = 1'bX;
	MemDataIn_expected[17] = #59999000 1'b0;
end 
// expected MemDataIn[ 16 ]
initial
begin
	MemDataIn_expected[16] = 1'bX;
	MemDataIn_expected[16] = #59999000 1'b0;
end 
// expected MemDataIn[ 15 ]
initial
begin
	MemDataIn_expected[15] = 1'bX;
	MemDataIn_expected[15] = #59999000 1'b0;
end 
// expected MemDataIn[ 14 ]
initial
begin
	MemDataIn_expected[14] = 1'bX;
	MemDataIn_expected[14] = #59999000 1'b0;
end 
// expected MemDataIn[ 13 ]
initial
begin
	MemDataIn_expected[13] = 1'bX;
	MemDataIn_expected[13] = #59999000 1'b0;
end 
// expected MemDataIn[ 12 ]
initial
begin
	MemDataIn_expected[12] = 1'bX;
	MemDataIn_expected[12] = #59999000 1'b0;
end 
// expected MemDataIn[ 11 ]
initial
begin
	MemDataIn_expected[11] = 1'bX;
	MemDataIn_expected[11] = #59999000 1'b0;
end 
// expected MemDataIn[ 10 ]
initial
begin
	MemDataIn_expected[10] = 1'bX;
	MemDataIn_expected[10] = #59999000 1'b0;
end 
// expected MemDataIn[ 9 ]
initial
begin
	MemDataIn_expected[9] = 1'bX;
	MemDataIn_expected[9] = #59999000 1'b0;
end 
// expected MemDataIn[ 8 ]
initial
begin
	MemDataIn_expected[8] = 1'bX;
	MemDataIn_expected[8] = #59999000 1'b0;
end 
// expected MemDataIn[ 7 ]
initial
begin
	MemDataIn_expected[7] = 1'bX;
	MemDataIn_expected[7] = #59999000 1'b0;
end 
// expected MemDataIn[ 6 ]
initial
begin
	MemDataIn_expected[6] = 1'bX;
	MemDataIn_expected[6] = #59999000 1'b0;
end 
// expected MemDataIn[ 5 ]
initial
begin
	MemDataIn_expected[5] = 1'bX;
	MemDataIn_expected[5] = #59999000 1'b0;
end 
// expected MemDataIn[ 4 ]
initial
begin
	MemDataIn_expected[4] = 1'bX;
	MemDataIn_expected[4] = #59999000 1'b0;
end 
// expected MemDataIn[ 3 ]
initial
begin
	MemDataIn_expected[3] = 1'bX;
	MemDataIn_expected[3] = #59999000 1'b0;
end 
// expected MemDataIn[ 2 ]
initial
begin
	MemDataIn_expected[2] = 1'bX;
	MemDataIn_expected[2] = #59999000 1'b0;
end 
// expected MemDataIn[ 1 ]
initial
begin
	MemDataIn_expected[1] = 1'bX;
	MemDataIn_expected[1] = #59999000 1'b0;
end 
// expected MemDataIn[ 0 ]
initial
begin
	MemDataIn_expected[0] = 1'bX;
	MemDataIn_expected[0] = #59999000 1'b0;
end 
// expected MemReadValue[ 31 ]
initial
begin
	MemReadValue_expected[31] = 1'bX;
end 
// expected MemReadValue[ 30 ]
initial
begin
	MemReadValue_expected[30] = 1'bX;
end 
// expected MemReadValue[ 29 ]
initial
begin
	MemReadValue_expected[29] = 1'bX;
end 
// expected MemReadValue[ 28 ]
initial
begin
	MemReadValue_expected[28] = 1'bX;
end 
// expected MemReadValue[ 27 ]
initial
begin
	MemReadValue_expected[27] = 1'bX;
end 
// expected MemReadValue[ 26 ]
initial
begin
	MemReadValue_expected[26] = 1'bX;
end 
// expected MemReadValue[ 25 ]
initial
begin
	MemReadValue_expected[25] = 1'bX;
end 
// expected MemReadValue[ 24 ]
initial
begin
	MemReadValue_expected[24] = 1'bX;
end 
// expected MemReadValue[ 23 ]
initial
begin
	MemReadValue_expected[23] = 1'bX;
end 
// expected MemReadValue[ 22 ]
initial
begin
	MemReadValue_expected[22] = 1'bX;
end 
// expected MemReadValue[ 21 ]
initial
begin
	MemReadValue_expected[21] = 1'bX;
end 
// expected MemReadValue[ 20 ]
initial
begin
	MemReadValue_expected[20] = 1'bX;
end 
// expected MemReadValue[ 19 ]
initial
begin
	MemReadValue_expected[19] = 1'bX;
end 
// expected MemReadValue[ 18 ]
initial
begin
	MemReadValue_expected[18] = 1'bX;
end 
// expected MemReadValue[ 17 ]
initial
begin
	MemReadValue_expected[17] = 1'bX;
end 
// expected MemReadValue[ 16 ]
initial
begin
	MemReadValue_expected[16] = 1'bX;
end 
// expected MemReadValue[ 15 ]
initial
begin
	MemReadValue_expected[15] = 1'bX;
end 
// expected MemReadValue[ 14 ]
initial
begin
	MemReadValue_expected[14] = 1'bX;
end 
// expected MemReadValue[ 13 ]
initial
begin
	MemReadValue_expected[13] = 1'bX;
end 
// expected MemReadValue[ 12 ]
initial
begin
	MemReadValue_expected[12] = 1'bX;
end 
// expected MemReadValue[ 11 ]
initial
begin
	MemReadValue_expected[11] = 1'bX;
end 
// expected MemReadValue[ 10 ]
initial
begin
	MemReadValue_expected[10] = 1'bX;
end 
// expected MemReadValue[ 9 ]
initial
begin
	MemReadValue_expected[9] = 1'bX;
end 
// expected MemReadValue[ 8 ]
initial
begin
	MemReadValue_expected[8] = 1'bX;
end 
// expected MemReadValue[ 7 ]
initial
begin
	MemReadValue_expected[7] = 1'bX;
end 
// expected MemReadValue[ 6 ]
initial
begin
	MemReadValue_expected[6] = 1'bX;
end 
// expected MemReadValue[ 5 ]
initial
begin
	MemReadValue_expected[5] = 1'bX;
end 
// expected MemReadValue[ 4 ]
initial
begin
	MemReadValue_expected[4] = 1'bX;
end 
// expected MemReadValue[ 3 ]
initial
begin
	MemReadValue_expected[3] = 1'bX;
end 
// expected MemReadValue[ 2 ]
initial
begin
	MemReadValue_expected[2] = 1'bX;
end 
// expected MemReadValue[ 1 ]
initial
begin
	MemReadValue_expected[1] = 1'bX;
end 
// expected MemReadValue[ 0 ]
initial
begin
	MemReadValue_expected[0] = 1'bX;
end 

// expected EscreveReg
initial
begin
	EscreveReg_expected = 1'bX;
end 
// expected High[ 31 ]
initial
begin
	High_expected[31] = 1'bX;
	High_expected[31] = #59999000 1'b0;
end 
// expected High[ 30 ]
initial
begin
	High_expected[30] = 1'bX;
	High_expected[30] = #59999000 1'b0;
end 
// expected High[ 29 ]
initial
begin
	High_expected[29] = 1'bX;
	High_expected[29] = #59999000 1'b0;
end 
// expected High[ 28 ]
initial
begin
	High_expected[28] = 1'bX;
	High_expected[28] = #59999000 1'b0;
end 
// expected High[ 27 ]
initial
begin
	High_expected[27] = 1'bX;
	High_expected[27] = #59999000 1'b0;
end 
// expected High[ 26 ]
initial
begin
	High_expected[26] = 1'bX;
	High_expected[26] = #59999000 1'b0;
end 
// expected High[ 25 ]
initial
begin
	High_expected[25] = 1'bX;
	High_expected[25] = #59999000 1'b0;
end 
// expected High[ 24 ]
initial
begin
	High_expected[24] = 1'bX;
	High_expected[24] = #59999000 1'b0;
end 
// expected High[ 23 ]
initial
begin
	High_expected[23] = 1'bX;
	High_expected[23] = #59999000 1'b0;
end 
// expected High[ 22 ]
initial
begin
	High_expected[22] = 1'bX;
	High_expected[22] = #59999000 1'b0;
end 
// expected High[ 21 ]
initial
begin
	High_expected[21] = 1'bX;
	High_expected[21] = #59999000 1'b0;
end 
// expected High[ 20 ]
initial
begin
	High_expected[20] = 1'bX;
	High_expected[20] = #59999000 1'b0;
end 
// expected High[ 19 ]
initial
begin
	High_expected[19] = 1'bX;
	High_expected[19] = #59999000 1'b0;
end 
// expected High[ 18 ]
initial
begin
	High_expected[18] = 1'bX;
	High_expected[18] = #59999000 1'b0;
end 
// expected High[ 17 ]
initial
begin
	High_expected[17] = 1'bX;
	High_expected[17] = #59999000 1'b0;
end 
// expected High[ 16 ]
initial
begin
	High_expected[16] = 1'bX;
	High_expected[16] = #59999000 1'b0;
end 
// expected High[ 15 ]
initial
begin
	High_expected[15] = 1'bX;
	High_expected[15] = #59999000 1'b0;
end 
// expected High[ 14 ]
initial
begin
	High_expected[14] = 1'bX;
	High_expected[14] = #59999000 1'b0;
end 
// expected High[ 13 ]
initial
begin
	High_expected[13] = 1'bX;
	High_expected[13] = #59999000 1'b0;
end 
// expected High[ 12 ]
initial
begin
	High_expected[12] = 1'bX;
	High_expected[12] = #59999000 1'b0;
end 
// expected High[ 11 ]
initial
begin
	High_expected[11] = 1'bX;
	High_expected[11] = #59999000 1'b0;
end 
// expected High[ 10 ]
initial
begin
	High_expected[10] = 1'bX;
	High_expected[10] = #59999000 1'b0;
end 
// expected High[ 9 ]
initial
begin
	High_expected[9] = 1'bX;
	High_expected[9] = #59999000 1'b0;
end 
// expected High[ 8 ]
initial
begin
	High_expected[8] = 1'bX;
	High_expected[8] = #59999000 1'b0;
end 
// expected High[ 7 ]
initial
begin
	High_expected[7] = 1'bX;
	High_expected[7] = #59999000 1'b0;
end 
// expected High[ 6 ]
initial
begin
	High_expected[6] = 1'bX;
	High_expected[6] = #59999000 1'b0;
end 
// expected High[ 5 ]
initial
begin
	High_expected[5] = 1'bX;
	High_expected[5] = #59999000 1'b0;
end 
// expected High[ 4 ]
initial
begin
	High_expected[4] = 1'bX;
	High_expected[4] = #59999000 1'b0;
end 
// expected High[ 3 ]
initial
begin
	High_expected[3] = 1'bX;
	High_expected[3] = #59999000 1'b0;
end 
// expected High[ 2 ]
initial
begin
	High_expected[2] = 1'bX;
	High_expected[2] = #59999000 1'b0;
end 
// expected High[ 1 ]
initial
begin
	High_expected[1] = 1'bX;
	High_expected[1] = #59999000 1'b0;
end 
// expected High[ 0 ]
initial
begin
	High_expected[0] = 1'bX;
	High_expected[0] = #59999000 1'b0;
end 
// expected Low[ 31 ]
initial
begin
	Low_expected[31] = 1'bX;
	Low_expected[31] = #59999000 1'b0;
end 
// expected Low[ 30 ]
initial
begin
	Low_expected[30] = 1'bX;
	Low_expected[30] = #59999000 1'b0;
end 
// expected Low[ 29 ]
initial
begin
	Low_expected[29] = 1'bX;
	Low_expected[29] = #59999000 1'b0;
end 
// expected Low[ 28 ]
initial
begin
	Low_expected[28] = 1'bX;
	Low_expected[28] = #59999000 1'b0;
end 
// expected Low[ 27 ]
initial
begin
	Low_expected[27] = 1'bX;
	Low_expected[27] = #59999000 1'b0;
end 
// expected Low[ 26 ]
initial
begin
	Low_expected[26] = 1'bX;
	Low_expected[26] = #59999000 1'b0;
end 
// expected Low[ 25 ]
initial
begin
	Low_expected[25] = 1'bX;
	Low_expected[25] = #59999000 1'b0;
end 
// expected Low[ 24 ]
initial
begin
	Low_expected[24] = 1'bX;
	Low_expected[24] = #59999000 1'b0;
end 
// expected Low[ 23 ]
initial
begin
	Low_expected[23] = 1'bX;
	Low_expected[23] = #59999000 1'b0;
end 
// expected Low[ 22 ]
initial
begin
	Low_expected[22] = 1'bX;
	Low_expected[22] = #59999000 1'b0;
end 
// expected Low[ 21 ]
initial
begin
	Low_expected[21] = 1'bX;
	Low_expected[21] = #59999000 1'b0;
end 
// expected Low[ 20 ]
initial
begin
	Low_expected[20] = 1'bX;
	Low_expected[20] = #59999000 1'b0;
end 
// expected Low[ 19 ]
initial
begin
	Low_expected[19] = 1'bX;
	Low_expected[19] = #59999000 1'b0;
end 
// expected Low[ 18 ]
initial
begin
	Low_expected[18] = 1'bX;
	Low_expected[18] = #59999000 1'b0;
end 
// expected Low[ 17 ]
initial
begin
	Low_expected[17] = 1'bX;
	Low_expected[17] = #59999000 1'b0;
end 
// expected Low[ 16 ]
initial
begin
	Low_expected[16] = 1'bX;
	Low_expected[16] = #59999000 1'b0;
end 
// expected Low[ 15 ]
initial
begin
	Low_expected[15] = 1'bX;
	Low_expected[15] = #59999000 1'b0;
end 
// expected Low[ 14 ]
initial
begin
	Low_expected[14] = 1'bX;
	Low_expected[14] = #59999000 1'b0;
end 
// expected Low[ 13 ]
initial
begin
	Low_expected[13] = 1'bX;
	Low_expected[13] = #59999000 1'b0;
end 
// expected Low[ 12 ]
initial
begin
	Low_expected[12] = 1'bX;
	Low_expected[12] = #59999000 1'b0;
end 
// expected Low[ 11 ]
initial
begin
	Low_expected[11] = 1'bX;
	Low_expected[11] = #59999000 1'b0;
end 
// expected Low[ 10 ]
initial
begin
	Low_expected[10] = 1'bX;
	Low_expected[10] = #59999000 1'b0;
end 
// expected Low[ 9 ]
initial
begin
	Low_expected[9] = 1'bX;
	Low_expected[9] = #59999000 1'b0;
end 
// expected Low[ 8 ]
initial
begin
	Low_expected[8] = 1'bX;
	Low_expected[8] = #59999000 1'b0;
end 
// expected Low[ 7 ]
initial
begin
	Low_expected[7] = 1'bX;
	Low_expected[7] = #59999000 1'b0;
end 
// expected Low[ 6 ]
initial
begin
	Low_expected[6] = 1'bX;
	Low_expected[6] = #59999000 1'b0;
end 
// expected Low[ 5 ]
initial
begin
	Low_expected[5] = 1'bX;
	Low_expected[5] = #59999000 1'b0;
end 
// expected Low[ 4 ]
initial
begin
	Low_expected[4] = 1'bX;
	Low_expected[4] = #59999000 1'b0;
end 
// expected Low[ 3 ]
initial
begin
	Low_expected[3] = 1'bX;
	Low_expected[3] = #59999000 1'b0;
end 
// expected Low[ 2 ]
initial
begin
	Low_expected[2] = 1'bX;
	Low_expected[2] = #59999000 1'b0;
end 
// expected Low[ 1 ]
initial
begin
	Low_expected[1] = 1'bX;
	Low_expected[1] = #59999000 1'b0;
end 
// expected Low[ 0 ]
initial
begin
	Low_expected[0] = 1'bX;
	Low_expected[0] = #59999000 1'b0;
end 
// generate trigger
always @(A_expected or A or adressMem_expected or adressMem or atualPC_expected or atualPC or B_expected or B or EscreveMem_expected or EscreveMem or EscreveReg_expected or EscreveReg or High_expected or High or Instruction_expected or Instruction or Low_expected or Low or MemDataIn_expected or MemDataIn or MemParaReg_expected or MemParaReg or MemReadValue_expected or MemReadValue or outALU_expected or outALU or proxPC_expected or proxPC or WBwriteData_expected or WBwriteData or WBwriteRegister_expected or WBwriteRegister)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected adressMem = %b | expected atualPC = %b | expected B = %b | expected EscreveMem = %b | expected EscreveReg = %b | expected High = %b | expected Instruction = %b | expected Low = %b | expected MemDataIn = %b | expected MemParaReg = %b | expected MemReadValue = %b | expected outALU = %b | expected proxPC = %b | expected WBwriteData = %b | expected WBwriteRegister = %b | ",A_expected_prev,adressMem_expected_prev,atualPC_expected_prev,B_expected_prev,EscreveMem_expected_prev,EscreveReg_expected_prev,High_expected_prev,Instruction_expected_prev,Low_expected_prev,MemDataIn_expected_prev,MemParaReg_expected_prev,MemReadValue_expected_prev,outALU_expected_prev,proxPC_expected_prev,WBwriteData_expected_prev,WBwriteRegister_expected_prev);
	$display("| real A = %b | real adressMem = %b | real atualPC = %b | real B = %b | real EscreveMem = %b | real EscreveReg = %b | real High = %b | real Instruction = %b | real Low = %b | real MemDataIn = %b | real MemParaReg = %b | real MemReadValue = %b | real outALU = %b | real proxPC = %b | real WBwriteData = %b | real WBwriteRegister = %b | ",A_prev,adressMem_prev,atualPC_prev,B_prev,EscreveMem_prev,EscreveReg_prev,High_prev,Instruction_prev,Low_prev,MemDataIn_prev,MemParaReg_prev,MemReadValue_prev,outALU_prev,proxPC_prev,WBwriteData_prev,WBwriteRegister_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( A_expected_prev[12] !== 1'bx ) && ( A_prev[12] !== A_expected_prev[12] )
		&& ((A_expected_prev[12] !== last_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[12] = A_expected_prev[12];
	end
	if (
		( A_expected_prev[13] !== 1'bx ) && ( A_prev[13] !== A_expected_prev[13] )
		&& ((A_expected_prev[13] !== last_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[13] = A_expected_prev[13];
	end
	if (
		( A_expected_prev[14] !== 1'bx ) && ( A_prev[14] !== A_expected_prev[14] )
		&& ((A_expected_prev[14] !== last_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[14] = A_expected_prev[14];
	end
	if (
		( A_expected_prev[15] !== 1'bx ) && ( A_prev[15] !== A_expected_prev[15] )
		&& ((A_expected_prev[15] !== last_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[15] = A_expected_prev[15];
	end
	if (
		( A_expected_prev[16] !== 1'bx ) && ( A_prev[16] !== A_expected_prev[16] )
		&& ((A_expected_prev[16] !== last_A_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[16] = A_expected_prev[16];
	end
	if (
		( A_expected_prev[17] !== 1'bx ) && ( A_prev[17] !== A_expected_prev[17] )
		&& ((A_expected_prev[17] !== last_A_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[17] = A_expected_prev[17];
	end
	if (
		( A_expected_prev[18] !== 1'bx ) && ( A_prev[18] !== A_expected_prev[18] )
		&& ((A_expected_prev[18] !== last_A_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[18] = A_expected_prev[18];
	end
	if (
		( A_expected_prev[19] !== 1'bx ) && ( A_prev[19] !== A_expected_prev[19] )
		&& ((A_expected_prev[19] !== last_A_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[19] = A_expected_prev[19];
	end
	if (
		( A_expected_prev[20] !== 1'bx ) && ( A_prev[20] !== A_expected_prev[20] )
		&& ((A_expected_prev[20] !== last_A_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[20] = A_expected_prev[20];
	end
	if (
		( A_expected_prev[21] !== 1'bx ) && ( A_prev[21] !== A_expected_prev[21] )
		&& ((A_expected_prev[21] !== last_A_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[21] = A_expected_prev[21];
	end
	if (
		( A_expected_prev[22] !== 1'bx ) && ( A_prev[22] !== A_expected_prev[22] )
		&& ((A_expected_prev[22] !== last_A_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[22] = A_expected_prev[22];
	end
	if (
		( A_expected_prev[23] !== 1'bx ) && ( A_prev[23] !== A_expected_prev[23] )
		&& ((A_expected_prev[23] !== last_A_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[23] = A_expected_prev[23];
	end
	if (
		( A_expected_prev[24] !== 1'bx ) && ( A_prev[24] !== A_expected_prev[24] )
		&& ((A_expected_prev[24] !== last_A_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[24] = A_expected_prev[24];
	end
	if (
		( A_expected_prev[25] !== 1'bx ) && ( A_prev[25] !== A_expected_prev[25] )
		&& ((A_expected_prev[25] !== last_A_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[25] = A_expected_prev[25];
	end
	if (
		( A_expected_prev[26] !== 1'bx ) && ( A_prev[26] !== A_expected_prev[26] )
		&& ((A_expected_prev[26] !== last_A_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[26] = A_expected_prev[26];
	end
	if (
		( A_expected_prev[27] !== 1'bx ) && ( A_prev[27] !== A_expected_prev[27] )
		&& ((A_expected_prev[27] !== last_A_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[27] = A_expected_prev[27];
	end
	if (
		( A_expected_prev[28] !== 1'bx ) && ( A_prev[28] !== A_expected_prev[28] )
		&& ((A_expected_prev[28] !== last_A_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[28] = A_expected_prev[28];
	end
	if (
		( A_expected_prev[29] !== 1'bx ) && ( A_prev[29] !== A_expected_prev[29] )
		&& ((A_expected_prev[29] !== last_A_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[29] = A_expected_prev[29];
	end
	if (
		( A_expected_prev[30] !== 1'bx ) && ( A_prev[30] !== A_expected_prev[30] )
		&& ((A_expected_prev[30] !== last_A_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[30] = A_expected_prev[30];
	end
	if (
		( A_expected_prev[31] !== 1'bx ) && ( A_prev[31] !== A_expected_prev[31] )
		&& ((A_expected_prev[31] !== last_A_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[31] = A_expected_prev[31];
	end
	if (
		( adressMem_expected_prev[0] !== 1'bx ) && ( adressMem_prev[0] !== adressMem_expected_prev[0] )
		&& ((adressMem_expected_prev[0] !== last_adressMem_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[0] = adressMem_expected_prev[0];
	end
	if (
		( adressMem_expected_prev[1] !== 1'bx ) && ( adressMem_prev[1] !== adressMem_expected_prev[1] )
		&& ((adressMem_expected_prev[1] !== last_adressMem_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[1] = adressMem_expected_prev[1];
	end
	if (
		( adressMem_expected_prev[2] !== 1'bx ) && ( adressMem_prev[2] !== adressMem_expected_prev[2] )
		&& ((adressMem_expected_prev[2] !== last_adressMem_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[2] = adressMem_expected_prev[2];
	end
	if (
		( adressMem_expected_prev[3] !== 1'bx ) && ( adressMem_prev[3] !== adressMem_expected_prev[3] )
		&& ((adressMem_expected_prev[3] !== last_adressMem_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[3] = adressMem_expected_prev[3];
	end
	if (
		( adressMem_expected_prev[4] !== 1'bx ) && ( adressMem_prev[4] !== adressMem_expected_prev[4] )
		&& ((adressMem_expected_prev[4] !== last_adressMem_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[4] = adressMem_expected_prev[4];
	end
	if (
		( adressMem_expected_prev[5] !== 1'bx ) && ( adressMem_prev[5] !== adressMem_expected_prev[5] )
		&& ((adressMem_expected_prev[5] !== last_adressMem_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[5] = adressMem_expected_prev[5];
	end
	if (
		( adressMem_expected_prev[6] !== 1'bx ) && ( adressMem_prev[6] !== adressMem_expected_prev[6] )
		&& ((adressMem_expected_prev[6] !== last_adressMem_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[6] = adressMem_expected_prev[6];
	end
	if (
		( adressMem_expected_prev[7] !== 1'bx ) && ( adressMem_prev[7] !== adressMem_expected_prev[7] )
		&& ((adressMem_expected_prev[7] !== last_adressMem_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[7] = adressMem_expected_prev[7];
	end
	if (
		( adressMem_expected_prev[8] !== 1'bx ) && ( adressMem_prev[8] !== adressMem_expected_prev[8] )
		&& ((adressMem_expected_prev[8] !== last_adressMem_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[8] = adressMem_expected_prev[8];
	end
	if (
		( adressMem_expected_prev[9] !== 1'bx ) && ( adressMem_prev[9] !== adressMem_expected_prev[9] )
		&& ((adressMem_expected_prev[9] !== last_adressMem_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adressMem[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adressMem_expected_prev);
		$display ("     Real value = %b", adressMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adressMem_exp[9] = adressMem_expected_prev[9];
	end
	if (
		( atualPC_expected_prev[0] !== 1'bx ) && ( atualPC_prev[0] !== atualPC_expected_prev[0] )
		&& ((atualPC_expected_prev[0] !== last_atualPC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[0] = atualPC_expected_prev[0];
	end
	if (
		( atualPC_expected_prev[1] !== 1'bx ) && ( atualPC_prev[1] !== atualPC_expected_prev[1] )
		&& ((atualPC_expected_prev[1] !== last_atualPC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[1] = atualPC_expected_prev[1];
	end
	if (
		( atualPC_expected_prev[2] !== 1'bx ) && ( atualPC_prev[2] !== atualPC_expected_prev[2] )
		&& ((atualPC_expected_prev[2] !== last_atualPC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[2] = atualPC_expected_prev[2];
	end
	if (
		( atualPC_expected_prev[3] !== 1'bx ) && ( atualPC_prev[3] !== atualPC_expected_prev[3] )
		&& ((atualPC_expected_prev[3] !== last_atualPC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[3] = atualPC_expected_prev[3];
	end
	if (
		( atualPC_expected_prev[4] !== 1'bx ) && ( atualPC_prev[4] !== atualPC_expected_prev[4] )
		&& ((atualPC_expected_prev[4] !== last_atualPC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[4] = atualPC_expected_prev[4];
	end
	if (
		( atualPC_expected_prev[5] !== 1'bx ) && ( atualPC_prev[5] !== atualPC_expected_prev[5] )
		&& ((atualPC_expected_prev[5] !== last_atualPC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[5] = atualPC_expected_prev[5];
	end
	if (
		( atualPC_expected_prev[6] !== 1'bx ) && ( atualPC_prev[6] !== atualPC_expected_prev[6] )
		&& ((atualPC_expected_prev[6] !== last_atualPC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[6] = atualPC_expected_prev[6];
	end
	if (
		( atualPC_expected_prev[7] !== 1'bx ) && ( atualPC_prev[7] !== atualPC_expected_prev[7] )
		&& ((atualPC_expected_prev[7] !== last_atualPC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[7] = atualPC_expected_prev[7];
	end
	if (
		( atualPC_expected_prev[8] !== 1'bx ) && ( atualPC_prev[8] !== atualPC_expected_prev[8] )
		&& ((atualPC_expected_prev[8] !== last_atualPC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[8] = atualPC_expected_prev[8];
	end
	if (
		( atualPC_expected_prev[9] !== 1'bx ) && ( atualPC_prev[9] !== atualPC_expected_prev[9] )
		&& ((atualPC_expected_prev[9] !== last_atualPC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[9] = atualPC_expected_prev[9];
	end
	if (
		( atualPC_expected_prev[10] !== 1'bx ) && ( atualPC_prev[10] !== atualPC_expected_prev[10] )
		&& ((atualPC_expected_prev[10] !== last_atualPC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[10] = atualPC_expected_prev[10];
	end
	if (
		( atualPC_expected_prev[11] !== 1'bx ) && ( atualPC_prev[11] !== atualPC_expected_prev[11] )
		&& ((atualPC_expected_prev[11] !== last_atualPC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[11] = atualPC_expected_prev[11];
	end
	if (
		( atualPC_expected_prev[12] !== 1'bx ) && ( atualPC_prev[12] !== atualPC_expected_prev[12] )
		&& ((atualPC_expected_prev[12] !== last_atualPC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[12] = atualPC_expected_prev[12];
	end
	if (
		( atualPC_expected_prev[13] !== 1'bx ) && ( atualPC_prev[13] !== atualPC_expected_prev[13] )
		&& ((atualPC_expected_prev[13] !== last_atualPC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[13] = atualPC_expected_prev[13];
	end
	if (
		( atualPC_expected_prev[14] !== 1'bx ) && ( atualPC_prev[14] !== atualPC_expected_prev[14] )
		&& ((atualPC_expected_prev[14] !== last_atualPC_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[14] = atualPC_expected_prev[14];
	end
	if (
		( atualPC_expected_prev[15] !== 1'bx ) && ( atualPC_prev[15] !== atualPC_expected_prev[15] )
		&& ((atualPC_expected_prev[15] !== last_atualPC_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[15] = atualPC_expected_prev[15];
	end
	if (
		( atualPC_expected_prev[16] !== 1'bx ) && ( atualPC_prev[16] !== atualPC_expected_prev[16] )
		&& ((atualPC_expected_prev[16] !== last_atualPC_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[16] = atualPC_expected_prev[16];
	end
	if (
		( atualPC_expected_prev[17] !== 1'bx ) && ( atualPC_prev[17] !== atualPC_expected_prev[17] )
		&& ((atualPC_expected_prev[17] !== last_atualPC_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[17] = atualPC_expected_prev[17];
	end
	if (
		( atualPC_expected_prev[18] !== 1'bx ) && ( atualPC_prev[18] !== atualPC_expected_prev[18] )
		&& ((atualPC_expected_prev[18] !== last_atualPC_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[18] = atualPC_expected_prev[18];
	end
	if (
		( atualPC_expected_prev[19] !== 1'bx ) && ( atualPC_prev[19] !== atualPC_expected_prev[19] )
		&& ((atualPC_expected_prev[19] !== last_atualPC_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[19] = atualPC_expected_prev[19];
	end
	if (
		( atualPC_expected_prev[20] !== 1'bx ) && ( atualPC_prev[20] !== atualPC_expected_prev[20] )
		&& ((atualPC_expected_prev[20] !== last_atualPC_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[20] = atualPC_expected_prev[20];
	end
	if (
		( atualPC_expected_prev[21] !== 1'bx ) && ( atualPC_prev[21] !== atualPC_expected_prev[21] )
		&& ((atualPC_expected_prev[21] !== last_atualPC_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[21] = atualPC_expected_prev[21];
	end
	if (
		( atualPC_expected_prev[22] !== 1'bx ) && ( atualPC_prev[22] !== atualPC_expected_prev[22] )
		&& ((atualPC_expected_prev[22] !== last_atualPC_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[22] = atualPC_expected_prev[22];
	end
	if (
		( atualPC_expected_prev[23] !== 1'bx ) && ( atualPC_prev[23] !== atualPC_expected_prev[23] )
		&& ((atualPC_expected_prev[23] !== last_atualPC_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[23] = atualPC_expected_prev[23];
	end
	if (
		( atualPC_expected_prev[24] !== 1'bx ) && ( atualPC_prev[24] !== atualPC_expected_prev[24] )
		&& ((atualPC_expected_prev[24] !== last_atualPC_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[24] = atualPC_expected_prev[24];
	end
	if (
		( atualPC_expected_prev[25] !== 1'bx ) && ( atualPC_prev[25] !== atualPC_expected_prev[25] )
		&& ((atualPC_expected_prev[25] !== last_atualPC_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[25] = atualPC_expected_prev[25];
	end
	if (
		( atualPC_expected_prev[26] !== 1'bx ) && ( atualPC_prev[26] !== atualPC_expected_prev[26] )
		&& ((atualPC_expected_prev[26] !== last_atualPC_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[26] = atualPC_expected_prev[26];
	end
	if (
		( atualPC_expected_prev[27] !== 1'bx ) && ( atualPC_prev[27] !== atualPC_expected_prev[27] )
		&& ((atualPC_expected_prev[27] !== last_atualPC_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[27] = atualPC_expected_prev[27];
	end
	if (
		( atualPC_expected_prev[28] !== 1'bx ) && ( atualPC_prev[28] !== atualPC_expected_prev[28] )
		&& ((atualPC_expected_prev[28] !== last_atualPC_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[28] = atualPC_expected_prev[28];
	end
	if (
		( atualPC_expected_prev[29] !== 1'bx ) && ( atualPC_prev[29] !== atualPC_expected_prev[29] )
		&& ((atualPC_expected_prev[29] !== last_atualPC_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[29] = atualPC_expected_prev[29];
	end
	if (
		( atualPC_expected_prev[30] !== 1'bx ) && ( atualPC_prev[30] !== atualPC_expected_prev[30] )
		&& ((atualPC_expected_prev[30] !== last_atualPC_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[30] = atualPC_expected_prev[30];
	end
	if (
		( atualPC_expected_prev[31] !== 1'bx ) && ( atualPC_prev[31] !== atualPC_expected_prev[31] )
		&& ((atualPC_expected_prev[31] !== last_atualPC_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atualPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atualPC_expected_prev);
		$display ("     Real value = %b", atualPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_atualPC_exp[31] = atualPC_expected_prev[31];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( B_expected_prev[8] !== 1'bx ) && ( B_prev[8] !== B_expected_prev[8] )
		&& ((B_expected_prev[8] !== last_B_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[8] = B_expected_prev[8];
	end
	if (
		( B_expected_prev[9] !== 1'bx ) && ( B_prev[9] !== B_expected_prev[9] )
		&& ((B_expected_prev[9] !== last_B_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[9] = B_expected_prev[9];
	end
	if (
		( B_expected_prev[10] !== 1'bx ) && ( B_prev[10] !== B_expected_prev[10] )
		&& ((B_expected_prev[10] !== last_B_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[10] = B_expected_prev[10];
	end
	if (
		( B_expected_prev[11] !== 1'bx ) && ( B_prev[11] !== B_expected_prev[11] )
		&& ((B_expected_prev[11] !== last_B_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[11] = B_expected_prev[11];
	end
	if (
		( B_expected_prev[12] !== 1'bx ) && ( B_prev[12] !== B_expected_prev[12] )
		&& ((B_expected_prev[12] !== last_B_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[12] = B_expected_prev[12];
	end
	if (
		( B_expected_prev[13] !== 1'bx ) && ( B_prev[13] !== B_expected_prev[13] )
		&& ((B_expected_prev[13] !== last_B_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[13] = B_expected_prev[13];
	end
	if (
		( B_expected_prev[14] !== 1'bx ) && ( B_prev[14] !== B_expected_prev[14] )
		&& ((B_expected_prev[14] !== last_B_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[14] = B_expected_prev[14];
	end
	if (
		( B_expected_prev[15] !== 1'bx ) && ( B_prev[15] !== B_expected_prev[15] )
		&& ((B_expected_prev[15] !== last_B_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[15] = B_expected_prev[15];
	end
	if (
		( B_expected_prev[16] !== 1'bx ) && ( B_prev[16] !== B_expected_prev[16] )
		&& ((B_expected_prev[16] !== last_B_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[16] = B_expected_prev[16];
	end
	if (
		( B_expected_prev[17] !== 1'bx ) && ( B_prev[17] !== B_expected_prev[17] )
		&& ((B_expected_prev[17] !== last_B_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[17] = B_expected_prev[17];
	end
	if (
		( B_expected_prev[18] !== 1'bx ) && ( B_prev[18] !== B_expected_prev[18] )
		&& ((B_expected_prev[18] !== last_B_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[18] = B_expected_prev[18];
	end
	if (
		( B_expected_prev[19] !== 1'bx ) && ( B_prev[19] !== B_expected_prev[19] )
		&& ((B_expected_prev[19] !== last_B_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[19] = B_expected_prev[19];
	end
	if (
		( B_expected_prev[20] !== 1'bx ) && ( B_prev[20] !== B_expected_prev[20] )
		&& ((B_expected_prev[20] !== last_B_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[20] = B_expected_prev[20];
	end
	if (
		( B_expected_prev[21] !== 1'bx ) && ( B_prev[21] !== B_expected_prev[21] )
		&& ((B_expected_prev[21] !== last_B_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[21] = B_expected_prev[21];
	end
	if (
		( B_expected_prev[22] !== 1'bx ) && ( B_prev[22] !== B_expected_prev[22] )
		&& ((B_expected_prev[22] !== last_B_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[22] = B_expected_prev[22];
	end
	if (
		( B_expected_prev[23] !== 1'bx ) && ( B_prev[23] !== B_expected_prev[23] )
		&& ((B_expected_prev[23] !== last_B_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[23] = B_expected_prev[23];
	end
	if (
		( B_expected_prev[24] !== 1'bx ) && ( B_prev[24] !== B_expected_prev[24] )
		&& ((B_expected_prev[24] !== last_B_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[24] = B_expected_prev[24];
	end
	if (
		( B_expected_prev[25] !== 1'bx ) && ( B_prev[25] !== B_expected_prev[25] )
		&& ((B_expected_prev[25] !== last_B_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[25] = B_expected_prev[25];
	end
	if (
		( B_expected_prev[26] !== 1'bx ) && ( B_prev[26] !== B_expected_prev[26] )
		&& ((B_expected_prev[26] !== last_B_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[26] = B_expected_prev[26];
	end
	if (
		( B_expected_prev[27] !== 1'bx ) && ( B_prev[27] !== B_expected_prev[27] )
		&& ((B_expected_prev[27] !== last_B_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[27] = B_expected_prev[27];
	end
	if (
		( B_expected_prev[28] !== 1'bx ) && ( B_prev[28] !== B_expected_prev[28] )
		&& ((B_expected_prev[28] !== last_B_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[28] = B_expected_prev[28];
	end
	if (
		( B_expected_prev[29] !== 1'bx ) && ( B_prev[29] !== B_expected_prev[29] )
		&& ((B_expected_prev[29] !== last_B_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[29] = B_expected_prev[29];
	end
	if (
		( B_expected_prev[30] !== 1'bx ) && ( B_prev[30] !== B_expected_prev[30] )
		&& ((B_expected_prev[30] !== last_B_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[30] = B_expected_prev[30];
	end
	if (
		( B_expected_prev[31] !== 1'bx ) && ( B_prev[31] !== B_expected_prev[31] )
		&& ((B_expected_prev[31] !== last_B_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_exp[31] = B_expected_prev[31];
	end
	if (
		( EscreveMem_expected_prev !== 1'bx ) && ( EscreveMem_prev !== EscreveMem_expected_prev )
		&& ((EscreveMem_expected_prev !== last_EscreveMem_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveMem_expected_prev);
		$display ("     Real value = %b", EscreveMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EscreveMem_exp = EscreveMem_expected_prev;
	end
	if (
		( EscreveReg_expected_prev !== 1'bx ) && ( EscreveReg_prev !== EscreveReg_expected_prev )
		&& ((EscreveReg_expected_prev !== last_EscreveReg_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveReg_expected_prev);
		$display ("     Real value = %b", EscreveReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EscreveReg_exp = EscreveReg_expected_prev;
	end
	if (
		( High_expected_prev[0] !== 1'bx ) && ( High_prev[0] !== High_expected_prev[0] )
		&& ((High_expected_prev[0] !== last_High_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[0] = High_expected_prev[0];
	end
	if (
		( High_expected_prev[1] !== 1'bx ) && ( High_prev[1] !== High_expected_prev[1] )
		&& ((High_expected_prev[1] !== last_High_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[1] = High_expected_prev[1];
	end
	if (
		( High_expected_prev[2] !== 1'bx ) && ( High_prev[2] !== High_expected_prev[2] )
		&& ((High_expected_prev[2] !== last_High_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[2] = High_expected_prev[2];
	end
	if (
		( High_expected_prev[3] !== 1'bx ) && ( High_prev[3] !== High_expected_prev[3] )
		&& ((High_expected_prev[3] !== last_High_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[3] = High_expected_prev[3];
	end
	if (
		( High_expected_prev[4] !== 1'bx ) && ( High_prev[4] !== High_expected_prev[4] )
		&& ((High_expected_prev[4] !== last_High_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[4] = High_expected_prev[4];
	end
	if (
		( High_expected_prev[5] !== 1'bx ) && ( High_prev[5] !== High_expected_prev[5] )
		&& ((High_expected_prev[5] !== last_High_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[5] = High_expected_prev[5];
	end
	if (
		( High_expected_prev[6] !== 1'bx ) && ( High_prev[6] !== High_expected_prev[6] )
		&& ((High_expected_prev[6] !== last_High_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[6] = High_expected_prev[6];
	end
	if (
		( High_expected_prev[7] !== 1'bx ) && ( High_prev[7] !== High_expected_prev[7] )
		&& ((High_expected_prev[7] !== last_High_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[7] = High_expected_prev[7];
	end
	if (
		( High_expected_prev[8] !== 1'bx ) && ( High_prev[8] !== High_expected_prev[8] )
		&& ((High_expected_prev[8] !== last_High_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[8] = High_expected_prev[8];
	end
	if (
		( High_expected_prev[9] !== 1'bx ) && ( High_prev[9] !== High_expected_prev[9] )
		&& ((High_expected_prev[9] !== last_High_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[9] = High_expected_prev[9];
	end
	if (
		( High_expected_prev[10] !== 1'bx ) && ( High_prev[10] !== High_expected_prev[10] )
		&& ((High_expected_prev[10] !== last_High_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[10] = High_expected_prev[10];
	end
	if (
		( High_expected_prev[11] !== 1'bx ) && ( High_prev[11] !== High_expected_prev[11] )
		&& ((High_expected_prev[11] !== last_High_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[11] = High_expected_prev[11];
	end
	if (
		( High_expected_prev[12] !== 1'bx ) && ( High_prev[12] !== High_expected_prev[12] )
		&& ((High_expected_prev[12] !== last_High_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[12] = High_expected_prev[12];
	end
	if (
		( High_expected_prev[13] !== 1'bx ) && ( High_prev[13] !== High_expected_prev[13] )
		&& ((High_expected_prev[13] !== last_High_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[13] = High_expected_prev[13];
	end
	if (
		( High_expected_prev[14] !== 1'bx ) && ( High_prev[14] !== High_expected_prev[14] )
		&& ((High_expected_prev[14] !== last_High_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[14] = High_expected_prev[14];
	end
	if (
		( High_expected_prev[15] !== 1'bx ) && ( High_prev[15] !== High_expected_prev[15] )
		&& ((High_expected_prev[15] !== last_High_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[15] = High_expected_prev[15];
	end
	if (
		( High_expected_prev[16] !== 1'bx ) && ( High_prev[16] !== High_expected_prev[16] )
		&& ((High_expected_prev[16] !== last_High_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[16] = High_expected_prev[16];
	end
	if (
		( High_expected_prev[17] !== 1'bx ) && ( High_prev[17] !== High_expected_prev[17] )
		&& ((High_expected_prev[17] !== last_High_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[17] = High_expected_prev[17];
	end
	if (
		( High_expected_prev[18] !== 1'bx ) && ( High_prev[18] !== High_expected_prev[18] )
		&& ((High_expected_prev[18] !== last_High_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[18] = High_expected_prev[18];
	end
	if (
		( High_expected_prev[19] !== 1'bx ) && ( High_prev[19] !== High_expected_prev[19] )
		&& ((High_expected_prev[19] !== last_High_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[19] = High_expected_prev[19];
	end
	if (
		( High_expected_prev[20] !== 1'bx ) && ( High_prev[20] !== High_expected_prev[20] )
		&& ((High_expected_prev[20] !== last_High_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[20] = High_expected_prev[20];
	end
	if (
		( High_expected_prev[21] !== 1'bx ) && ( High_prev[21] !== High_expected_prev[21] )
		&& ((High_expected_prev[21] !== last_High_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[21] = High_expected_prev[21];
	end
	if (
		( High_expected_prev[22] !== 1'bx ) && ( High_prev[22] !== High_expected_prev[22] )
		&& ((High_expected_prev[22] !== last_High_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[22] = High_expected_prev[22];
	end
	if (
		( High_expected_prev[23] !== 1'bx ) && ( High_prev[23] !== High_expected_prev[23] )
		&& ((High_expected_prev[23] !== last_High_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[23] = High_expected_prev[23];
	end
	if (
		( High_expected_prev[24] !== 1'bx ) && ( High_prev[24] !== High_expected_prev[24] )
		&& ((High_expected_prev[24] !== last_High_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[24] = High_expected_prev[24];
	end
	if (
		( High_expected_prev[25] !== 1'bx ) && ( High_prev[25] !== High_expected_prev[25] )
		&& ((High_expected_prev[25] !== last_High_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[25] = High_expected_prev[25];
	end
	if (
		( High_expected_prev[26] !== 1'bx ) && ( High_prev[26] !== High_expected_prev[26] )
		&& ((High_expected_prev[26] !== last_High_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[26] = High_expected_prev[26];
	end
	if (
		( High_expected_prev[27] !== 1'bx ) && ( High_prev[27] !== High_expected_prev[27] )
		&& ((High_expected_prev[27] !== last_High_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[27] = High_expected_prev[27];
	end
	if (
		( High_expected_prev[28] !== 1'bx ) && ( High_prev[28] !== High_expected_prev[28] )
		&& ((High_expected_prev[28] !== last_High_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[28] = High_expected_prev[28];
	end
	if (
		( High_expected_prev[29] !== 1'bx ) && ( High_prev[29] !== High_expected_prev[29] )
		&& ((High_expected_prev[29] !== last_High_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[29] = High_expected_prev[29];
	end
	if (
		( High_expected_prev[30] !== 1'bx ) && ( High_prev[30] !== High_expected_prev[30] )
		&& ((High_expected_prev[30] !== last_High_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[30] = High_expected_prev[30];
	end
	if (
		( High_expected_prev[31] !== 1'bx ) && ( High_prev[31] !== High_expected_prev[31] )
		&& ((High_expected_prev[31] !== last_High_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port High[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", High_expected_prev);
		$display ("     Real value = %b", High_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_High_exp[31] = High_expected_prev[31];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( Instruction_expected_prev[16] !== 1'bx ) && ( Instruction_prev[16] !== Instruction_expected_prev[16] )
		&& ((Instruction_expected_prev[16] !== last_Instruction_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[16] = Instruction_expected_prev[16];
	end
	if (
		( Instruction_expected_prev[17] !== 1'bx ) && ( Instruction_prev[17] !== Instruction_expected_prev[17] )
		&& ((Instruction_expected_prev[17] !== last_Instruction_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[17] = Instruction_expected_prev[17];
	end
	if (
		( Instruction_expected_prev[18] !== 1'bx ) && ( Instruction_prev[18] !== Instruction_expected_prev[18] )
		&& ((Instruction_expected_prev[18] !== last_Instruction_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[18] = Instruction_expected_prev[18];
	end
	if (
		( Instruction_expected_prev[19] !== 1'bx ) && ( Instruction_prev[19] !== Instruction_expected_prev[19] )
		&& ((Instruction_expected_prev[19] !== last_Instruction_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[19] = Instruction_expected_prev[19];
	end
	if (
		( Instruction_expected_prev[20] !== 1'bx ) && ( Instruction_prev[20] !== Instruction_expected_prev[20] )
		&& ((Instruction_expected_prev[20] !== last_Instruction_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[20] = Instruction_expected_prev[20];
	end
	if (
		( Instruction_expected_prev[21] !== 1'bx ) && ( Instruction_prev[21] !== Instruction_expected_prev[21] )
		&& ((Instruction_expected_prev[21] !== last_Instruction_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[21] = Instruction_expected_prev[21];
	end
	if (
		( Instruction_expected_prev[22] !== 1'bx ) && ( Instruction_prev[22] !== Instruction_expected_prev[22] )
		&& ((Instruction_expected_prev[22] !== last_Instruction_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[22] = Instruction_expected_prev[22];
	end
	if (
		( Instruction_expected_prev[23] !== 1'bx ) && ( Instruction_prev[23] !== Instruction_expected_prev[23] )
		&& ((Instruction_expected_prev[23] !== last_Instruction_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[23] = Instruction_expected_prev[23];
	end
	if (
		( Instruction_expected_prev[24] !== 1'bx ) && ( Instruction_prev[24] !== Instruction_expected_prev[24] )
		&& ((Instruction_expected_prev[24] !== last_Instruction_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[24] = Instruction_expected_prev[24];
	end
	if (
		( Instruction_expected_prev[25] !== 1'bx ) && ( Instruction_prev[25] !== Instruction_expected_prev[25] )
		&& ((Instruction_expected_prev[25] !== last_Instruction_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[25] = Instruction_expected_prev[25];
	end
	if (
		( Instruction_expected_prev[26] !== 1'bx ) && ( Instruction_prev[26] !== Instruction_expected_prev[26] )
		&& ((Instruction_expected_prev[26] !== last_Instruction_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[26] = Instruction_expected_prev[26];
	end
	if (
		( Instruction_expected_prev[27] !== 1'bx ) && ( Instruction_prev[27] !== Instruction_expected_prev[27] )
		&& ((Instruction_expected_prev[27] !== last_Instruction_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[27] = Instruction_expected_prev[27];
	end
	if (
		( Instruction_expected_prev[28] !== 1'bx ) && ( Instruction_prev[28] !== Instruction_expected_prev[28] )
		&& ((Instruction_expected_prev[28] !== last_Instruction_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[28] = Instruction_expected_prev[28];
	end
	if (
		( Instruction_expected_prev[29] !== 1'bx ) && ( Instruction_prev[29] !== Instruction_expected_prev[29] )
		&& ((Instruction_expected_prev[29] !== last_Instruction_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[29] = Instruction_expected_prev[29];
	end
	if (
		( Instruction_expected_prev[30] !== 1'bx ) && ( Instruction_prev[30] !== Instruction_expected_prev[30] )
		&& ((Instruction_expected_prev[30] !== last_Instruction_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[30] = Instruction_expected_prev[30];
	end
	if (
		( Instruction_expected_prev[31] !== 1'bx ) && ( Instruction_prev[31] !== Instruction_expected_prev[31] )
		&& ((Instruction_expected_prev[31] !== last_Instruction_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_exp[31] = Instruction_expected_prev[31];
	end
	if (
		( Low_expected_prev[0] !== 1'bx ) && ( Low_prev[0] !== Low_expected_prev[0] )
		&& ((Low_expected_prev[0] !== last_Low_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[0] = Low_expected_prev[0];
	end
	if (
		( Low_expected_prev[1] !== 1'bx ) && ( Low_prev[1] !== Low_expected_prev[1] )
		&& ((Low_expected_prev[1] !== last_Low_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[1] = Low_expected_prev[1];
	end
	if (
		( Low_expected_prev[2] !== 1'bx ) && ( Low_prev[2] !== Low_expected_prev[2] )
		&& ((Low_expected_prev[2] !== last_Low_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[2] = Low_expected_prev[2];
	end
	if (
		( Low_expected_prev[3] !== 1'bx ) && ( Low_prev[3] !== Low_expected_prev[3] )
		&& ((Low_expected_prev[3] !== last_Low_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[3] = Low_expected_prev[3];
	end
	if (
		( Low_expected_prev[4] !== 1'bx ) && ( Low_prev[4] !== Low_expected_prev[4] )
		&& ((Low_expected_prev[4] !== last_Low_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[4] = Low_expected_prev[4];
	end
	if (
		( Low_expected_prev[5] !== 1'bx ) && ( Low_prev[5] !== Low_expected_prev[5] )
		&& ((Low_expected_prev[5] !== last_Low_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[5] = Low_expected_prev[5];
	end
	if (
		( Low_expected_prev[6] !== 1'bx ) && ( Low_prev[6] !== Low_expected_prev[6] )
		&& ((Low_expected_prev[6] !== last_Low_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[6] = Low_expected_prev[6];
	end
	if (
		( Low_expected_prev[7] !== 1'bx ) && ( Low_prev[7] !== Low_expected_prev[7] )
		&& ((Low_expected_prev[7] !== last_Low_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[7] = Low_expected_prev[7];
	end
	if (
		( Low_expected_prev[8] !== 1'bx ) && ( Low_prev[8] !== Low_expected_prev[8] )
		&& ((Low_expected_prev[8] !== last_Low_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[8] = Low_expected_prev[8];
	end
	if (
		( Low_expected_prev[9] !== 1'bx ) && ( Low_prev[9] !== Low_expected_prev[9] )
		&& ((Low_expected_prev[9] !== last_Low_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[9] = Low_expected_prev[9];
	end
	if (
		( Low_expected_prev[10] !== 1'bx ) && ( Low_prev[10] !== Low_expected_prev[10] )
		&& ((Low_expected_prev[10] !== last_Low_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[10] = Low_expected_prev[10];
	end
	if (
		( Low_expected_prev[11] !== 1'bx ) && ( Low_prev[11] !== Low_expected_prev[11] )
		&& ((Low_expected_prev[11] !== last_Low_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[11] = Low_expected_prev[11];
	end
	if (
		( Low_expected_prev[12] !== 1'bx ) && ( Low_prev[12] !== Low_expected_prev[12] )
		&& ((Low_expected_prev[12] !== last_Low_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[12] = Low_expected_prev[12];
	end
	if (
		( Low_expected_prev[13] !== 1'bx ) && ( Low_prev[13] !== Low_expected_prev[13] )
		&& ((Low_expected_prev[13] !== last_Low_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[13] = Low_expected_prev[13];
	end
	if (
		( Low_expected_prev[14] !== 1'bx ) && ( Low_prev[14] !== Low_expected_prev[14] )
		&& ((Low_expected_prev[14] !== last_Low_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[14] = Low_expected_prev[14];
	end
	if (
		( Low_expected_prev[15] !== 1'bx ) && ( Low_prev[15] !== Low_expected_prev[15] )
		&& ((Low_expected_prev[15] !== last_Low_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[15] = Low_expected_prev[15];
	end
	if (
		( Low_expected_prev[16] !== 1'bx ) && ( Low_prev[16] !== Low_expected_prev[16] )
		&& ((Low_expected_prev[16] !== last_Low_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[16] = Low_expected_prev[16];
	end
	if (
		( Low_expected_prev[17] !== 1'bx ) && ( Low_prev[17] !== Low_expected_prev[17] )
		&& ((Low_expected_prev[17] !== last_Low_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[17] = Low_expected_prev[17];
	end
	if (
		( Low_expected_prev[18] !== 1'bx ) && ( Low_prev[18] !== Low_expected_prev[18] )
		&& ((Low_expected_prev[18] !== last_Low_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[18] = Low_expected_prev[18];
	end
	if (
		( Low_expected_prev[19] !== 1'bx ) && ( Low_prev[19] !== Low_expected_prev[19] )
		&& ((Low_expected_prev[19] !== last_Low_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[19] = Low_expected_prev[19];
	end
	if (
		( Low_expected_prev[20] !== 1'bx ) && ( Low_prev[20] !== Low_expected_prev[20] )
		&& ((Low_expected_prev[20] !== last_Low_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[20] = Low_expected_prev[20];
	end
	if (
		( Low_expected_prev[21] !== 1'bx ) && ( Low_prev[21] !== Low_expected_prev[21] )
		&& ((Low_expected_prev[21] !== last_Low_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[21] = Low_expected_prev[21];
	end
	if (
		( Low_expected_prev[22] !== 1'bx ) && ( Low_prev[22] !== Low_expected_prev[22] )
		&& ((Low_expected_prev[22] !== last_Low_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[22] = Low_expected_prev[22];
	end
	if (
		( Low_expected_prev[23] !== 1'bx ) && ( Low_prev[23] !== Low_expected_prev[23] )
		&& ((Low_expected_prev[23] !== last_Low_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[23] = Low_expected_prev[23];
	end
	if (
		( Low_expected_prev[24] !== 1'bx ) && ( Low_prev[24] !== Low_expected_prev[24] )
		&& ((Low_expected_prev[24] !== last_Low_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[24] = Low_expected_prev[24];
	end
	if (
		( Low_expected_prev[25] !== 1'bx ) && ( Low_prev[25] !== Low_expected_prev[25] )
		&& ((Low_expected_prev[25] !== last_Low_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[25] = Low_expected_prev[25];
	end
	if (
		( Low_expected_prev[26] !== 1'bx ) && ( Low_prev[26] !== Low_expected_prev[26] )
		&& ((Low_expected_prev[26] !== last_Low_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[26] = Low_expected_prev[26];
	end
	if (
		( Low_expected_prev[27] !== 1'bx ) && ( Low_prev[27] !== Low_expected_prev[27] )
		&& ((Low_expected_prev[27] !== last_Low_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[27] = Low_expected_prev[27];
	end
	if (
		( Low_expected_prev[28] !== 1'bx ) && ( Low_prev[28] !== Low_expected_prev[28] )
		&& ((Low_expected_prev[28] !== last_Low_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[28] = Low_expected_prev[28];
	end
	if (
		( Low_expected_prev[29] !== 1'bx ) && ( Low_prev[29] !== Low_expected_prev[29] )
		&& ((Low_expected_prev[29] !== last_Low_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[29] = Low_expected_prev[29];
	end
	if (
		( Low_expected_prev[30] !== 1'bx ) && ( Low_prev[30] !== Low_expected_prev[30] )
		&& ((Low_expected_prev[30] !== last_Low_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[30] = Low_expected_prev[30];
	end
	if (
		( Low_expected_prev[31] !== 1'bx ) && ( Low_prev[31] !== Low_expected_prev[31] )
		&& ((Low_expected_prev[31] !== last_Low_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Low[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Low_expected_prev);
		$display ("     Real value = %b", Low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Low_exp[31] = Low_expected_prev[31];
	end
	if (
		( MemDataIn_expected_prev[0] !== 1'bx ) && ( MemDataIn_prev[0] !== MemDataIn_expected_prev[0] )
		&& ((MemDataIn_expected_prev[0] !== last_MemDataIn_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[0] = MemDataIn_expected_prev[0];
	end
	if (
		( MemDataIn_expected_prev[1] !== 1'bx ) && ( MemDataIn_prev[1] !== MemDataIn_expected_prev[1] )
		&& ((MemDataIn_expected_prev[1] !== last_MemDataIn_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[1] = MemDataIn_expected_prev[1];
	end
	if (
		( MemDataIn_expected_prev[2] !== 1'bx ) && ( MemDataIn_prev[2] !== MemDataIn_expected_prev[2] )
		&& ((MemDataIn_expected_prev[2] !== last_MemDataIn_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[2] = MemDataIn_expected_prev[2];
	end
	if (
		( MemDataIn_expected_prev[3] !== 1'bx ) && ( MemDataIn_prev[3] !== MemDataIn_expected_prev[3] )
		&& ((MemDataIn_expected_prev[3] !== last_MemDataIn_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[3] = MemDataIn_expected_prev[3];
	end
	if (
		( MemDataIn_expected_prev[4] !== 1'bx ) && ( MemDataIn_prev[4] !== MemDataIn_expected_prev[4] )
		&& ((MemDataIn_expected_prev[4] !== last_MemDataIn_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[4] = MemDataIn_expected_prev[4];
	end
	if (
		( MemDataIn_expected_prev[5] !== 1'bx ) && ( MemDataIn_prev[5] !== MemDataIn_expected_prev[5] )
		&& ((MemDataIn_expected_prev[5] !== last_MemDataIn_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[5] = MemDataIn_expected_prev[5];
	end
	if (
		( MemDataIn_expected_prev[6] !== 1'bx ) && ( MemDataIn_prev[6] !== MemDataIn_expected_prev[6] )
		&& ((MemDataIn_expected_prev[6] !== last_MemDataIn_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[6] = MemDataIn_expected_prev[6];
	end
	if (
		( MemDataIn_expected_prev[7] !== 1'bx ) && ( MemDataIn_prev[7] !== MemDataIn_expected_prev[7] )
		&& ((MemDataIn_expected_prev[7] !== last_MemDataIn_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[7] = MemDataIn_expected_prev[7];
	end
	if (
		( MemDataIn_expected_prev[8] !== 1'bx ) && ( MemDataIn_prev[8] !== MemDataIn_expected_prev[8] )
		&& ((MemDataIn_expected_prev[8] !== last_MemDataIn_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[8] = MemDataIn_expected_prev[8];
	end
	if (
		( MemDataIn_expected_prev[9] !== 1'bx ) && ( MemDataIn_prev[9] !== MemDataIn_expected_prev[9] )
		&& ((MemDataIn_expected_prev[9] !== last_MemDataIn_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[9] = MemDataIn_expected_prev[9];
	end
	if (
		( MemDataIn_expected_prev[10] !== 1'bx ) && ( MemDataIn_prev[10] !== MemDataIn_expected_prev[10] )
		&& ((MemDataIn_expected_prev[10] !== last_MemDataIn_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[10] = MemDataIn_expected_prev[10];
	end
	if (
		( MemDataIn_expected_prev[11] !== 1'bx ) && ( MemDataIn_prev[11] !== MemDataIn_expected_prev[11] )
		&& ((MemDataIn_expected_prev[11] !== last_MemDataIn_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[11] = MemDataIn_expected_prev[11];
	end
	if (
		( MemDataIn_expected_prev[12] !== 1'bx ) && ( MemDataIn_prev[12] !== MemDataIn_expected_prev[12] )
		&& ((MemDataIn_expected_prev[12] !== last_MemDataIn_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[12] = MemDataIn_expected_prev[12];
	end
	if (
		( MemDataIn_expected_prev[13] !== 1'bx ) && ( MemDataIn_prev[13] !== MemDataIn_expected_prev[13] )
		&& ((MemDataIn_expected_prev[13] !== last_MemDataIn_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[13] = MemDataIn_expected_prev[13];
	end
	if (
		( MemDataIn_expected_prev[14] !== 1'bx ) && ( MemDataIn_prev[14] !== MemDataIn_expected_prev[14] )
		&& ((MemDataIn_expected_prev[14] !== last_MemDataIn_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[14] = MemDataIn_expected_prev[14];
	end
	if (
		( MemDataIn_expected_prev[15] !== 1'bx ) && ( MemDataIn_prev[15] !== MemDataIn_expected_prev[15] )
		&& ((MemDataIn_expected_prev[15] !== last_MemDataIn_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[15] = MemDataIn_expected_prev[15];
	end
	if (
		( MemDataIn_expected_prev[16] !== 1'bx ) && ( MemDataIn_prev[16] !== MemDataIn_expected_prev[16] )
		&& ((MemDataIn_expected_prev[16] !== last_MemDataIn_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[16] = MemDataIn_expected_prev[16];
	end
	if (
		( MemDataIn_expected_prev[17] !== 1'bx ) && ( MemDataIn_prev[17] !== MemDataIn_expected_prev[17] )
		&& ((MemDataIn_expected_prev[17] !== last_MemDataIn_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[17] = MemDataIn_expected_prev[17];
	end
	if (
		( MemDataIn_expected_prev[18] !== 1'bx ) && ( MemDataIn_prev[18] !== MemDataIn_expected_prev[18] )
		&& ((MemDataIn_expected_prev[18] !== last_MemDataIn_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[18] = MemDataIn_expected_prev[18];
	end
	if (
		( MemDataIn_expected_prev[19] !== 1'bx ) && ( MemDataIn_prev[19] !== MemDataIn_expected_prev[19] )
		&& ((MemDataIn_expected_prev[19] !== last_MemDataIn_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[19] = MemDataIn_expected_prev[19];
	end
	if (
		( MemDataIn_expected_prev[20] !== 1'bx ) && ( MemDataIn_prev[20] !== MemDataIn_expected_prev[20] )
		&& ((MemDataIn_expected_prev[20] !== last_MemDataIn_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[20] = MemDataIn_expected_prev[20];
	end
	if (
		( MemDataIn_expected_prev[21] !== 1'bx ) && ( MemDataIn_prev[21] !== MemDataIn_expected_prev[21] )
		&& ((MemDataIn_expected_prev[21] !== last_MemDataIn_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[21] = MemDataIn_expected_prev[21];
	end
	if (
		( MemDataIn_expected_prev[22] !== 1'bx ) && ( MemDataIn_prev[22] !== MemDataIn_expected_prev[22] )
		&& ((MemDataIn_expected_prev[22] !== last_MemDataIn_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[22] = MemDataIn_expected_prev[22];
	end
	if (
		( MemDataIn_expected_prev[23] !== 1'bx ) && ( MemDataIn_prev[23] !== MemDataIn_expected_prev[23] )
		&& ((MemDataIn_expected_prev[23] !== last_MemDataIn_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[23] = MemDataIn_expected_prev[23];
	end
	if (
		( MemDataIn_expected_prev[24] !== 1'bx ) && ( MemDataIn_prev[24] !== MemDataIn_expected_prev[24] )
		&& ((MemDataIn_expected_prev[24] !== last_MemDataIn_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[24] = MemDataIn_expected_prev[24];
	end
	if (
		( MemDataIn_expected_prev[25] !== 1'bx ) && ( MemDataIn_prev[25] !== MemDataIn_expected_prev[25] )
		&& ((MemDataIn_expected_prev[25] !== last_MemDataIn_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[25] = MemDataIn_expected_prev[25];
	end
	if (
		( MemDataIn_expected_prev[26] !== 1'bx ) && ( MemDataIn_prev[26] !== MemDataIn_expected_prev[26] )
		&& ((MemDataIn_expected_prev[26] !== last_MemDataIn_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[26] = MemDataIn_expected_prev[26];
	end
	if (
		( MemDataIn_expected_prev[27] !== 1'bx ) && ( MemDataIn_prev[27] !== MemDataIn_expected_prev[27] )
		&& ((MemDataIn_expected_prev[27] !== last_MemDataIn_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[27] = MemDataIn_expected_prev[27];
	end
	if (
		( MemDataIn_expected_prev[28] !== 1'bx ) && ( MemDataIn_prev[28] !== MemDataIn_expected_prev[28] )
		&& ((MemDataIn_expected_prev[28] !== last_MemDataIn_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[28] = MemDataIn_expected_prev[28];
	end
	if (
		( MemDataIn_expected_prev[29] !== 1'bx ) && ( MemDataIn_prev[29] !== MemDataIn_expected_prev[29] )
		&& ((MemDataIn_expected_prev[29] !== last_MemDataIn_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[29] = MemDataIn_expected_prev[29];
	end
	if (
		( MemDataIn_expected_prev[30] !== 1'bx ) && ( MemDataIn_prev[30] !== MemDataIn_expected_prev[30] )
		&& ((MemDataIn_expected_prev[30] !== last_MemDataIn_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[30] = MemDataIn_expected_prev[30];
	end
	if (
		( MemDataIn_expected_prev[31] !== 1'bx ) && ( MemDataIn_prev[31] !== MemDataIn_expected_prev[31] )
		&& ((MemDataIn_expected_prev[31] !== last_MemDataIn_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemDataIn[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemDataIn_expected_prev);
		$display ("     Real value = %b", MemDataIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MemDataIn_exp[31] = MemDataIn_expected_prev[31];
	end
	if (
		( MemParaReg_expected_prev !== 1'bx ) && ( MemParaReg_prev !== MemParaReg_expected_prev )
		&& ((MemParaReg_expected_prev !== last_MemParaReg_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemParaReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemParaReg_expected_prev);
		$display ("     Real value = %b", MemParaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MemParaReg_exp = MemParaReg_expected_prev;
	end
	if (
		( MemReadValue_expected_prev[0] !== 1'bx ) && ( MemReadValue_prev[0] !== MemReadValue_expected_prev[0] )
		&& ((MemReadValue_expected_prev[0] !== last_MemReadValue_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[0] = MemReadValue_expected_prev[0];
	end
	if (
		( MemReadValue_expected_prev[1] !== 1'bx ) && ( MemReadValue_prev[1] !== MemReadValue_expected_prev[1] )
		&& ((MemReadValue_expected_prev[1] !== last_MemReadValue_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[1] = MemReadValue_expected_prev[1];
	end
	if (
		( MemReadValue_expected_prev[2] !== 1'bx ) && ( MemReadValue_prev[2] !== MemReadValue_expected_prev[2] )
		&& ((MemReadValue_expected_prev[2] !== last_MemReadValue_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[2] = MemReadValue_expected_prev[2];
	end
	if (
		( MemReadValue_expected_prev[3] !== 1'bx ) && ( MemReadValue_prev[3] !== MemReadValue_expected_prev[3] )
		&& ((MemReadValue_expected_prev[3] !== last_MemReadValue_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[3] = MemReadValue_expected_prev[3];
	end
	if (
		( MemReadValue_expected_prev[4] !== 1'bx ) && ( MemReadValue_prev[4] !== MemReadValue_expected_prev[4] )
		&& ((MemReadValue_expected_prev[4] !== last_MemReadValue_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[4] = MemReadValue_expected_prev[4];
	end
	if (
		( MemReadValue_expected_prev[5] !== 1'bx ) && ( MemReadValue_prev[5] !== MemReadValue_expected_prev[5] )
		&& ((MemReadValue_expected_prev[5] !== last_MemReadValue_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[5] = MemReadValue_expected_prev[5];
	end
	if (
		( MemReadValue_expected_prev[6] !== 1'bx ) && ( MemReadValue_prev[6] !== MemReadValue_expected_prev[6] )
		&& ((MemReadValue_expected_prev[6] !== last_MemReadValue_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[6] = MemReadValue_expected_prev[6];
	end
	if (
		( MemReadValue_expected_prev[7] !== 1'bx ) && ( MemReadValue_prev[7] !== MemReadValue_expected_prev[7] )
		&& ((MemReadValue_expected_prev[7] !== last_MemReadValue_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[7] = MemReadValue_expected_prev[7];
	end
	if (
		( MemReadValue_expected_prev[8] !== 1'bx ) && ( MemReadValue_prev[8] !== MemReadValue_expected_prev[8] )
		&& ((MemReadValue_expected_prev[8] !== last_MemReadValue_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[8] = MemReadValue_expected_prev[8];
	end
	if (
		( MemReadValue_expected_prev[9] !== 1'bx ) && ( MemReadValue_prev[9] !== MemReadValue_expected_prev[9] )
		&& ((MemReadValue_expected_prev[9] !== last_MemReadValue_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[9] = MemReadValue_expected_prev[9];
	end
	if (
		( MemReadValue_expected_prev[10] !== 1'bx ) && ( MemReadValue_prev[10] !== MemReadValue_expected_prev[10] )
		&& ((MemReadValue_expected_prev[10] !== last_MemReadValue_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[10] = MemReadValue_expected_prev[10];
	end
	if (
		( MemReadValue_expected_prev[11] !== 1'bx ) && ( MemReadValue_prev[11] !== MemReadValue_expected_prev[11] )
		&& ((MemReadValue_expected_prev[11] !== last_MemReadValue_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[11] = MemReadValue_expected_prev[11];
	end
	if (
		( MemReadValue_expected_prev[12] !== 1'bx ) && ( MemReadValue_prev[12] !== MemReadValue_expected_prev[12] )
		&& ((MemReadValue_expected_prev[12] !== last_MemReadValue_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[12] = MemReadValue_expected_prev[12];
	end
	if (
		( MemReadValue_expected_prev[13] !== 1'bx ) && ( MemReadValue_prev[13] !== MemReadValue_expected_prev[13] )
		&& ((MemReadValue_expected_prev[13] !== last_MemReadValue_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[13] = MemReadValue_expected_prev[13];
	end
	if (
		( MemReadValue_expected_prev[14] !== 1'bx ) && ( MemReadValue_prev[14] !== MemReadValue_expected_prev[14] )
		&& ((MemReadValue_expected_prev[14] !== last_MemReadValue_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[14] = MemReadValue_expected_prev[14];
	end
	if (
		( MemReadValue_expected_prev[15] !== 1'bx ) && ( MemReadValue_prev[15] !== MemReadValue_expected_prev[15] )
		&& ((MemReadValue_expected_prev[15] !== last_MemReadValue_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[15] = MemReadValue_expected_prev[15];
	end
	if (
		( MemReadValue_expected_prev[16] !== 1'bx ) && ( MemReadValue_prev[16] !== MemReadValue_expected_prev[16] )
		&& ((MemReadValue_expected_prev[16] !== last_MemReadValue_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[16] = MemReadValue_expected_prev[16];
	end
	if (
		( MemReadValue_expected_prev[17] !== 1'bx ) && ( MemReadValue_prev[17] !== MemReadValue_expected_prev[17] )
		&& ((MemReadValue_expected_prev[17] !== last_MemReadValue_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[17] = MemReadValue_expected_prev[17];
	end
	if (
		( MemReadValue_expected_prev[18] !== 1'bx ) && ( MemReadValue_prev[18] !== MemReadValue_expected_prev[18] )
		&& ((MemReadValue_expected_prev[18] !== last_MemReadValue_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[18] = MemReadValue_expected_prev[18];
	end
	if (
		( MemReadValue_expected_prev[19] !== 1'bx ) && ( MemReadValue_prev[19] !== MemReadValue_expected_prev[19] )
		&& ((MemReadValue_expected_prev[19] !== last_MemReadValue_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[19] = MemReadValue_expected_prev[19];
	end
	if (
		( MemReadValue_expected_prev[20] !== 1'bx ) && ( MemReadValue_prev[20] !== MemReadValue_expected_prev[20] )
		&& ((MemReadValue_expected_prev[20] !== last_MemReadValue_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[20] = MemReadValue_expected_prev[20];
	end
	if (
		( MemReadValue_expected_prev[21] !== 1'bx ) && ( MemReadValue_prev[21] !== MemReadValue_expected_prev[21] )
		&& ((MemReadValue_expected_prev[21] !== last_MemReadValue_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[21] = MemReadValue_expected_prev[21];
	end
	if (
		( MemReadValue_expected_prev[22] !== 1'bx ) && ( MemReadValue_prev[22] !== MemReadValue_expected_prev[22] )
		&& ((MemReadValue_expected_prev[22] !== last_MemReadValue_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[22] = MemReadValue_expected_prev[22];
	end
	if (
		( MemReadValue_expected_prev[23] !== 1'bx ) && ( MemReadValue_prev[23] !== MemReadValue_expected_prev[23] )
		&& ((MemReadValue_expected_prev[23] !== last_MemReadValue_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[23] = MemReadValue_expected_prev[23];
	end
	if (
		( MemReadValue_expected_prev[24] !== 1'bx ) && ( MemReadValue_prev[24] !== MemReadValue_expected_prev[24] )
		&& ((MemReadValue_expected_prev[24] !== last_MemReadValue_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[24] = MemReadValue_expected_prev[24];
	end
	if (
		( MemReadValue_expected_prev[25] !== 1'bx ) && ( MemReadValue_prev[25] !== MemReadValue_expected_prev[25] )
		&& ((MemReadValue_expected_prev[25] !== last_MemReadValue_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[25] = MemReadValue_expected_prev[25];
	end
	if (
		( MemReadValue_expected_prev[26] !== 1'bx ) && ( MemReadValue_prev[26] !== MemReadValue_expected_prev[26] )
		&& ((MemReadValue_expected_prev[26] !== last_MemReadValue_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[26] = MemReadValue_expected_prev[26];
	end
	if (
		( MemReadValue_expected_prev[27] !== 1'bx ) && ( MemReadValue_prev[27] !== MemReadValue_expected_prev[27] )
		&& ((MemReadValue_expected_prev[27] !== last_MemReadValue_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[27] = MemReadValue_expected_prev[27];
	end
	if (
		( MemReadValue_expected_prev[28] !== 1'bx ) && ( MemReadValue_prev[28] !== MemReadValue_expected_prev[28] )
		&& ((MemReadValue_expected_prev[28] !== last_MemReadValue_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[28] = MemReadValue_expected_prev[28];
	end
	if (
		( MemReadValue_expected_prev[29] !== 1'bx ) && ( MemReadValue_prev[29] !== MemReadValue_expected_prev[29] )
		&& ((MemReadValue_expected_prev[29] !== last_MemReadValue_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[29] = MemReadValue_expected_prev[29];
	end
	if (
		( MemReadValue_expected_prev[30] !== 1'bx ) && ( MemReadValue_prev[30] !== MemReadValue_expected_prev[30] )
		&& ((MemReadValue_expected_prev[30] !== last_MemReadValue_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[30] = MemReadValue_expected_prev[30];
	end
	if (
		( MemReadValue_expected_prev[31] !== 1'bx ) && ( MemReadValue_prev[31] !== MemReadValue_expected_prev[31] )
		&& ((MemReadValue_expected_prev[31] !== last_MemReadValue_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemReadValue_exp[31] = MemReadValue_expected_prev[31];
	end
	if (
		( outALU_expected_prev[0] !== 1'bx ) && ( outALU_prev[0] !== outALU_expected_prev[0] )
		&& ((outALU_expected_prev[0] !== last_outALU_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[0] = outALU_expected_prev[0];
	end
	if (
		( outALU_expected_prev[1] !== 1'bx ) && ( outALU_prev[1] !== outALU_expected_prev[1] )
		&& ((outALU_expected_prev[1] !== last_outALU_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[1] = outALU_expected_prev[1];
	end
	if (
		( outALU_expected_prev[2] !== 1'bx ) && ( outALU_prev[2] !== outALU_expected_prev[2] )
		&& ((outALU_expected_prev[2] !== last_outALU_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[2] = outALU_expected_prev[2];
	end
	if (
		( outALU_expected_prev[3] !== 1'bx ) && ( outALU_prev[3] !== outALU_expected_prev[3] )
		&& ((outALU_expected_prev[3] !== last_outALU_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[3] = outALU_expected_prev[3];
	end
	if (
		( outALU_expected_prev[4] !== 1'bx ) && ( outALU_prev[4] !== outALU_expected_prev[4] )
		&& ((outALU_expected_prev[4] !== last_outALU_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[4] = outALU_expected_prev[4];
	end
	if (
		( outALU_expected_prev[5] !== 1'bx ) && ( outALU_prev[5] !== outALU_expected_prev[5] )
		&& ((outALU_expected_prev[5] !== last_outALU_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[5] = outALU_expected_prev[5];
	end
	if (
		( outALU_expected_prev[6] !== 1'bx ) && ( outALU_prev[6] !== outALU_expected_prev[6] )
		&& ((outALU_expected_prev[6] !== last_outALU_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[6] = outALU_expected_prev[6];
	end
	if (
		( outALU_expected_prev[7] !== 1'bx ) && ( outALU_prev[7] !== outALU_expected_prev[7] )
		&& ((outALU_expected_prev[7] !== last_outALU_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[7] = outALU_expected_prev[7];
	end
	if (
		( outALU_expected_prev[8] !== 1'bx ) && ( outALU_prev[8] !== outALU_expected_prev[8] )
		&& ((outALU_expected_prev[8] !== last_outALU_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[8] = outALU_expected_prev[8];
	end
	if (
		( outALU_expected_prev[9] !== 1'bx ) && ( outALU_prev[9] !== outALU_expected_prev[9] )
		&& ((outALU_expected_prev[9] !== last_outALU_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[9] = outALU_expected_prev[9];
	end
	if (
		( outALU_expected_prev[10] !== 1'bx ) && ( outALU_prev[10] !== outALU_expected_prev[10] )
		&& ((outALU_expected_prev[10] !== last_outALU_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[10] = outALU_expected_prev[10];
	end
	if (
		( outALU_expected_prev[11] !== 1'bx ) && ( outALU_prev[11] !== outALU_expected_prev[11] )
		&& ((outALU_expected_prev[11] !== last_outALU_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[11] = outALU_expected_prev[11];
	end
	if (
		( outALU_expected_prev[12] !== 1'bx ) && ( outALU_prev[12] !== outALU_expected_prev[12] )
		&& ((outALU_expected_prev[12] !== last_outALU_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[12] = outALU_expected_prev[12];
	end
	if (
		( outALU_expected_prev[13] !== 1'bx ) && ( outALU_prev[13] !== outALU_expected_prev[13] )
		&& ((outALU_expected_prev[13] !== last_outALU_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[13] = outALU_expected_prev[13];
	end
	if (
		( outALU_expected_prev[14] !== 1'bx ) && ( outALU_prev[14] !== outALU_expected_prev[14] )
		&& ((outALU_expected_prev[14] !== last_outALU_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[14] = outALU_expected_prev[14];
	end
	if (
		( outALU_expected_prev[15] !== 1'bx ) && ( outALU_prev[15] !== outALU_expected_prev[15] )
		&& ((outALU_expected_prev[15] !== last_outALU_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[15] = outALU_expected_prev[15];
	end
	if (
		( outALU_expected_prev[16] !== 1'bx ) && ( outALU_prev[16] !== outALU_expected_prev[16] )
		&& ((outALU_expected_prev[16] !== last_outALU_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[16] = outALU_expected_prev[16];
	end
	if (
		( outALU_expected_prev[17] !== 1'bx ) && ( outALU_prev[17] !== outALU_expected_prev[17] )
		&& ((outALU_expected_prev[17] !== last_outALU_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[17] = outALU_expected_prev[17];
	end
	if (
		( outALU_expected_prev[18] !== 1'bx ) && ( outALU_prev[18] !== outALU_expected_prev[18] )
		&& ((outALU_expected_prev[18] !== last_outALU_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[18] = outALU_expected_prev[18];
	end
	if (
		( outALU_expected_prev[19] !== 1'bx ) && ( outALU_prev[19] !== outALU_expected_prev[19] )
		&& ((outALU_expected_prev[19] !== last_outALU_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[19] = outALU_expected_prev[19];
	end
	if (
		( outALU_expected_prev[20] !== 1'bx ) && ( outALU_prev[20] !== outALU_expected_prev[20] )
		&& ((outALU_expected_prev[20] !== last_outALU_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[20] = outALU_expected_prev[20];
	end
	if (
		( outALU_expected_prev[21] !== 1'bx ) && ( outALU_prev[21] !== outALU_expected_prev[21] )
		&& ((outALU_expected_prev[21] !== last_outALU_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[21] = outALU_expected_prev[21];
	end
	if (
		( outALU_expected_prev[22] !== 1'bx ) && ( outALU_prev[22] !== outALU_expected_prev[22] )
		&& ((outALU_expected_prev[22] !== last_outALU_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[22] = outALU_expected_prev[22];
	end
	if (
		( outALU_expected_prev[23] !== 1'bx ) && ( outALU_prev[23] !== outALU_expected_prev[23] )
		&& ((outALU_expected_prev[23] !== last_outALU_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[23] = outALU_expected_prev[23];
	end
	if (
		( outALU_expected_prev[24] !== 1'bx ) && ( outALU_prev[24] !== outALU_expected_prev[24] )
		&& ((outALU_expected_prev[24] !== last_outALU_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[24] = outALU_expected_prev[24];
	end
	if (
		( outALU_expected_prev[25] !== 1'bx ) && ( outALU_prev[25] !== outALU_expected_prev[25] )
		&& ((outALU_expected_prev[25] !== last_outALU_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[25] = outALU_expected_prev[25];
	end
	if (
		( outALU_expected_prev[26] !== 1'bx ) && ( outALU_prev[26] !== outALU_expected_prev[26] )
		&& ((outALU_expected_prev[26] !== last_outALU_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[26] = outALU_expected_prev[26];
	end
	if (
		( outALU_expected_prev[27] !== 1'bx ) && ( outALU_prev[27] !== outALU_expected_prev[27] )
		&& ((outALU_expected_prev[27] !== last_outALU_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[27] = outALU_expected_prev[27];
	end
	if (
		( outALU_expected_prev[28] !== 1'bx ) && ( outALU_prev[28] !== outALU_expected_prev[28] )
		&& ((outALU_expected_prev[28] !== last_outALU_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[28] = outALU_expected_prev[28];
	end
	if (
		( outALU_expected_prev[29] !== 1'bx ) && ( outALU_prev[29] !== outALU_expected_prev[29] )
		&& ((outALU_expected_prev[29] !== last_outALU_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[29] = outALU_expected_prev[29];
	end
	if (
		( outALU_expected_prev[30] !== 1'bx ) && ( outALU_prev[30] !== outALU_expected_prev[30] )
		&& ((outALU_expected_prev[30] !== last_outALU_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[30] = outALU_expected_prev[30];
	end
	if (
		( outALU_expected_prev[31] !== 1'bx ) && ( outALU_prev[31] !== outALU_expected_prev[31] )
		&& ((outALU_expected_prev[31] !== last_outALU_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outALU_exp[31] = outALU_expected_prev[31];
	end
	if (
		( proxPC_expected_prev[0] !== 1'bx ) && ( proxPC_prev[0] !== proxPC_expected_prev[0] )
		&& ((proxPC_expected_prev[0] !== last_proxPC_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[0] = proxPC_expected_prev[0];
	end
	if (
		( proxPC_expected_prev[1] !== 1'bx ) && ( proxPC_prev[1] !== proxPC_expected_prev[1] )
		&& ((proxPC_expected_prev[1] !== last_proxPC_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[1] = proxPC_expected_prev[1];
	end
	if (
		( proxPC_expected_prev[2] !== 1'bx ) && ( proxPC_prev[2] !== proxPC_expected_prev[2] )
		&& ((proxPC_expected_prev[2] !== last_proxPC_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[2] = proxPC_expected_prev[2];
	end
	if (
		( proxPC_expected_prev[3] !== 1'bx ) && ( proxPC_prev[3] !== proxPC_expected_prev[3] )
		&& ((proxPC_expected_prev[3] !== last_proxPC_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[3] = proxPC_expected_prev[3];
	end
	if (
		( proxPC_expected_prev[4] !== 1'bx ) && ( proxPC_prev[4] !== proxPC_expected_prev[4] )
		&& ((proxPC_expected_prev[4] !== last_proxPC_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[4] = proxPC_expected_prev[4];
	end
	if (
		( proxPC_expected_prev[5] !== 1'bx ) && ( proxPC_prev[5] !== proxPC_expected_prev[5] )
		&& ((proxPC_expected_prev[5] !== last_proxPC_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[5] = proxPC_expected_prev[5];
	end
	if (
		( proxPC_expected_prev[6] !== 1'bx ) && ( proxPC_prev[6] !== proxPC_expected_prev[6] )
		&& ((proxPC_expected_prev[6] !== last_proxPC_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[6] = proxPC_expected_prev[6];
	end
	if (
		( proxPC_expected_prev[7] !== 1'bx ) && ( proxPC_prev[7] !== proxPC_expected_prev[7] )
		&& ((proxPC_expected_prev[7] !== last_proxPC_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[7] = proxPC_expected_prev[7];
	end
	if (
		( proxPC_expected_prev[8] !== 1'bx ) && ( proxPC_prev[8] !== proxPC_expected_prev[8] )
		&& ((proxPC_expected_prev[8] !== last_proxPC_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[8] = proxPC_expected_prev[8];
	end
	if (
		( proxPC_expected_prev[9] !== 1'bx ) && ( proxPC_prev[9] !== proxPC_expected_prev[9] )
		&& ((proxPC_expected_prev[9] !== last_proxPC_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[9] = proxPC_expected_prev[9];
	end
	if (
		( proxPC_expected_prev[10] !== 1'bx ) && ( proxPC_prev[10] !== proxPC_expected_prev[10] )
		&& ((proxPC_expected_prev[10] !== last_proxPC_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[10] = proxPC_expected_prev[10];
	end
	if (
		( proxPC_expected_prev[11] !== 1'bx ) && ( proxPC_prev[11] !== proxPC_expected_prev[11] )
		&& ((proxPC_expected_prev[11] !== last_proxPC_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[11] = proxPC_expected_prev[11];
	end
	if (
		( proxPC_expected_prev[12] !== 1'bx ) && ( proxPC_prev[12] !== proxPC_expected_prev[12] )
		&& ((proxPC_expected_prev[12] !== last_proxPC_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[12] = proxPC_expected_prev[12];
	end
	if (
		( proxPC_expected_prev[13] !== 1'bx ) && ( proxPC_prev[13] !== proxPC_expected_prev[13] )
		&& ((proxPC_expected_prev[13] !== last_proxPC_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[13] = proxPC_expected_prev[13];
	end
	if (
		( proxPC_expected_prev[14] !== 1'bx ) && ( proxPC_prev[14] !== proxPC_expected_prev[14] )
		&& ((proxPC_expected_prev[14] !== last_proxPC_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[14] = proxPC_expected_prev[14];
	end
	if (
		( proxPC_expected_prev[15] !== 1'bx ) && ( proxPC_prev[15] !== proxPC_expected_prev[15] )
		&& ((proxPC_expected_prev[15] !== last_proxPC_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[15] = proxPC_expected_prev[15];
	end
	if (
		( proxPC_expected_prev[16] !== 1'bx ) && ( proxPC_prev[16] !== proxPC_expected_prev[16] )
		&& ((proxPC_expected_prev[16] !== last_proxPC_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[16] = proxPC_expected_prev[16];
	end
	if (
		( proxPC_expected_prev[17] !== 1'bx ) && ( proxPC_prev[17] !== proxPC_expected_prev[17] )
		&& ((proxPC_expected_prev[17] !== last_proxPC_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[17] = proxPC_expected_prev[17];
	end
	if (
		( proxPC_expected_prev[18] !== 1'bx ) && ( proxPC_prev[18] !== proxPC_expected_prev[18] )
		&& ((proxPC_expected_prev[18] !== last_proxPC_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[18] = proxPC_expected_prev[18];
	end
	if (
		( proxPC_expected_prev[19] !== 1'bx ) && ( proxPC_prev[19] !== proxPC_expected_prev[19] )
		&& ((proxPC_expected_prev[19] !== last_proxPC_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[19] = proxPC_expected_prev[19];
	end
	if (
		( proxPC_expected_prev[20] !== 1'bx ) && ( proxPC_prev[20] !== proxPC_expected_prev[20] )
		&& ((proxPC_expected_prev[20] !== last_proxPC_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[20] = proxPC_expected_prev[20];
	end
	if (
		( proxPC_expected_prev[21] !== 1'bx ) && ( proxPC_prev[21] !== proxPC_expected_prev[21] )
		&& ((proxPC_expected_prev[21] !== last_proxPC_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[21] = proxPC_expected_prev[21];
	end
	if (
		( proxPC_expected_prev[22] !== 1'bx ) && ( proxPC_prev[22] !== proxPC_expected_prev[22] )
		&& ((proxPC_expected_prev[22] !== last_proxPC_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[22] = proxPC_expected_prev[22];
	end
	if (
		( proxPC_expected_prev[23] !== 1'bx ) && ( proxPC_prev[23] !== proxPC_expected_prev[23] )
		&& ((proxPC_expected_prev[23] !== last_proxPC_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[23] = proxPC_expected_prev[23];
	end
	if (
		( proxPC_expected_prev[24] !== 1'bx ) && ( proxPC_prev[24] !== proxPC_expected_prev[24] )
		&& ((proxPC_expected_prev[24] !== last_proxPC_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[24] = proxPC_expected_prev[24];
	end
	if (
		( proxPC_expected_prev[25] !== 1'bx ) && ( proxPC_prev[25] !== proxPC_expected_prev[25] )
		&& ((proxPC_expected_prev[25] !== last_proxPC_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[25] = proxPC_expected_prev[25];
	end
	if (
		( proxPC_expected_prev[26] !== 1'bx ) && ( proxPC_prev[26] !== proxPC_expected_prev[26] )
		&& ((proxPC_expected_prev[26] !== last_proxPC_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[26] = proxPC_expected_prev[26];
	end
	if (
		( proxPC_expected_prev[27] !== 1'bx ) && ( proxPC_prev[27] !== proxPC_expected_prev[27] )
		&& ((proxPC_expected_prev[27] !== last_proxPC_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[27] = proxPC_expected_prev[27];
	end
	if (
		( proxPC_expected_prev[28] !== 1'bx ) && ( proxPC_prev[28] !== proxPC_expected_prev[28] )
		&& ((proxPC_expected_prev[28] !== last_proxPC_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[28] = proxPC_expected_prev[28];
	end
	if (
		( proxPC_expected_prev[29] !== 1'bx ) && ( proxPC_prev[29] !== proxPC_expected_prev[29] )
		&& ((proxPC_expected_prev[29] !== last_proxPC_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[29] = proxPC_expected_prev[29];
	end
	if (
		( proxPC_expected_prev[30] !== 1'bx ) && ( proxPC_prev[30] !== proxPC_expected_prev[30] )
		&& ((proxPC_expected_prev[30] !== last_proxPC_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[30] = proxPC_expected_prev[30];
	end
	if (
		( proxPC_expected_prev[31] !== 1'bx ) && ( proxPC_prev[31] !== proxPC_expected_prev[31] )
		&& ((proxPC_expected_prev[31] !== last_proxPC_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port proxPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", proxPC_expected_prev);
		$display ("     Real value = %b", proxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_proxPC_exp[31] = proxPC_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PipelineInit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock2;
// wires                                               
wire [31:0] A;
wire [9:0] adressMem;
wire [31:0] atualPC;
wire [31:0] B;
wire EscreveMem;
wire EscreveReg;
wire [31:0] High;
wire [31:0] Instruction;
wire [31:0] Low;
wire [31:0] MemDataIn;
wire MemParaReg;
wire [31:0] MemReadValue;
wire [31:0] outALU;
wire [31:0] proxPC;
wire [31:0] WBwriteData;
wire [4:0] WBwriteRegister;

wire sampler;                             

// assign statements (if any)                          
PipelineInit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.adressMem(adressMem),
	.atualPC(atualPC),
	.B(B),
	.clock(clock),
	.clock2(clock2),
	.EscreveMem(EscreveMem),
	.EscreveReg(EscreveReg),
	.High(High),
	.Instruction(Instruction),
	.Low(Low),
	.MemDataIn(MemDataIn),
	.MemParaReg(MemParaReg),
	.MemReadValue(MemReadValue),
	.outALU(outALU),
	.proxPC(proxPC),
	.WBwriteData(WBwriteData),
	.WBwriteRegister(WBwriteRegister)
);

// clock
initial
begin
	clock = 1'b1;
	# 250000;
	repeat(99)
	begin
		clock = 1'b0;
		clock = #500000 1'b1;
		# 500000;
	end
	clock = 1'b0;
	clock = #500000 1'b1;
end 

// clock2
always
begin
	clock2 = 1'b0;
	clock2 = #500000 1'b1;
	#500000;
end 

PipelineInit_vlg_sample_tst tb_sample (
	.clock(clock),
	.clock2(clock2),
	.sampler_tx(sampler)
);

PipelineInit_vlg_check_tst tb_out(
	.A(A),
	.adressMem(adressMem),
	.atualPC(atualPC),
	.B(B),
	.EscreveMem(EscreveMem),
	.EscreveReg(EscreveReg),
	.High(High),
	.Instruction(Instruction),
	.Low(Low),
	.MemDataIn(MemDataIn),
	.MemParaReg(MemParaReg),
	.MemReadValue(MemReadValue),
	.outALU(outALU),
	.proxPC(proxPC),
	.WBwriteData(WBwriteData),
	.WBwriteRegister(WBwriteRegister),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2018 21:05:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    registerBank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registerBank_vlg_sample_tst(
	clock,
	ReadRegister0,
	ReadRegister1,
	writeData,
	writeEnable,
	writeRegister,
	sampler_tx
);
input  clock;
input [4:0] ReadRegister0;
input [4:0] ReadRegister1;
input [31:0] writeData;
input  writeEnable;
input [4:0] writeRegister;
output sampler_tx;

reg sample;
time current_time;
always @(clock or ReadRegister0 or ReadRegister1 or writeData or writeEnable or writeRegister)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module registerBank_vlg_check_tst (
	ReadData0,
	ReadData1,
	sampler_rx
);
input [31:0] ReadData0;
input [31:0] ReadData1;
input sampler_rx;

reg [31:0] ReadData0_expected;
reg [31:0] ReadData1_expected;

reg [31:0] ReadData0_prev;
reg [31:0] ReadData1_prev;

reg [31:0] ReadData0_expected_prev;
reg [31:0] ReadData1_expected_prev;

reg [31:0] last_ReadData0_exp;
reg [31:0] last_ReadData1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ReadData0_prev = ReadData0;
	ReadData1_prev = ReadData1;
end

// update expected /o prevs

always @(trigger)
begin
	ReadData0_expected_prev = ReadData0_expected;
	ReadData1_expected_prev = ReadData1_expected;
end


// expected ReadData0[ 31 ]
initial
begin
	ReadData0_expected[31] = 1'bX;
end 
// expected ReadData0[ 30 ]
initial
begin
	ReadData0_expected[30] = 1'bX;
end 
// expected ReadData0[ 29 ]
initial
begin
	ReadData0_expected[29] = 1'bX;
end 
// expected ReadData0[ 28 ]
initial
begin
	ReadData0_expected[28] = 1'bX;
end 
// expected ReadData0[ 27 ]
initial
begin
	ReadData0_expected[27] = 1'bX;
end 
// expected ReadData0[ 26 ]
initial
begin
	ReadData0_expected[26] = 1'bX;
end 
// expected ReadData0[ 25 ]
initial
begin
	ReadData0_expected[25] = 1'bX;
end 
// expected ReadData0[ 24 ]
initial
begin
	ReadData0_expected[24] = 1'bX;
end 
// expected ReadData0[ 23 ]
initial
begin
	ReadData0_expected[23] = 1'bX;
end 
// expected ReadData0[ 22 ]
initial
begin
	ReadData0_expected[22] = 1'bX;
end 
// expected ReadData0[ 21 ]
initial
begin
	ReadData0_expected[21] = 1'bX;
end 
// expected ReadData0[ 20 ]
initial
begin
	ReadData0_expected[20] = 1'bX;
end 
// expected ReadData0[ 19 ]
initial
begin
	ReadData0_expected[19] = 1'bX;
end 
// expected ReadData0[ 18 ]
initial
begin
	ReadData0_expected[18] = 1'bX;
end 
// expected ReadData0[ 17 ]
initial
begin
	ReadData0_expected[17] = 1'bX;
end 
// expected ReadData0[ 16 ]
initial
begin
	ReadData0_expected[16] = 1'bX;
end 
// expected ReadData0[ 15 ]
initial
begin
	ReadData0_expected[15] = 1'bX;
end 
// expected ReadData0[ 14 ]
initial
begin
	ReadData0_expected[14] = 1'bX;
end 
// expected ReadData0[ 13 ]
initial
begin
	ReadData0_expected[13] = 1'bX;
end 
// expected ReadData0[ 12 ]
initial
begin
	ReadData0_expected[12] = 1'bX;
end 
// expected ReadData0[ 11 ]
initial
begin
	ReadData0_expected[11] = 1'bX;
end 
// expected ReadData0[ 10 ]
initial
begin
	ReadData0_expected[10] = 1'bX;
end 
// expected ReadData0[ 9 ]
initial
begin
	ReadData0_expected[9] = 1'bX;
end 
// expected ReadData0[ 8 ]
initial
begin
	ReadData0_expected[8] = 1'bX;
end 
// expected ReadData0[ 7 ]
initial
begin
	ReadData0_expected[7] = 1'bX;
end 
// expected ReadData0[ 6 ]
initial
begin
	ReadData0_expected[6] = 1'bX;
end 
// expected ReadData0[ 5 ]
initial
begin
	ReadData0_expected[5] = 1'bX;
end 
// expected ReadData0[ 4 ]
initial
begin
	ReadData0_expected[4] = 1'bX;
end 
// expected ReadData0[ 3 ]
initial
begin
	ReadData0_expected[3] = 1'bX;
end 
// expected ReadData0[ 2 ]
initial
begin
	ReadData0_expected[2] = 1'bX;
end 
// expected ReadData0[ 1 ]
initial
begin
	ReadData0_expected[1] = 1'bX;
end 
// expected ReadData0[ 0 ]
initial
begin
	ReadData0_expected[0] = 1'bX;
end 
// expected ReadData1[ 31 ]
initial
begin
	ReadData1_expected[31] = 1'bX;
end 
// expected ReadData1[ 30 ]
initial
begin
	ReadData1_expected[30] = 1'bX;
end 
// expected ReadData1[ 29 ]
initial
begin
	ReadData1_expected[29] = 1'bX;
end 
// expected ReadData1[ 28 ]
initial
begin
	ReadData1_expected[28] = 1'bX;
end 
// expected ReadData1[ 27 ]
initial
begin
	ReadData1_expected[27] = 1'bX;
end 
// expected ReadData1[ 26 ]
initial
begin
	ReadData1_expected[26] = 1'bX;
end 
// expected ReadData1[ 25 ]
initial
begin
	ReadData1_expected[25] = 1'bX;
end 
// expected ReadData1[ 24 ]
initial
begin
	ReadData1_expected[24] = 1'bX;
end 
// expected ReadData1[ 23 ]
initial
begin
	ReadData1_expected[23] = 1'bX;
end 
// expected ReadData1[ 22 ]
initial
begin
	ReadData1_expected[22] = 1'bX;
end 
// expected ReadData1[ 21 ]
initial
begin
	ReadData1_expected[21] = 1'bX;
end 
// expected ReadData1[ 20 ]
initial
begin
	ReadData1_expected[20] = 1'bX;
end 
// expected ReadData1[ 19 ]
initial
begin
	ReadData1_expected[19] = 1'bX;
end 
// expected ReadData1[ 18 ]
initial
begin
	ReadData1_expected[18] = 1'bX;
end 
// expected ReadData1[ 17 ]
initial
begin
	ReadData1_expected[17] = 1'bX;
end 
// expected ReadData1[ 16 ]
initial
begin
	ReadData1_expected[16] = 1'bX;
end 
// expected ReadData1[ 15 ]
initial
begin
	ReadData1_expected[15] = 1'bX;
end 
// expected ReadData1[ 14 ]
initial
begin
	ReadData1_expected[14] = 1'bX;
end 
// expected ReadData1[ 13 ]
initial
begin
	ReadData1_expected[13] = 1'bX;
end 
// expected ReadData1[ 12 ]
initial
begin
	ReadData1_expected[12] = 1'bX;
end 
// expected ReadData1[ 11 ]
initial
begin
	ReadData1_expected[11] = 1'bX;
end 
// expected ReadData1[ 10 ]
initial
begin
	ReadData1_expected[10] = 1'bX;
end 
// expected ReadData1[ 9 ]
initial
begin
	ReadData1_expected[9] = 1'bX;
end 
// expected ReadData1[ 8 ]
initial
begin
	ReadData1_expected[8] = 1'bX;
end 
// expected ReadData1[ 7 ]
initial
begin
	ReadData1_expected[7] = 1'bX;
end 
// expected ReadData1[ 6 ]
initial
begin
	ReadData1_expected[6] = 1'bX;
end 
// expected ReadData1[ 5 ]
initial
begin
	ReadData1_expected[5] = 1'bX;
end 
// expected ReadData1[ 4 ]
initial
begin
	ReadData1_expected[4] = 1'bX;
end 
// expected ReadData1[ 3 ]
initial
begin
	ReadData1_expected[3] = 1'bX;
end 
// expected ReadData1[ 2 ]
initial
begin
	ReadData1_expected[2] = 1'bX;
end 
// expected ReadData1[ 1 ]
initial
begin
	ReadData1_expected[1] = 1'bX;
end 
// expected ReadData1[ 0 ]
initial
begin
	ReadData1_expected[0] = 1'bX;
end 
// generate trigger
always @(ReadData0_expected or ReadData0 or ReadData1_expected or ReadData1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ReadData0 = %b | expected ReadData1 = %b | ",ReadData0_expected_prev,ReadData1_expected_prev);
	$display("| real ReadData0 = %b | real ReadData1 = %b | ",ReadData0_prev,ReadData1_prev);
`endif
	if (
		( ReadData0_expected_prev[0] !== 1'bx ) && ( ReadData0_prev[0] !== ReadData0_expected_prev[0] )
		&& ((ReadData0_expected_prev[0] !== last_ReadData0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[0] = ReadData0_expected_prev[0];
	end
	if (
		( ReadData0_expected_prev[1] !== 1'bx ) && ( ReadData0_prev[1] !== ReadData0_expected_prev[1] )
		&& ((ReadData0_expected_prev[1] !== last_ReadData0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[1] = ReadData0_expected_prev[1];
	end
	if (
		( ReadData0_expected_prev[2] !== 1'bx ) && ( ReadData0_prev[2] !== ReadData0_expected_prev[2] )
		&& ((ReadData0_expected_prev[2] !== last_ReadData0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[2] = ReadData0_expected_prev[2];
	end
	if (
		( ReadData0_expected_prev[3] !== 1'bx ) && ( ReadData0_prev[3] !== ReadData0_expected_prev[3] )
		&& ((ReadData0_expected_prev[3] !== last_ReadData0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[3] = ReadData0_expected_prev[3];
	end
	if (
		( ReadData0_expected_prev[4] !== 1'bx ) && ( ReadData0_prev[4] !== ReadData0_expected_prev[4] )
		&& ((ReadData0_expected_prev[4] !== last_ReadData0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[4] = ReadData0_expected_prev[4];
	end
	if (
		( ReadData0_expected_prev[5] !== 1'bx ) && ( ReadData0_prev[5] !== ReadData0_expected_prev[5] )
		&& ((ReadData0_expected_prev[5] !== last_ReadData0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[5] = ReadData0_expected_prev[5];
	end
	if (
		( ReadData0_expected_prev[6] !== 1'bx ) && ( ReadData0_prev[6] !== ReadData0_expected_prev[6] )
		&& ((ReadData0_expected_prev[6] !== last_ReadData0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[6] = ReadData0_expected_prev[6];
	end
	if (
		( ReadData0_expected_prev[7] !== 1'bx ) && ( ReadData0_prev[7] !== ReadData0_expected_prev[7] )
		&& ((ReadData0_expected_prev[7] !== last_ReadData0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[7] = ReadData0_expected_prev[7];
	end
	if (
		( ReadData0_expected_prev[8] !== 1'bx ) && ( ReadData0_prev[8] !== ReadData0_expected_prev[8] )
		&& ((ReadData0_expected_prev[8] !== last_ReadData0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[8] = ReadData0_expected_prev[8];
	end
	if (
		( ReadData0_expected_prev[9] !== 1'bx ) && ( ReadData0_prev[9] !== ReadData0_expected_prev[9] )
		&& ((ReadData0_expected_prev[9] !== last_ReadData0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[9] = ReadData0_expected_prev[9];
	end
	if (
		( ReadData0_expected_prev[10] !== 1'bx ) && ( ReadData0_prev[10] !== ReadData0_expected_prev[10] )
		&& ((ReadData0_expected_prev[10] !== last_ReadData0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[10] = ReadData0_expected_prev[10];
	end
	if (
		( ReadData0_expected_prev[11] !== 1'bx ) && ( ReadData0_prev[11] !== ReadData0_expected_prev[11] )
		&& ((ReadData0_expected_prev[11] !== last_ReadData0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[11] = ReadData0_expected_prev[11];
	end
	if (
		( ReadData0_expected_prev[12] !== 1'bx ) && ( ReadData0_prev[12] !== ReadData0_expected_prev[12] )
		&& ((ReadData0_expected_prev[12] !== last_ReadData0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[12] = ReadData0_expected_prev[12];
	end
	if (
		( ReadData0_expected_prev[13] !== 1'bx ) && ( ReadData0_prev[13] !== ReadData0_expected_prev[13] )
		&& ((ReadData0_expected_prev[13] !== last_ReadData0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[13] = ReadData0_expected_prev[13];
	end
	if (
		( ReadData0_expected_prev[14] !== 1'bx ) && ( ReadData0_prev[14] !== ReadData0_expected_prev[14] )
		&& ((ReadData0_expected_prev[14] !== last_ReadData0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[14] = ReadData0_expected_prev[14];
	end
	if (
		( ReadData0_expected_prev[15] !== 1'bx ) && ( ReadData0_prev[15] !== ReadData0_expected_prev[15] )
		&& ((ReadData0_expected_prev[15] !== last_ReadData0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[15] = ReadData0_expected_prev[15];
	end
	if (
		( ReadData0_expected_prev[16] !== 1'bx ) && ( ReadData0_prev[16] !== ReadData0_expected_prev[16] )
		&& ((ReadData0_expected_prev[16] !== last_ReadData0_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[16] = ReadData0_expected_prev[16];
	end
	if (
		( ReadData0_expected_prev[17] !== 1'bx ) && ( ReadData0_prev[17] !== ReadData0_expected_prev[17] )
		&& ((ReadData0_expected_prev[17] !== last_ReadData0_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[17] = ReadData0_expected_prev[17];
	end
	if (
		( ReadData0_expected_prev[18] !== 1'bx ) && ( ReadData0_prev[18] !== ReadData0_expected_prev[18] )
		&& ((ReadData0_expected_prev[18] !== last_ReadData0_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[18] = ReadData0_expected_prev[18];
	end
	if (
		( ReadData0_expected_prev[19] !== 1'bx ) && ( ReadData0_prev[19] !== ReadData0_expected_prev[19] )
		&& ((ReadData0_expected_prev[19] !== last_ReadData0_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[19] = ReadData0_expected_prev[19];
	end
	if (
		( ReadData0_expected_prev[20] !== 1'bx ) && ( ReadData0_prev[20] !== ReadData0_expected_prev[20] )
		&& ((ReadData0_expected_prev[20] !== last_ReadData0_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[20] = ReadData0_expected_prev[20];
	end
	if (
		( ReadData0_expected_prev[21] !== 1'bx ) && ( ReadData0_prev[21] !== ReadData0_expected_prev[21] )
		&& ((ReadData0_expected_prev[21] !== last_ReadData0_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[21] = ReadData0_expected_prev[21];
	end
	if (
		( ReadData0_expected_prev[22] !== 1'bx ) && ( ReadData0_prev[22] !== ReadData0_expected_prev[22] )
		&& ((ReadData0_expected_prev[22] !== last_ReadData0_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[22] = ReadData0_expected_prev[22];
	end
	if (
		( ReadData0_expected_prev[23] !== 1'bx ) && ( ReadData0_prev[23] !== ReadData0_expected_prev[23] )
		&& ((ReadData0_expected_prev[23] !== last_ReadData0_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[23] = ReadData0_expected_prev[23];
	end
	if (
		( ReadData0_expected_prev[24] !== 1'bx ) && ( ReadData0_prev[24] !== ReadData0_expected_prev[24] )
		&& ((ReadData0_expected_prev[24] !== last_ReadData0_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[24] = ReadData0_expected_prev[24];
	end
	if (
		( ReadData0_expected_prev[25] !== 1'bx ) && ( ReadData0_prev[25] !== ReadData0_expected_prev[25] )
		&& ((ReadData0_expected_prev[25] !== last_ReadData0_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[25] = ReadData0_expected_prev[25];
	end
	if (
		( ReadData0_expected_prev[26] !== 1'bx ) && ( ReadData0_prev[26] !== ReadData0_expected_prev[26] )
		&& ((ReadData0_expected_prev[26] !== last_ReadData0_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[26] = ReadData0_expected_prev[26];
	end
	if (
		( ReadData0_expected_prev[27] !== 1'bx ) && ( ReadData0_prev[27] !== ReadData0_expected_prev[27] )
		&& ((ReadData0_expected_prev[27] !== last_ReadData0_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[27] = ReadData0_expected_prev[27];
	end
	if (
		( ReadData0_expected_prev[28] !== 1'bx ) && ( ReadData0_prev[28] !== ReadData0_expected_prev[28] )
		&& ((ReadData0_expected_prev[28] !== last_ReadData0_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[28] = ReadData0_expected_prev[28];
	end
	if (
		( ReadData0_expected_prev[29] !== 1'bx ) && ( ReadData0_prev[29] !== ReadData0_expected_prev[29] )
		&& ((ReadData0_expected_prev[29] !== last_ReadData0_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[29] = ReadData0_expected_prev[29];
	end
	if (
		( ReadData0_expected_prev[30] !== 1'bx ) && ( ReadData0_prev[30] !== ReadData0_expected_prev[30] )
		&& ((ReadData0_expected_prev[30] !== last_ReadData0_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[30] = ReadData0_expected_prev[30];
	end
	if (
		( ReadData0_expected_prev[31] !== 1'bx ) && ( ReadData0_prev[31] !== ReadData0_expected_prev[31] )
		&& ((ReadData0_expected_prev[31] !== last_ReadData0_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData0_expected_prev);
		$display ("     Real value = %b", ReadData0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ReadData0_exp[31] = ReadData0_expected_prev[31];
	end
	if (
		( ReadData1_expected_prev[0] !== 1'bx ) && ( ReadData1_prev[0] !== ReadData1_expected_prev[0] )
		&& ((ReadData1_expected_prev[0] !== last_ReadData1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[0] = ReadData1_expected_prev[0];
	end
	if (
		( ReadData1_expected_prev[1] !== 1'bx ) && ( ReadData1_prev[1] !== ReadData1_expected_prev[1] )
		&& ((ReadData1_expected_prev[1] !== last_ReadData1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[1] = ReadData1_expected_prev[1];
	end
	if (
		( ReadData1_expected_prev[2] !== 1'bx ) && ( ReadData1_prev[2] !== ReadData1_expected_prev[2] )
		&& ((ReadData1_expected_prev[2] !== last_ReadData1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[2] = ReadData1_expected_prev[2];
	end
	if (
		( ReadData1_expected_prev[3] !== 1'bx ) && ( ReadData1_prev[3] !== ReadData1_expected_prev[3] )
		&& ((ReadData1_expected_prev[3] !== last_ReadData1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[3] = ReadData1_expected_prev[3];
	end
	if (
		( ReadData1_expected_prev[4] !== 1'bx ) && ( ReadData1_prev[4] !== ReadData1_expected_prev[4] )
		&& ((ReadData1_expected_prev[4] !== last_ReadData1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[4] = ReadData1_expected_prev[4];
	end
	if (
		( ReadData1_expected_prev[5] !== 1'bx ) && ( ReadData1_prev[5] !== ReadData1_expected_prev[5] )
		&& ((ReadData1_expected_prev[5] !== last_ReadData1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[5] = ReadData1_expected_prev[5];
	end
	if (
		( ReadData1_expected_prev[6] !== 1'bx ) && ( ReadData1_prev[6] !== ReadData1_expected_prev[6] )
		&& ((ReadData1_expected_prev[6] !== last_ReadData1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[6] = ReadData1_expected_prev[6];
	end
	if (
		( ReadData1_expected_prev[7] !== 1'bx ) && ( ReadData1_prev[7] !== ReadData1_expected_prev[7] )
		&& ((ReadData1_expected_prev[7] !== last_ReadData1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[7] = ReadData1_expected_prev[7];
	end
	if (
		( ReadData1_expected_prev[8] !== 1'bx ) && ( ReadData1_prev[8] !== ReadData1_expected_prev[8] )
		&& ((ReadData1_expected_prev[8] !== last_ReadData1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[8] = ReadData1_expected_prev[8];
	end
	if (
		( ReadData1_expected_prev[9] !== 1'bx ) && ( ReadData1_prev[9] !== ReadData1_expected_prev[9] )
		&& ((ReadData1_expected_prev[9] !== last_ReadData1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[9] = ReadData1_expected_prev[9];
	end
	if (
		( ReadData1_expected_prev[10] !== 1'bx ) && ( ReadData1_prev[10] !== ReadData1_expected_prev[10] )
		&& ((ReadData1_expected_prev[10] !== last_ReadData1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[10] = ReadData1_expected_prev[10];
	end
	if (
		( ReadData1_expected_prev[11] !== 1'bx ) && ( ReadData1_prev[11] !== ReadData1_expected_prev[11] )
		&& ((ReadData1_expected_prev[11] !== last_ReadData1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[11] = ReadData1_expected_prev[11];
	end
	if (
		( ReadData1_expected_prev[12] !== 1'bx ) && ( ReadData1_prev[12] !== ReadData1_expected_prev[12] )
		&& ((ReadData1_expected_prev[12] !== last_ReadData1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[12] = ReadData1_expected_prev[12];
	end
	if (
		( ReadData1_expected_prev[13] !== 1'bx ) && ( ReadData1_prev[13] !== ReadData1_expected_prev[13] )
		&& ((ReadData1_expected_prev[13] !== last_ReadData1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[13] = ReadData1_expected_prev[13];
	end
	if (
		( ReadData1_expected_prev[14] !== 1'bx ) && ( ReadData1_prev[14] !== ReadData1_expected_prev[14] )
		&& ((ReadData1_expected_prev[14] !== last_ReadData1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[14] = ReadData1_expected_prev[14];
	end
	if (
		( ReadData1_expected_prev[15] !== 1'bx ) && ( ReadData1_prev[15] !== ReadData1_expected_prev[15] )
		&& ((ReadData1_expected_prev[15] !== last_ReadData1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[15] = ReadData1_expected_prev[15];
	end
	if (
		( ReadData1_expected_prev[16] !== 1'bx ) && ( ReadData1_prev[16] !== ReadData1_expected_prev[16] )
		&& ((ReadData1_expected_prev[16] !== last_ReadData1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[16] = ReadData1_expected_prev[16];
	end
	if (
		( ReadData1_expected_prev[17] !== 1'bx ) && ( ReadData1_prev[17] !== ReadData1_expected_prev[17] )
		&& ((ReadData1_expected_prev[17] !== last_ReadData1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[17] = ReadData1_expected_prev[17];
	end
	if (
		( ReadData1_expected_prev[18] !== 1'bx ) && ( ReadData1_prev[18] !== ReadData1_expected_prev[18] )
		&& ((ReadData1_expected_prev[18] !== last_ReadData1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[18] = ReadData1_expected_prev[18];
	end
	if (
		( ReadData1_expected_prev[19] !== 1'bx ) && ( ReadData1_prev[19] !== ReadData1_expected_prev[19] )
		&& ((ReadData1_expected_prev[19] !== last_ReadData1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[19] = ReadData1_expected_prev[19];
	end
	if (
		( ReadData1_expected_prev[20] !== 1'bx ) && ( ReadData1_prev[20] !== ReadData1_expected_prev[20] )
		&& ((ReadData1_expected_prev[20] !== last_ReadData1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[20] = ReadData1_expected_prev[20];
	end
	if (
		( ReadData1_expected_prev[21] !== 1'bx ) && ( ReadData1_prev[21] !== ReadData1_expected_prev[21] )
		&& ((ReadData1_expected_prev[21] !== last_ReadData1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[21] = ReadData1_expected_prev[21];
	end
	if (
		( ReadData1_expected_prev[22] !== 1'bx ) && ( ReadData1_prev[22] !== ReadData1_expected_prev[22] )
		&& ((ReadData1_expected_prev[22] !== last_ReadData1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[22] = ReadData1_expected_prev[22];
	end
	if (
		( ReadData1_expected_prev[23] !== 1'bx ) && ( ReadData1_prev[23] !== ReadData1_expected_prev[23] )
		&& ((ReadData1_expected_prev[23] !== last_ReadData1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[23] = ReadData1_expected_prev[23];
	end
	if (
		( ReadData1_expected_prev[24] !== 1'bx ) && ( ReadData1_prev[24] !== ReadData1_expected_prev[24] )
		&& ((ReadData1_expected_prev[24] !== last_ReadData1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[24] = ReadData1_expected_prev[24];
	end
	if (
		( ReadData1_expected_prev[25] !== 1'bx ) && ( ReadData1_prev[25] !== ReadData1_expected_prev[25] )
		&& ((ReadData1_expected_prev[25] !== last_ReadData1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[25] = ReadData1_expected_prev[25];
	end
	if (
		( ReadData1_expected_prev[26] !== 1'bx ) && ( ReadData1_prev[26] !== ReadData1_expected_prev[26] )
		&& ((ReadData1_expected_prev[26] !== last_ReadData1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[26] = ReadData1_expected_prev[26];
	end
	if (
		( ReadData1_expected_prev[27] !== 1'bx ) && ( ReadData1_prev[27] !== ReadData1_expected_prev[27] )
		&& ((ReadData1_expected_prev[27] !== last_ReadData1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[27] = ReadData1_expected_prev[27];
	end
	if (
		( ReadData1_expected_prev[28] !== 1'bx ) && ( ReadData1_prev[28] !== ReadData1_expected_prev[28] )
		&& ((ReadData1_expected_prev[28] !== last_ReadData1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[28] = ReadData1_expected_prev[28];
	end
	if (
		( ReadData1_expected_prev[29] !== 1'bx ) && ( ReadData1_prev[29] !== ReadData1_expected_prev[29] )
		&& ((ReadData1_expected_prev[29] !== last_ReadData1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[29] = ReadData1_expected_prev[29];
	end
	if (
		( ReadData1_expected_prev[30] !== 1'bx ) && ( ReadData1_prev[30] !== ReadData1_expected_prev[30] )
		&& ((ReadData1_expected_prev[30] !== last_ReadData1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[30] = ReadData1_expected_prev[30];
	end
	if (
		( ReadData1_expected_prev[31] !== 1'bx ) && ( ReadData1_prev[31] !== ReadData1_expected_prev[31] )
		&& ((ReadData1_expected_prev[31] !== last_ReadData1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData1_expected_prev);
		$display ("     Real value = %b", ReadData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ReadData1_exp[31] = ReadData1_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module registerBank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [4:0] ReadRegister0;
reg [4:0] ReadRegister1;
reg [31:0] writeData;
reg writeEnable;
reg [4:0] writeRegister;
// wires                                               
wire [31:0] ReadData0;
wire [31:0] ReadData1;

wire sampler;                             

// assign statements (if any)                          
registerBank i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.ReadData0(ReadData0),
	.ReadData1(ReadData1),
	.ReadRegister0(ReadRegister0),
	.ReadRegister1(ReadRegister1),
	.writeData(writeData),
	.writeEnable(writeEnable),
	.writeRegister(writeRegister)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
// ReadRegister0[ 4 ]
initial
begin
	ReadRegister0[4] = 1'b0;
end 
// ReadRegister0[ 3 ]
initial
begin
	ReadRegister0[3] = 1'b0;
end 
// ReadRegister0[ 2 ]
initial
begin
	ReadRegister0[2] = 1'b0;
end 
// ReadRegister0[ 1 ]
initial
begin
	ReadRegister0[1] = 1'b0;
end 
// ReadRegister0[ 0 ]
initial
begin
	ReadRegister0[0] = 1'b0;
end 
// ReadRegister1[ 4 ]
initial
begin
	ReadRegister1[4] = 1'b0;
end 
// ReadRegister1[ 3 ]
initial
begin
	ReadRegister1[3] = 1'b0;
end 
// ReadRegister1[ 2 ]
initial
begin
	ReadRegister1[2] = 1'b0;
end 
// ReadRegister1[ 1 ]
initial
begin
	ReadRegister1[1] = 1'b0;
end 
// ReadRegister1[ 0 ]
initial
begin
	ReadRegister1[0] = 1'b0;
end 
// writeData[ 31 ]
initial
begin
	writeData[31] = 1'b0;
end 
// writeData[ 30 ]
initial
begin
	writeData[30] = 1'b0;
end 
// writeData[ 29 ]
initial
begin
	writeData[29] = 1'b0;
end 
// writeData[ 28 ]
initial
begin
	writeData[28] = 1'b0;
end 
// writeData[ 27 ]
initial
begin
	writeData[27] = 1'b0;
end 
// writeData[ 26 ]
initial
begin
	writeData[26] = 1'b0;
end 
// writeData[ 25 ]
initial
begin
	writeData[25] = 1'b0;
end 
// writeData[ 24 ]
initial
begin
	writeData[24] = 1'b0;
end 
// writeData[ 23 ]
initial
begin
	writeData[23] = 1'b0;
end 
// writeData[ 22 ]
initial
begin
	writeData[22] = 1'b0;
end 
// writeData[ 21 ]
initial
begin
	writeData[21] = 1'b0;
end 
// writeData[ 20 ]
initial
begin
	writeData[20] = 1'b0;
end 
// writeData[ 19 ]
initial
begin
	writeData[19] = 1'b0;
end 
// writeData[ 18 ]
initial
begin
	writeData[18] = 1'b0;
end 
// writeData[ 17 ]
initial
begin
	writeData[17] = 1'b0;
end 
// writeData[ 16 ]
initial
begin
	writeData[16] = 1'b0;
end 
// writeData[ 15 ]
initial
begin
	writeData[15] = 1'b0;
end 
// writeData[ 14 ]
initial
begin
	writeData[14] = 1'b0;
end 
// writeData[ 13 ]
initial
begin
	writeData[13] = 1'b0;
end 
// writeData[ 12 ]
initial
begin
	writeData[12] = 1'b0;
end 
// writeData[ 11 ]
initial
begin
	writeData[11] = 1'b0;
end 
// writeData[ 10 ]
initial
begin
	writeData[10] = 1'b0;
end 
// writeData[ 9 ]
initial
begin
	writeData[9] = 1'b0;
end 
// writeData[ 8 ]
initial
begin
	writeData[8] = 1'b0;
end 
// writeData[ 7 ]
initial
begin
	writeData[7] = 1'b0;
end 
// writeData[ 6 ]
initial
begin
	writeData[6] = 1'b0;
end 
// writeData[ 5 ]
initial
begin
	writeData[5] = 1'b0;
end 
// writeData[ 4 ]
initial
begin
	writeData[4] = 1'b0;
end 
// writeData[ 3 ]
initial
begin
	writeData[3] = 1'b0;
end 
// writeData[ 2 ]
initial
begin
	writeData[2] = 1'b0;
end 
// writeData[ 1 ]
initial
begin
	writeData[1] = 1'b0;
end 
// writeData[ 0 ]
initial
begin
	writeData[0] = 1'b0;
end 

// writeEnable
initial
begin
	writeEnable = 1'b0;
end 
// writeRegister[ 4 ]
initial
begin
	writeRegister[4] = 1'b0;
end 
// writeRegister[ 3 ]
initial
begin
	writeRegister[3] = 1'b0;
end 
// writeRegister[ 2 ]
initial
begin
	writeRegister[2] = 1'b0;
end 
// writeRegister[ 1 ]
initial
begin
	writeRegister[1] = 1'b0;
end 
// writeRegister[ 0 ]
initial
begin
	writeRegister[0] = 1'b0;
end 

registerBank_vlg_sample_tst tb_sample (
	.clock(clock),
	.ReadRegister0(ReadRegister0),
	.ReadRegister1(ReadRegister1),
	.writeData(writeData),
	.writeEnable(writeEnable),
	.writeRegister(writeRegister),
	.sampler_tx(sampler)
);

registerBank_vlg_check_tst tb_out(
	.ReadData0(ReadData0),
	.ReadData1(ReadData1),
	.sampler_rx(sampler)
);
endmodule


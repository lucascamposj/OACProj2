// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2018 10:57:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PipelineInit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PipelineInit_vlg_sample_tst(
	clock,
	clock2,
	sampler_tx
);
input  clock;
input  clock2;
output sampler_tx;

reg sample;
time current_time;
always @(clock or clock2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PipelineInit_vlg_check_tst (
	ALUOperation,
	atR,
	BInstruction,
	BPC,
	EXBranch,
	EXHIGH,
	EXLOW,
	EXopALU,
	EXULAA,
	EXULAB,
	Flush,
	ForwardA,
	ForwardB,
	Instruction,
	JAL,
	Jump,
	MEMBranch,
	MEMOutALU,
	MemReadValue,
	notOpSignal,
	OrigPC,
	outALU,
	Overflow,
	RegA,
	s0,
	s1,
	s2,
	Stall,
	t0R,
	t1R,
	TreatedForwardB,
	WBDadoDeRetorno,
	WBMemPraReg,
	Zero,
	sampler_rx
);
input [3:0] ALUOperation;
input [31:0] atR;
input [31:0] BInstruction;
input [31:0] BPC;
input [1:0] EXBranch;
input [31:0] EXHIGH;
input [31:0] EXLOW;
input [2:0] EXopALU;
input [31:0] EXULAA;
input [31:0] EXULAB;
input  Flush;
input [1:0] ForwardA;
input [1:0] ForwardB;
input [31:0] Instruction;
input  JAL;
input  Jump;
input [1:0] MEMBranch;
input [31:0] MEMOutALU;
input [31:0] MemReadValue;
input  notOpSignal;
input  OrigPC;
input [31:0] outALU;
input  Overflow;
input [31:0] RegA;
input [31:0] s0;
input [31:0] s1;
input [31:0] s2;
input  Stall;
input [31:0] t0R;
input [31:0] t1R;
input [1:0] TreatedForwardB;
input [31:0] WBDadoDeRetorno;
input  WBMemPraReg;
input  Zero;
input sampler_rx;

reg [3:0] ALUOperation_expected;
reg [31:0] atR_expected;
reg [31:0] BInstruction_expected;
reg [31:0] BPC_expected;
reg [1:0] EXBranch_expected;
reg [31:0] EXHIGH_expected;
reg [31:0] EXLOW_expected;
reg [2:0] EXopALU_expected;
reg [31:0] EXULAA_expected;
reg [31:0] EXULAB_expected;
reg  Flush_expected;
reg [1:0] ForwardA_expected;
reg [1:0] ForwardB_expected;
reg [31:0] Instruction_expected;
reg  JAL_expected;
reg  Jump_expected;
reg [1:0] MEMBranch_expected;
reg [31:0] MEMOutALU_expected;
reg [31:0] MemReadValue_expected;
reg  notOpSignal_expected;
reg  OrigPC_expected;
reg [31:0] outALU_expected;
reg  Overflow_expected;
reg [31:0] RegA_expected;
reg [31:0] s0_expected;
reg [31:0] s1_expected;
reg [31:0] s2_expected;
reg  Stall_expected;
reg [31:0] t0R_expected;
reg [31:0] t1R_expected;
reg [1:0] TreatedForwardB_expected;
reg [31:0] WBDadoDeRetorno_expected;
reg  WBMemPraReg_expected;
reg  Zero_expected;

reg [3:0] ALUOperation_prev;
reg [31:0] atR_prev;
reg [31:0] BInstruction_prev;
reg [31:0] BPC_prev;
reg [1:0] EXBranch_prev;
reg [31:0] EXHIGH_prev;
reg [31:0] EXLOW_prev;
reg [2:0] EXopALU_prev;
reg [31:0] EXULAA_prev;
reg [31:0] EXULAB_prev;
reg  Flush_prev;
reg [1:0] ForwardA_prev;
reg [1:0] ForwardB_prev;
reg [31:0] Instruction_prev;
reg  JAL_prev;
reg  Jump_prev;
reg [1:0] MEMBranch_prev;
reg [31:0] MEMOutALU_prev;
reg [31:0] MemReadValue_prev;
reg  notOpSignal_prev;
reg  OrigPC_prev;
reg [31:0] outALU_prev;
reg  Overflow_prev;
reg [31:0] RegA_prev;
reg [31:0] s0_prev;
reg [31:0] s1_prev;
reg [31:0] s2_prev;
reg  Stall_prev;
reg [31:0] t0R_prev;
reg [31:0] t1R_prev;
reg [1:0] TreatedForwardB_prev;
reg [31:0] WBDadoDeRetorno_prev;
reg  WBMemPraReg_prev;
reg  Zero_prev;

reg [3:0] ALUOperation_expected_prev;
reg [31:0] atR_expected_prev;
reg [31:0] BPC_expected_prev;
reg [31:0] EXHIGH_expected_prev;
reg [31:0] EXLOW_expected_prev;
reg [2:0] EXopALU_expected_prev;
reg [31:0] EXULAA_expected_prev;
reg [31:0] EXULAB_expected_prev;
reg [1:0] ForwardA_expected_prev;
reg [1:0] ForwardB_expected_prev;
reg  JAL_expected_prev;
reg [31:0] MEMOutALU_expected_prev;
reg [31:0] MemReadValue_expected_prev;
reg [31:0] outALU_expected_prev;
reg [31:0] RegA_expected_prev;
reg  Stall_expected_prev;
reg [31:0] t0R_expected_prev;
reg [31:0] t1R_expected_prev;
reg [1:0] TreatedForwardB_expected_prev;
reg [31:0] WBDadoDeRetorno_expected_prev;
reg  WBMemPraReg_expected_prev;

reg [3:0] last_ALUOperation_exp;
reg [31:0] last_atR_exp;
reg [31:0] last_BPC_exp;
reg [31:0] last_EXHIGH_exp;
reg [31:0] last_EXLOW_exp;
reg [2:0] last_EXopALU_exp;
reg [31:0] last_EXULAA_exp;
reg [31:0] last_EXULAB_exp;
reg [1:0] last_ForwardA_exp;
reg [1:0] last_ForwardB_exp;
reg  last_JAL_exp;
reg [31:0] last_MEMOutALU_exp;
reg [31:0] last_MemReadValue_exp;
reg [31:0] last_outALU_exp;
reg [31:0] last_RegA_exp;
reg  last_Stall_exp;
reg [31:0] last_t0R_exp;
reg [31:0] last_t1R_exp;
reg [1:0] last_TreatedForwardB_exp;
reg [31:0] last_WBDadoDeRetorno_exp;
reg  last_WBMemPraReg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:34] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 34'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOperation_prev = ALUOperation;
	atR_prev = atR;
	BInstruction_prev = BInstruction;
	BPC_prev = BPC;
	EXBranch_prev = EXBranch;
	EXHIGH_prev = EXHIGH;
	EXLOW_prev = EXLOW;
	EXopALU_prev = EXopALU;
	EXULAA_prev = EXULAA;
	EXULAB_prev = EXULAB;
	Flush_prev = Flush;
	ForwardA_prev = ForwardA;
	ForwardB_prev = ForwardB;
	Instruction_prev = Instruction;
	JAL_prev = JAL;
	Jump_prev = Jump;
	MEMBranch_prev = MEMBranch;
	MEMOutALU_prev = MEMOutALU;
	MemReadValue_prev = MemReadValue;
	notOpSignal_prev = notOpSignal;
	OrigPC_prev = OrigPC;
	outALU_prev = outALU;
	Overflow_prev = Overflow;
	RegA_prev = RegA;
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
	Stall_prev = Stall;
	t0R_prev = t0R;
	t1R_prev = t1R;
	TreatedForwardB_prev = TreatedForwardB;
	WBDadoDeRetorno_prev = WBDadoDeRetorno;
	WBMemPraReg_prev = WBMemPraReg;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOperation_expected_prev = ALUOperation_expected;
	atR_expected_prev = atR_expected;
	BPC_expected_prev = BPC_expected;
	EXHIGH_expected_prev = EXHIGH_expected;
	EXLOW_expected_prev = EXLOW_expected;
	EXopALU_expected_prev = EXopALU_expected;
	EXULAA_expected_prev = EXULAA_expected;
	EXULAB_expected_prev = EXULAB_expected;
	ForwardA_expected_prev = ForwardA_expected;
	ForwardB_expected_prev = ForwardB_expected;
	JAL_expected_prev = JAL_expected;
	MEMOutALU_expected_prev = MEMOutALU_expected;
	MemReadValue_expected_prev = MemReadValue_expected;
	outALU_expected_prev = outALU_expected;
	RegA_expected_prev = RegA_expected;
	Stall_expected_prev = Stall_expected;
	t0R_expected_prev = t0R_expected;
	t1R_expected_prev = t1R_expected;
	TreatedForwardB_expected_prev = TreatedForwardB_expected;
	WBDadoDeRetorno_expected_prev = WBDadoDeRetorno_expected;
	WBMemPraReg_expected_prev = WBMemPraReg_expected;
end


// expected BPC[ 31 ]
initial
begin
	BPC_expected[31] = 1'bX;
end 
// expected BPC[ 30 ]
initial
begin
	BPC_expected[30] = 1'bX;
end 
// expected BPC[ 29 ]
initial
begin
	BPC_expected[29] = 1'bX;
end 
// expected BPC[ 28 ]
initial
begin
	BPC_expected[28] = 1'bX;
end 
// expected BPC[ 27 ]
initial
begin
	BPC_expected[27] = 1'bX;
end 
// expected BPC[ 26 ]
initial
begin
	BPC_expected[26] = 1'bX;
end 
// expected BPC[ 25 ]
initial
begin
	BPC_expected[25] = 1'bX;
end 
// expected BPC[ 24 ]
initial
begin
	BPC_expected[24] = 1'bX;
end 
// expected BPC[ 23 ]
initial
begin
	BPC_expected[23] = 1'bX;
end 
// expected BPC[ 22 ]
initial
begin
	BPC_expected[22] = 1'bX;
end 
// expected BPC[ 21 ]
initial
begin
	BPC_expected[21] = 1'bX;
end 
// expected BPC[ 20 ]
initial
begin
	BPC_expected[20] = 1'bX;
end 
// expected BPC[ 19 ]
initial
begin
	BPC_expected[19] = 1'bX;
end 
// expected BPC[ 18 ]
initial
begin
	BPC_expected[18] = 1'bX;
end 
// expected BPC[ 17 ]
initial
begin
	BPC_expected[17] = 1'bX;
end 
// expected BPC[ 16 ]
initial
begin
	BPC_expected[16] = 1'bX;
end 
// expected BPC[ 15 ]
initial
begin
	BPC_expected[15] = 1'bX;
end 
// expected BPC[ 14 ]
initial
begin
	BPC_expected[14] = 1'bX;
end 
// expected BPC[ 13 ]
initial
begin
	BPC_expected[13] = 1'bX;
end 
// expected BPC[ 12 ]
initial
begin
	BPC_expected[12] = 1'bX;
end 
// expected BPC[ 11 ]
initial
begin
	BPC_expected[11] = 1'bX;
end 
// expected BPC[ 10 ]
initial
begin
	BPC_expected[10] = 1'bX;
end 
// expected BPC[ 9 ]
initial
begin
	BPC_expected[9] = 1'bX;
end 
// expected BPC[ 8 ]
initial
begin
	BPC_expected[8] = 1'bX;
end 
// expected BPC[ 7 ]
initial
begin
	BPC_expected[7] = 1'bX;
end 
// expected BPC[ 6 ]
initial
begin
	BPC_expected[6] = 1'bX;
end 
// expected BPC[ 5 ]
initial
begin
	BPC_expected[5] = 1'bX;
end 
// expected BPC[ 4 ]
initial
begin
	BPC_expected[4] = 1'bX;
end 
// expected BPC[ 3 ]
initial
begin
	BPC_expected[3] = 1'bX;
end 
// expected BPC[ 2 ]
initial
begin
	BPC_expected[2] = 1'bX;
end 
// expected BPC[ 1 ]
initial
begin
	BPC_expected[1] = 1'bX;
end 
// expected BPC[ 0 ]
initial
begin
	BPC_expected[0] = 1'bX;
end 
// expected atR[ 31 ]
initial
begin
	atR_expected[31] = 1'bX;
end 
// expected atR[ 30 ]
initial
begin
	atR_expected[30] = 1'bX;
end 
// expected atR[ 29 ]
initial
begin
	atR_expected[29] = 1'bX;
end 
// expected atR[ 28 ]
initial
begin
	atR_expected[28] = 1'bX;
end 
// expected atR[ 27 ]
initial
begin
	atR_expected[27] = 1'bX;
end 
// expected atR[ 26 ]
initial
begin
	atR_expected[26] = 1'bX;
end 
// expected atR[ 25 ]
initial
begin
	atR_expected[25] = 1'bX;
end 
// expected atR[ 24 ]
initial
begin
	atR_expected[24] = 1'bX;
end 
// expected atR[ 23 ]
initial
begin
	atR_expected[23] = 1'bX;
end 
// expected atR[ 22 ]
initial
begin
	atR_expected[22] = 1'bX;
end 
// expected atR[ 21 ]
initial
begin
	atR_expected[21] = 1'bX;
end 
// expected atR[ 20 ]
initial
begin
	atR_expected[20] = 1'bX;
end 
// expected atR[ 19 ]
initial
begin
	atR_expected[19] = 1'bX;
end 
// expected atR[ 18 ]
initial
begin
	atR_expected[18] = 1'bX;
end 
// expected atR[ 17 ]
initial
begin
	atR_expected[17] = 1'bX;
end 
// expected atR[ 16 ]
initial
begin
	atR_expected[16] = 1'bX;
end 
// expected atR[ 15 ]
initial
begin
	atR_expected[15] = 1'bX;
end 
// expected atR[ 14 ]
initial
begin
	atR_expected[14] = 1'bX;
end 
// expected atR[ 13 ]
initial
begin
	atR_expected[13] = 1'bX;
end 
// expected atR[ 12 ]
initial
begin
	atR_expected[12] = 1'bX;
end 
// expected atR[ 11 ]
initial
begin
	atR_expected[11] = 1'bX;
end 
// expected atR[ 10 ]
initial
begin
	atR_expected[10] = 1'bX;
end 
// expected atR[ 9 ]
initial
begin
	atR_expected[9] = 1'bX;
end 
// expected atR[ 8 ]
initial
begin
	atR_expected[8] = 1'bX;
end 
// expected atR[ 7 ]
initial
begin
	atR_expected[7] = 1'bX;
end 
// expected atR[ 6 ]
initial
begin
	atR_expected[6] = 1'bX;
end 
// expected atR[ 5 ]
initial
begin
	atR_expected[5] = 1'bX;
end 
// expected atR[ 4 ]
initial
begin
	atR_expected[4] = 1'bX;
end 
// expected atR[ 3 ]
initial
begin
	atR_expected[3] = 1'bX;
end 
// expected atR[ 2 ]
initial
begin
	atR_expected[2] = 1'bX;
end 
// expected atR[ 1 ]
initial
begin
	atR_expected[1] = 1'bX;
end 
// expected atR[ 0 ]
initial
begin
	atR_expected[0] = 1'bX;
end 
// expected t0R[ 31 ]
initial
begin
	t0R_expected[31] = 1'bX;
end 
// expected t0R[ 30 ]
initial
begin
	t0R_expected[30] = 1'bX;
end 
// expected t0R[ 29 ]
initial
begin
	t0R_expected[29] = 1'bX;
end 
// expected t0R[ 28 ]
initial
begin
	t0R_expected[28] = 1'bX;
end 
// expected t0R[ 27 ]
initial
begin
	t0R_expected[27] = 1'bX;
end 
// expected t0R[ 26 ]
initial
begin
	t0R_expected[26] = 1'bX;
end 
// expected t0R[ 25 ]
initial
begin
	t0R_expected[25] = 1'bX;
end 
// expected t0R[ 24 ]
initial
begin
	t0R_expected[24] = 1'bX;
end 
// expected t0R[ 23 ]
initial
begin
	t0R_expected[23] = 1'bX;
end 
// expected t0R[ 22 ]
initial
begin
	t0R_expected[22] = 1'bX;
end 
// expected t0R[ 21 ]
initial
begin
	t0R_expected[21] = 1'bX;
end 
// expected t0R[ 20 ]
initial
begin
	t0R_expected[20] = 1'bX;
end 
// expected t0R[ 19 ]
initial
begin
	t0R_expected[19] = 1'bX;
end 
// expected t0R[ 18 ]
initial
begin
	t0R_expected[18] = 1'bX;
end 
// expected t0R[ 17 ]
initial
begin
	t0R_expected[17] = 1'bX;
end 
// expected t0R[ 16 ]
initial
begin
	t0R_expected[16] = 1'bX;
end 
// expected t0R[ 15 ]
initial
begin
	t0R_expected[15] = 1'bX;
end 
// expected t0R[ 14 ]
initial
begin
	t0R_expected[14] = 1'bX;
end 
// expected t0R[ 13 ]
initial
begin
	t0R_expected[13] = 1'bX;
end 
// expected t0R[ 12 ]
initial
begin
	t0R_expected[12] = 1'bX;
end 
// expected t0R[ 11 ]
initial
begin
	t0R_expected[11] = 1'bX;
end 
// expected t0R[ 10 ]
initial
begin
	t0R_expected[10] = 1'bX;
end 
// expected t0R[ 9 ]
initial
begin
	t0R_expected[9] = 1'bX;
end 
// expected t0R[ 8 ]
initial
begin
	t0R_expected[8] = 1'bX;
end 
// expected t0R[ 7 ]
initial
begin
	t0R_expected[7] = 1'bX;
end 
// expected t0R[ 6 ]
initial
begin
	t0R_expected[6] = 1'bX;
end 
// expected t0R[ 5 ]
initial
begin
	t0R_expected[5] = 1'bX;
end 
// expected t0R[ 4 ]
initial
begin
	t0R_expected[4] = 1'bX;
end 
// expected t0R[ 3 ]
initial
begin
	t0R_expected[3] = 1'bX;
end 
// expected t0R[ 2 ]
initial
begin
	t0R_expected[2] = 1'bX;
end 
// expected t0R[ 1 ]
initial
begin
	t0R_expected[1] = 1'bX;
end 
// expected t0R[ 0 ]
initial
begin
	t0R_expected[0] = 1'bX;
end 
// expected t1R[ 31 ]
initial
begin
	t1R_expected[31] = 1'bX;
end 
// expected t1R[ 30 ]
initial
begin
	t1R_expected[30] = 1'bX;
end 
// expected t1R[ 29 ]
initial
begin
	t1R_expected[29] = 1'bX;
end 
// expected t1R[ 28 ]
initial
begin
	t1R_expected[28] = 1'bX;
end 
// expected t1R[ 27 ]
initial
begin
	t1R_expected[27] = 1'bX;
end 
// expected t1R[ 26 ]
initial
begin
	t1R_expected[26] = 1'bX;
end 
// expected t1R[ 25 ]
initial
begin
	t1R_expected[25] = 1'bX;
end 
// expected t1R[ 24 ]
initial
begin
	t1R_expected[24] = 1'bX;
end 
// expected t1R[ 23 ]
initial
begin
	t1R_expected[23] = 1'bX;
end 
// expected t1R[ 22 ]
initial
begin
	t1R_expected[22] = 1'bX;
end 
// expected t1R[ 21 ]
initial
begin
	t1R_expected[21] = 1'bX;
end 
// expected t1R[ 20 ]
initial
begin
	t1R_expected[20] = 1'bX;
end 
// expected t1R[ 19 ]
initial
begin
	t1R_expected[19] = 1'bX;
end 
// expected t1R[ 18 ]
initial
begin
	t1R_expected[18] = 1'bX;
end 
// expected t1R[ 17 ]
initial
begin
	t1R_expected[17] = 1'bX;
end 
// expected t1R[ 16 ]
initial
begin
	t1R_expected[16] = 1'bX;
end 
// expected t1R[ 15 ]
initial
begin
	t1R_expected[15] = 1'bX;
end 
// expected t1R[ 14 ]
initial
begin
	t1R_expected[14] = 1'bX;
end 
// expected t1R[ 13 ]
initial
begin
	t1R_expected[13] = 1'bX;
end 
// expected t1R[ 12 ]
initial
begin
	t1R_expected[12] = 1'bX;
end 
// expected t1R[ 11 ]
initial
begin
	t1R_expected[11] = 1'bX;
end 
// expected t1R[ 10 ]
initial
begin
	t1R_expected[10] = 1'bX;
end 
// expected t1R[ 9 ]
initial
begin
	t1R_expected[9] = 1'bX;
end 
// expected t1R[ 8 ]
initial
begin
	t1R_expected[8] = 1'bX;
end 
// expected t1R[ 7 ]
initial
begin
	t1R_expected[7] = 1'bX;
end 
// expected t1R[ 6 ]
initial
begin
	t1R_expected[6] = 1'bX;
end 
// expected t1R[ 5 ]
initial
begin
	t1R_expected[5] = 1'bX;
end 
// expected t1R[ 4 ]
initial
begin
	t1R_expected[4] = 1'bX;
end 
// expected t1R[ 3 ]
initial
begin
	t1R_expected[3] = 1'bX;
end 
// expected t1R[ 2 ]
initial
begin
	t1R_expected[2] = 1'bX;
end 
// expected t1R[ 1 ]
initial
begin
	t1R_expected[1] = 1'bX;
end 
// expected t1R[ 0 ]
initial
begin
	t1R_expected[0] = 1'bX;
end 
// expected EXHIGH[ 31 ]
initial
begin
	EXHIGH_expected[31] = 1'bX;
end 
// expected EXHIGH[ 30 ]
initial
begin
	EXHIGH_expected[30] = 1'bX;
end 
// expected EXHIGH[ 29 ]
initial
begin
	EXHIGH_expected[29] = 1'bX;
end 
// expected EXHIGH[ 28 ]
initial
begin
	EXHIGH_expected[28] = 1'bX;
end 
// expected EXHIGH[ 27 ]
initial
begin
	EXHIGH_expected[27] = 1'bX;
end 
// expected EXHIGH[ 26 ]
initial
begin
	EXHIGH_expected[26] = 1'bX;
end 
// expected EXHIGH[ 25 ]
initial
begin
	EXHIGH_expected[25] = 1'bX;
end 
// expected EXHIGH[ 24 ]
initial
begin
	EXHIGH_expected[24] = 1'bX;
end 
// expected EXHIGH[ 23 ]
initial
begin
	EXHIGH_expected[23] = 1'bX;
end 
// expected EXHIGH[ 22 ]
initial
begin
	EXHIGH_expected[22] = 1'bX;
end 
// expected EXHIGH[ 21 ]
initial
begin
	EXHIGH_expected[21] = 1'bX;
end 
// expected EXHIGH[ 20 ]
initial
begin
	EXHIGH_expected[20] = 1'bX;
end 
// expected EXHIGH[ 19 ]
initial
begin
	EXHIGH_expected[19] = 1'bX;
end 
// expected EXHIGH[ 18 ]
initial
begin
	EXHIGH_expected[18] = 1'bX;
end 
// expected EXHIGH[ 17 ]
initial
begin
	EXHIGH_expected[17] = 1'bX;
end 
// expected EXHIGH[ 16 ]
initial
begin
	EXHIGH_expected[16] = 1'bX;
end 
// expected EXHIGH[ 15 ]
initial
begin
	EXHIGH_expected[15] = 1'bX;
end 
// expected EXHIGH[ 14 ]
initial
begin
	EXHIGH_expected[14] = 1'bX;
end 
// expected EXHIGH[ 13 ]
initial
begin
	EXHIGH_expected[13] = 1'bX;
end 
// expected EXHIGH[ 12 ]
initial
begin
	EXHIGH_expected[12] = 1'bX;
end 
// expected EXHIGH[ 11 ]
initial
begin
	EXHIGH_expected[11] = 1'bX;
end 
// expected EXHIGH[ 10 ]
initial
begin
	EXHIGH_expected[10] = 1'bX;
end 
// expected EXHIGH[ 9 ]
initial
begin
	EXHIGH_expected[9] = 1'bX;
end 
// expected EXHIGH[ 8 ]
initial
begin
	EXHIGH_expected[8] = 1'bX;
end 
// expected EXHIGH[ 7 ]
initial
begin
	EXHIGH_expected[7] = 1'bX;
end 
// expected EXHIGH[ 6 ]
initial
begin
	EXHIGH_expected[6] = 1'bX;
end 
// expected EXHIGH[ 5 ]
initial
begin
	EXHIGH_expected[5] = 1'bX;
end 
// expected EXHIGH[ 4 ]
initial
begin
	EXHIGH_expected[4] = 1'bX;
end 
// expected EXHIGH[ 3 ]
initial
begin
	EXHIGH_expected[3] = 1'bX;
end 
// expected EXHIGH[ 2 ]
initial
begin
	EXHIGH_expected[2] = 1'bX;
end 
// expected EXHIGH[ 1 ]
initial
begin
	EXHIGH_expected[1] = 1'bX;
end 
// expected EXHIGH[ 0 ]
initial
begin
	EXHIGH_expected[0] = 1'bX;
end 
// expected EXLOW[ 31 ]
initial
begin
	EXLOW_expected[31] = 1'bX;
end 
// expected EXLOW[ 30 ]
initial
begin
	EXLOW_expected[30] = 1'bX;
end 
// expected EXLOW[ 29 ]
initial
begin
	EXLOW_expected[29] = 1'bX;
end 
// expected EXLOW[ 28 ]
initial
begin
	EXLOW_expected[28] = 1'bX;
end 
// expected EXLOW[ 27 ]
initial
begin
	EXLOW_expected[27] = 1'bX;
end 
// expected EXLOW[ 26 ]
initial
begin
	EXLOW_expected[26] = 1'bX;
end 
// expected EXLOW[ 25 ]
initial
begin
	EXLOW_expected[25] = 1'bX;
end 
// expected EXLOW[ 24 ]
initial
begin
	EXLOW_expected[24] = 1'bX;
end 
// expected EXLOW[ 23 ]
initial
begin
	EXLOW_expected[23] = 1'bX;
end 
// expected EXLOW[ 22 ]
initial
begin
	EXLOW_expected[22] = 1'bX;
end 
// expected EXLOW[ 21 ]
initial
begin
	EXLOW_expected[21] = 1'bX;
end 
// expected EXLOW[ 20 ]
initial
begin
	EXLOW_expected[20] = 1'bX;
end 
// expected EXLOW[ 19 ]
initial
begin
	EXLOW_expected[19] = 1'bX;
end 
// expected EXLOW[ 18 ]
initial
begin
	EXLOW_expected[18] = 1'bX;
end 
// expected EXLOW[ 17 ]
initial
begin
	EXLOW_expected[17] = 1'bX;
end 
// expected EXLOW[ 16 ]
initial
begin
	EXLOW_expected[16] = 1'bX;
end 
// expected EXLOW[ 15 ]
initial
begin
	EXLOW_expected[15] = 1'bX;
end 
// expected EXLOW[ 14 ]
initial
begin
	EXLOW_expected[14] = 1'bX;
end 
// expected EXLOW[ 13 ]
initial
begin
	EXLOW_expected[13] = 1'bX;
end 
// expected EXLOW[ 12 ]
initial
begin
	EXLOW_expected[12] = 1'bX;
end 
// expected EXLOW[ 11 ]
initial
begin
	EXLOW_expected[11] = 1'bX;
end 
// expected EXLOW[ 10 ]
initial
begin
	EXLOW_expected[10] = 1'bX;
end 
// expected EXLOW[ 9 ]
initial
begin
	EXLOW_expected[9] = 1'bX;
end 
// expected EXLOW[ 8 ]
initial
begin
	EXLOW_expected[8] = 1'bX;
end 
// expected EXLOW[ 7 ]
initial
begin
	EXLOW_expected[7] = 1'bX;
end 
// expected EXLOW[ 6 ]
initial
begin
	EXLOW_expected[6] = 1'bX;
end 
// expected EXLOW[ 5 ]
initial
begin
	EXLOW_expected[5] = 1'bX;
end 
// expected EXLOW[ 4 ]
initial
begin
	EXLOW_expected[4] = 1'bX;
end 
// expected EXLOW[ 3 ]
initial
begin
	EXLOW_expected[3] = 1'bX;
end 
// expected EXLOW[ 2 ]
initial
begin
	EXLOW_expected[2] = 1'bX;
end 
// expected EXLOW[ 1 ]
initial
begin
	EXLOW_expected[1] = 1'bX;
end 
// expected EXLOW[ 0 ]
initial
begin
	EXLOW_expected[0] = 1'bX;
end 
// expected RegA[ 31 ]
initial
begin
	RegA_expected[31] = 1'bX;
end 
// expected RegA[ 30 ]
initial
begin
	RegA_expected[30] = 1'bX;
end 
// expected RegA[ 29 ]
initial
begin
	RegA_expected[29] = 1'bX;
end 
// expected RegA[ 28 ]
initial
begin
	RegA_expected[28] = 1'bX;
end 
// expected RegA[ 27 ]
initial
begin
	RegA_expected[27] = 1'bX;
end 
// expected RegA[ 26 ]
initial
begin
	RegA_expected[26] = 1'bX;
end 
// expected RegA[ 25 ]
initial
begin
	RegA_expected[25] = 1'bX;
end 
// expected RegA[ 24 ]
initial
begin
	RegA_expected[24] = 1'bX;
end 
// expected RegA[ 23 ]
initial
begin
	RegA_expected[23] = 1'bX;
end 
// expected RegA[ 22 ]
initial
begin
	RegA_expected[22] = 1'bX;
end 
// expected RegA[ 21 ]
initial
begin
	RegA_expected[21] = 1'bX;
end 
// expected RegA[ 20 ]
initial
begin
	RegA_expected[20] = 1'bX;
end 
// expected RegA[ 19 ]
initial
begin
	RegA_expected[19] = 1'bX;
end 
// expected RegA[ 18 ]
initial
begin
	RegA_expected[18] = 1'bX;
end 
// expected RegA[ 17 ]
initial
begin
	RegA_expected[17] = 1'bX;
end 
// expected RegA[ 16 ]
initial
begin
	RegA_expected[16] = 1'bX;
end 
// expected RegA[ 15 ]
initial
begin
	RegA_expected[15] = 1'bX;
end 
// expected RegA[ 14 ]
initial
begin
	RegA_expected[14] = 1'bX;
end 
// expected RegA[ 13 ]
initial
begin
	RegA_expected[13] = 1'bX;
end 
// expected RegA[ 12 ]
initial
begin
	RegA_expected[12] = 1'bX;
end 
// expected RegA[ 11 ]
initial
begin
	RegA_expected[11] = 1'bX;
end 
// expected RegA[ 10 ]
initial
begin
	RegA_expected[10] = 1'bX;
end 
// expected RegA[ 9 ]
initial
begin
	RegA_expected[9] = 1'bX;
end 
// expected RegA[ 8 ]
initial
begin
	RegA_expected[8] = 1'bX;
end 
// expected RegA[ 7 ]
initial
begin
	RegA_expected[7] = 1'bX;
end 
// expected RegA[ 6 ]
initial
begin
	RegA_expected[6] = 1'bX;
end 
// expected RegA[ 5 ]
initial
begin
	RegA_expected[5] = 1'bX;
end 
// expected RegA[ 4 ]
initial
begin
	RegA_expected[4] = 1'bX;
end 
// expected RegA[ 3 ]
initial
begin
	RegA_expected[3] = 1'bX;
end 
// expected RegA[ 2 ]
initial
begin
	RegA_expected[2] = 1'bX;
end 
// expected RegA[ 1 ]
initial
begin
	RegA_expected[1] = 1'bX;
end 
// expected RegA[ 0 ]
initial
begin
	RegA_expected[0] = 1'bX;
end 
// expected EXULAA[ 31 ]
initial
begin
	EXULAA_expected[31] = 1'bX;
end 
// expected EXULAA[ 30 ]
initial
begin
	EXULAA_expected[30] = 1'bX;
end 
// expected EXULAA[ 29 ]
initial
begin
	EXULAA_expected[29] = 1'bX;
end 
// expected EXULAA[ 28 ]
initial
begin
	EXULAA_expected[28] = 1'bX;
end 
// expected EXULAA[ 27 ]
initial
begin
	EXULAA_expected[27] = 1'bX;
end 
// expected EXULAA[ 26 ]
initial
begin
	EXULAA_expected[26] = 1'bX;
end 
// expected EXULAA[ 25 ]
initial
begin
	EXULAA_expected[25] = 1'bX;
end 
// expected EXULAA[ 24 ]
initial
begin
	EXULAA_expected[24] = 1'bX;
end 
// expected EXULAA[ 23 ]
initial
begin
	EXULAA_expected[23] = 1'bX;
end 
// expected EXULAA[ 22 ]
initial
begin
	EXULAA_expected[22] = 1'bX;
end 
// expected EXULAA[ 21 ]
initial
begin
	EXULAA_expected[21] = 1'bX;
end 
// expected EXULAA[ 20 ]
initial
begin
	EXULAA_expected[20] = 1'bX;
end 
// expected EXULAA[ 19 ]
initial
begin
	EXULAA_expected[19] = 1'bX;
end 
// expected EXULAA[ 18 ]
initial
begin
	EXULAA_expected[18] = 1'bX;
end 
// expected EXULAA[ 17 ]
initial
begin
	EXULAA_expected[17] = 1'bX;
end 
// expected EXULAA[ 16 ]
initial
begin
	EXULAA_expected[16] = 1'bX;
end 
// expected EXULAA[ 15 ]
initial
begin
	EXULAA_expected[15] = 1'bX;
end 
// expected EXULAA[ 14 ]
initial
begin
	EXULAA_expected[14] = 1'bX;
end 
// expected EXULAA[ 13 ]
initial
begin
	EXULAA_expected[13] = 1'bX;
end 
// expected EXULAA[ 12 ]
initial
begin
	EXULAA_expected[12] = 1'bX;
end 
// expected EXULAA[ 11 ]
initial
begin
	EXULAA_expected[11] = 1'bX;
end 
// expected EXULAA[ 10 ]
initial
begin
	EXULAA_expected[10] = 1'bX;
end 
// expected EXULAA[ 9 ]
initial
begin
	EXULAA_expected[9] = 1'bX;
end 
// expected EXULAA[ 8 ]
initial
begin
	EXULAA_expected[8] = 1'bX;
end 
// expected EXULAA[ 7 ]
initial
begin
	EXULAA_expected[7] = 1'bX;
end 
// expected EXULAA[ 6 ]
initial
begin
	EXULAA_expected[6] = 1'bX;
end 
// expected EXULAA[ 5 ]
initial
begin
	EXULAA_expected[5] = 1'bX;
end 
// expected EXULAA[ 4 ]
initial
begin
	EXULAA_expected[4] = 1'bX;
end 
// expected EXULAA[ 3 ]
initial
begin
	EXULAA_expected[3] = 1'bX;
end 
// expected EXULAA[ 2 ]
initial
begin
	EXULAA_expected[2] = 1'bX;
end 
// expected EXULAA[ 1 ]
initial
begin
	EXULAA_expected[1] = 1'bX;
end 
// expected EXULAA[ 0 ]
initial
begin
	EXULAA_expected[0] = 1'bX;
end 
// expected EXULAB[ 31 ]
initial
begin
	EXULAB_expected[31] = 1'bX;
end 
// expected EXULAB[ 30 ]
initial
begin
	EXULAB_expected[30] = 1'bX;
end 
// expected EXULAB[ 29 ]
initial
begin
	EXULAB_expected[29] = 1'bX;
end 
// expected EXULAB[ 28 ]
initial
begin
	EXULAB_expected[28] = 1'bX;
end 
// expected EXULAB[ 27 ]
initial
begin
	EXULAB_expected[27] = 1'bX;
end 
// expected EXULAB[ 26 ]
initial
begin
	EXULAB_expected[26] = 1'bX;
end 
// expected EXULAB[ 25 ]
initial
begin
	EXULAB_expected[25] = 1'bX;
end 
// expected EXULAB[ 24 ]
initial
begin
	EXULAB_expected[24] = 1'bX;
end 
// expected EXULAB[ 23 ]
initial
begin
	EXULAB_expected[23] = 1'bX;
end 
// expected EXULAB[ 22 ]
initial
begin
	EXULAB_expected[22] = 1'bX;
end 
// expected EXULAB[ 21 ]
initial
begin
	EXULAB_expected[21] = 1'bX;
end 
// expected EXULAB[ 20 ]
initial
begin
	EXULAB_expected[20] = 1'bX;
end 
// expected EXULAB[ 19 ]
initial
begin
	EXULAB_expected[19] = 1'bX;
end 
// expected EXULAB[ 18 ]
initial
begin
	EXULAB_expected[18] = 1'bX;
end 
// expected EXULAB[ 17 ]
initial
begin
	EXULAB_expected[17] = 1'bX;
end 
// expected EXULAB[ 16 ]
initial
begin
	EXULAB_expected[16] = 1'bX;
end 
// expected EXULAB[ 15 ]
initial
begin
	EXULAB_expected[15] = 1'bX;
end 
// expected EXULAB[ 14 ]
initial
begin
	EXULAB_expected[14] = 1'bX;
end 
// expected EXULAB[ 13 ]
initial
begin
	EXULAB_expected[13] = 1'bX;
end 
// expected EXULAB[ 12 ]
initial
begin
	EXULAB_expected[12] = 1'bX;
end 
// expected EXULAB[ 11 ]
initial
begin
	EXULAB_expected[11] = 1'bX;
end 
// expected EXULAB[ 10 ]
initial
begin
	EXULAB_expected[10] = 1'bX;
end 
// expected EXULAB[ 9 ]
initial
begin
	EXULAB_expected[9] = 1'bX;
end 
// expected EXULAB[ 8 ]
initial
begin
	EXULAB_expected[8] = 1'bX;
end 
// expected EXULAB[ 7 ]
initial
begin
	EXULAB_expected[7] = 1'bX;
end 
// expected EXULAB[ 6 ]
initial
begin
	EXULAB_expected[6] = 1'bX;
end 
// expected EXULAB[ 5 ]
initial
begin
	EXULAB_expected[5] = 1'bX;
end 
// expected EXULAB[ 4 ]
initial
begin
	EXULAB_expected[4] = 1'bX;
end 
// expected EXULAB[ 3 ]
initial
begin
	EXULAB_expected[3] = 1'bX;
end 
// expected EXULAB[ 2 ]
initial
begin
	EXULAB_expected[2] = 1'bX;
end 
// expected EXULAB[ 1 ]
initial
begin
	EXULAB_expected[1] = 1'bX;
end 
// expected EXULAB[ 0 ]
initial
begin
	EXULAB_expected[0] = 1'bX;
end 
// expected outALU[ 31 ]
initial
begin
	outALU_expected[31] = 1'bX;
end 
// expected outALU[ 30 ]
initial
begin
	outALU_expected[30] = 1'bX;
end 
// expected outALU[ 29 ]
initial
begin
	outALU_expected[29] = 1'bX;
end 
// expected outALU[ 28 ]
initial
begin
	outALU_expected[28] = 1'bX;
end 
// expected outALU[ 27 ]
initial
begin
	outALU_expected[27] = 1'bX;
end 
// expected outALU[ 26 ]
initial
begin
	outALU_expected[26] = 1'bX;
end 
// expected outALU[ 25 ]
initial
begin
	outALU_expected[25] = 1'bX;
end 
// expected outALU[ 24 ]
initial
begin
	outALU_expected[24] = 1'bX;
end 
// expected outALU[ 23 ]
initial
begin
	outALU_expected[23] = 1'bX;
end 
// expected outALU[ 22 ]
initial
begin
	outALU_expected[22] = 1'bX;
end 
// expected outALU[ 21 ]
initial
begin
	outALU_expected[21] = 1'bX;
end 
// expected outALU[ 20 ]
initial
begin
	outALU_expected[20] = 1'bX;
end 
// expected outALU[ 19 ]
initial
begin
	outALU_expected[19] = 1'bX;
end 
// expected outALU[ 18 ]
initial
begin
	outALU_expected[18] = 1'bX;
end 
// expected outALU[ 17 ]
initial
begin
	outALU_expected[17] = 1'bX;
end 
// expected outALU[ 16 ]
initial
begin
	outALU_expected[16] = 1'bX;
end 
// expected outALU[ 15 ]
initial
begin
	outALU_expected[15] = 1'bX;
end 
// expected outALU[ 14 ]
initial
begin
	outALU_expected[14] = 1'bX;
end 
// expected outALU[ 13 ]
initial
begin
	outALU_expected[13] = 1'bX;
end 
// expected outALU[ 12 ]
initial
begin
	outALU_expected[12] = 1'bX;
end 
// expected outALU[ 11 ]
initial
begin
	outALU_expected[11] = 1'bX;
end 
// expected outALU[ 10 ]
initial
begin
	outALU_expected[10] = 1'bX;
end 
// expected outALU[ 9 ]
initial
begin
	outALU_expected[9] = 1'bX;
end 
// expected outALU[ 8 ]
initial
begin
	outALU_expected[8] = 1'bX;
end 
// expected outALU[ 7 ]
initial
begin
	outALU_expected[7] = 1'bX;
end 
// expected outALU[ 6 ]
initial
begin
	outALU_expected[6] = 1'bX;
end 
// expected outALU[ 5 ]
initial
begin
	outALU_expected[5] = 1'bX;
end 
// expected outALU[ 4 ]
initial
begin
	outALU_expected[4] = 1'bX;
end 
// expected outALU[ 3 ]
initial
begin
	outALU_expected[3] = 1'bX;
end 
// expected outALU[ 2 ]
initial
begin
	outALU_expected[2] = 1'bX;
end 
// expected outALU[ 1 ]
initial
begin
	outALU_expected[1] = 1'bX;
end 
// expected outALU[ 0 ]
initial
begin
	outALU_expected[0] = 1'bX;
end 
// expected MEMOutALU[ 31 ]
initial
begin
	MEMOutALU_expected[31] = 1'bX;
end 
// expected MEMOutALU[ 30 ]
initial
begin
	MEMOutALU_expected[30] = 1'bX;
end 
// expected MEMOutALU[ 29 ]
initial
begin
	MEMOutALU_expected[29] = 1'bX;
end 
// expected MEMOutALU[ 28 ]
initial
begin
	MEMOutALU_expected[28] = 1'bX;
end 
// expected MEMOutALU[ 27 ]
initial
begin
	MEMOutALU_expected[27] = 1'bX;
end 
// expected MEMOutALU[ 26 ]
initial
begin
	MEMOutALU_expected[26] = 1'bX;
end 
// expected MEMOutALU[ 25 ]
initial
begin
	MEMOutALU_expected[25] = 1'bX;
end 
// expected MEMOutALU[ 24 ]
initial
begin
	MEMOutALU_expected[24] = 1'bX;
end 
// expected MEMOutALU[ 23 ]
initial
begin
	MEMOutALU_expected[23] = 1'bX;
end 
// expected MEMOutALU[ 22 ]
initial
begin
	MEMOutALU_expected[22] = 1'bX;
end 
// expected MEMOutALU[ 21 ]
initial
begin
	MEMOutALU_expected[21] = 1'bX;
end 
// expected MEMOutALU[ 20 ]
initial
begin
	MEMOutALU_expected[20] = 1'bX;
end 
// expected MEMOutALU[ 19 ]
initial
begin
	MEMOutALU_expected[19] = 1'bX;
end 
// expected MEMOutALU[ 18 ]
initial
begin
	MEMOutALU_expected[18] = 1'bX;
end 
// expected MEMOutALU[ 17 ]
initial
begin
	MEMOutALU_expected[17] = 1'bX;
end 
// expected MEMOutALU[ 16 ]
initial
begin
	MEMOutALU_expected[16] = 1'bX;
end 
// expected MEMOutALU[ 15 ]
initial
begin
	MEMOutALU_expected[15] = 1'bX;
end 
// expected MEMOutALU[ 14 ]
initial
begin
	MEMOutALU_expected[14] = 1'bX;
end 
// expected MEMOutALU[ 13 ]
initial
begin
	MEMOutALU_expected[13] = 1'bX;
end 
// expected MEMOutALU[ 12 ]
initial
begin
	MEMOutALU_expected[12] = 1'bX;
end 
// expected MEMOutALU[ 11 ]
initial
begin
	MEMOutALU_expected[11] = 1'bX;
end 
// expected MEMOutALU[ 10 ]
initial
begin
	MEMOutALU_expected[10] = 1'bX;
end 
// expected MEMOutALU[ 9 ]
initial
begin
	MEMOutALU_expected[9] = 1'bX;
end 
// expected MEMOutALU[ 8 ]
initial
begin
	MEMOutALU_expected[8] = 1'bX;
end 
// expected MEMOutALU[ 7 ]
initial
begin
	MEMOutALU_expected[7] = 1'bX;
end 
// expected MEMOutALU[ 6 ]
initial
begin
	MEMOutALU_expected[6] = 1'bX;
end 
// expected MEMOutALU[ 5 ]
initial
begin
	MEMOutALU_expected[5] = 1'bX;
end 
// expected MEMOutALU[ 4 ]
initial
begin
	MEMOutALU_expected[4] = 1'bX;
end 
// expected MEMOutALU[ 3 ]
initial
begin
	MEMOutALU_expected[3] = 1'bX;
end 
// expected MEMOutALU[ 2 ]
initial
begin
	MEMOutALU_expected[2] = 1'bX;
end 
// expected MEMOutALU[ 1 ]
initial
begin
	MEMOutALU_expected[1] = 1'bX;
end 
// expected MEMOutALU[ 0 ]
initial
begin
	MEMOutALU_expected[0] = 1'bX;
end 
// expected MemReadValue[ 31 ]
initial
begin
	MemReadValue_expected[31] = 1'bX;
end 
// expected MemReadValue[ 30 ]
initial
begin
	MemReadValue_expected[30] = 1'bX;
end 
// expected MemReadValue[ 29 ]
initial
begin
	MemReadValue_expected[29] = 1'bX;
end 
// expected MemReadValue[ 28 ]
initial
begin
	MemReadValue_expected[28] = 1'bX;
end 
// expected MemReadValue[ 27 ]
initial
begin
	MemReadValue_expected[27] = 1'bX;
end 
// expected MemReadValue[ 26 ]
initial
begin
	MemReadValue_expected[26] = 1'bX;
end 
// expected MemReadValue[ 25 ]
initial
begin
	MemReadValue_expected[25] = 1'bX;
end 
// expected MemReadValue[ 24 ]
initial
begin
	MemReadValue_expected[24] = 1'bX;
end 
// expected MemReadValue[ 23 ]
initial
begin
	MemReadValue_expected[23] = 1'bX;
end 
// expected MemReadValue[ 22 ]
initial
begin
	MemReadValue_expected[22] = 1'bX;
end 
// expected MemReadValue[ 21 ]
initial
begin
	MemReadValue_expected[21] = 1'bX;
end 
// expected MemReadValue[ 20 ]
initial
begin
	MemReadValue_expected[20] = 1'bX;
end 
// expected MemReadValue[ 19 ]
initial
begin
	MemReadValue_expected[19] = 1'bX;
end 
// expected MemReadValue[ 18 ]
initial
begin
	MemReadValue_expected[18] = 1'bX;
end 
// expected MemReadValue[ 17 ]
initial
begin
	MemReadValue_expected[17] = 1'bX;
end 
// expected MemReadValue[ 16 ]
initial
begin
	MemReadValue_expected[16] = 1'bX;
end 
// expected MemReadValue[ 15 ]
initial
begin
	MemReadValue_expected[15] = 1'bX;
end 
// expected MemReadValue[ 14 ]
initial
begin
	MemReadValue_expected[14] = 1'bX;
end 
// expected MemReadValue[ 13 ]
initial
begin
	MemReadValue_expected[13] = 1'bX;
end 
// expected MemReadValue[ 12 ]
initial
begin
	MemReadValue_expected[12] = 1'bX;
end 
// expected MemReadValue[ 11 ]
initial
begin
	MemReadValue_expected[11] = 1'bX;
end 
// expected MemReadValue[ 10 ]
initial
begin
	MemReadValue_expected[10] = 1'bX;
end 
// expected MemReadValue[ 9 ]
initial
begin
	MemReadValue_expected[9] = 1'bX;
end 
// expected MemReadValue[ 8 ]
initial
begin
	MemReadValue_expected[8] = 1'bX;
end 
// expected MemReadValue[ 7 ]
initial
begin
	MemReadValue_expected[7] = 1'bX;
end 
// expected MemReadValue[ 6 ]
initial
begin
	MemReadValue_expected[6] = 1'bX;
end 
// expected MemReadValue[ 5 ]
initial
begin
	MemReadValue_expected[5] = 1'bX;
end 
// expected MemReadValue[ 4 ]
initial
begin
	MemReadValue_expected[4] = 1'bX;
end 
// expected MemReadValue[ 3 ]
initial
begin
	MemReadValue_expected[3] = 1'bX;
end 
// expected MemReadValue[ 2 ]
initial
begin
	MemReadValue_expected[2] = 1'bX;
end 
// expected MemReadValue[ 1 ]
initial
begin
	MemReadValue_expected[1] = 1'bX;
end 
// expected MemReadValue[ 0 ]
initial
begin
	MemReadValue_expected[0] = 1'bX;
end 
// expected WBDadoDeRetorno[ 31 ]
initial
begin
	WBDadoDeRetorno_expected[31] = 1'bX;
end 
// expected WBDadoDeRetorno[ 30 ]
initial
begin
	WBDadoDeRetorno_expected[30] = 1'bX;
end 
// expected WBDadoDeRetorno[ 29 ]
initial
begin
	WBDadoDeRetorno_expected[29] = 1'bX;
end 
// expected WBDadoDeRetorno[ 28 ]
initial
begin
	WBDadoDeRetorno_expected[28] = 1'bX;
end 
// expected WBDadoDeRetorno[ 27 ]
initial
begin
	WBDadoDeRetorno_expected[27] = 1'bX;
end 
// expected WBDadoDeRetorno[ 26 ]
initial
begin
	WBDadoDeRetorno_expected[26] = 1'bX;
end 
// expected WBDadoDeRetorno[ 25 ]
initial
begin
	WBDadoDeRetorno_expected[25] = 1'bX;
end 
// expected WBDadoDeRetorno[ 24 ]
initial
begin
	WBDadoDeRetorno_expected[24] = 1'bX;
end 
// expected WBDadoDeRetorno[ 23 ]
initial
begin
	WBDadoDeRetorno_expected[23] = 1'bX;
end 
// expected WBDadoDeRetorno[ 22 ]
initial
begin
	WBDadoDeRetorno_expected[22] = 1'bX;
end 
// expected WBDadoDeRetorno[ 21 ]
initial
begin
	WBDadoDeRetorno_expected[21] = 1'bX;
end 
// expected WBDadoDeRetorno[ 20 ]
initial
begin
	WBDadoDeRetorno_expected[20] = 1'bX;
end 
// expected WBDadoDeRetorno[ 19 ]
initial
begin
	WBDadoDeRetorno_expected[19] = 1'bX;
end 
// expected WBDadoDeRetorno[ 18 ]
initial
begin
	WBDadoDeRetorno_expected[18] = 1'bX;
end 
// expected WBDadoDeRetorno[ 17 ]
initial
begin
	WBDadoDeRetorno_expected[17] = 1'bX;
end 
// expected WBDadoDeRetorno[ 16 ]
initial
begin
	WBDadoDeRetorno_expected[16] = 1'bX;
end 
// expected WBDadoDeRetorno[ 15 ]
initial
begin
	WBDadoDeRetorno_expected[15] = 1'bX;
end 
// expected WBDadoDeRetorno[ 14 ]
initial
begin
	WBDadoDeRetorno_expected[14] = 1'bX;
end 
// expected WBDadoDeRetorno[ 13 ]
initial
begin
	WBDadoDeRetorno_expected[13] = 1'bX;
end 
// expected WBDadoDeRetorno[ 12 ]
initial
begin
	WBDadoDeRetorno_expected[12] = 1'bX;
end 
// expected WBDadoDeRetorno[ 11 ]
initial
begin
	WBDadoDeRetorno_expected[11] = 1'bX;
end 
// expected WBDadoDeRetorno[ 10 ]
initial
begin
	WBDadoDeRetorno_expected[10] = 1'bX;
end 
// expected WBDadoDeRetorno[ 9 ]
initial
begin
	WBDadoDeRetorno_expected[9] = 1'bX;
end 
// expected WBDadoDeRetorno[ 8 ]
initial
begin
	WBDadoDeRetorno_expected[8] = 1'bX;
end 
// expected WBDadoDeRetorno[ 7 ]
initial
begin
	WBDadoDeRetorno_expected[7] = 1'bX;
end 
// expected WBDadoDeRetorno[ 6 ]
initial
begin
	WBDadoDeRetorno_expected[6] = 1'bX;
end 
// expected WBDadoDeRetorno[ 5 ]
initial
begin
	WBDadoDeRetorno_expected[5] = 1'bX;
end 
// expected WBDadoDeRetorno[ 4 ]
initial
begin
	WBDadoDeRetorno_expected[4] = 1'bX;
end 
// expected WBDadoDeRetorno[ 3 ]
initial
begin
	WBDadoDeRetorno_expected[3] = 1'bX;
end 
// expected WBDadoDeRetorno[ 2 ]
initial
begin
	WBDadoDeRetorno_expected[2] = 1'bX;
end 
// expected WBDadoDeRetorno[ 1 ]
initial
begin
	WBDadoDeRetorno_expected[1] = 1'bX;
end 
// expected WBDadoDeRetorno[ 0 ]
initial
begin
	WBDadoDeRetorno_expected[0] = 1'bX;
end 
// expected EXopALU[ 2 ]
initial
begin
	EXopALU_expected[2] = 1'bX;
end 
// expected EXopALU[ 1 ]
initial
begin
	EXopALU_expected[1] = 1'bX;
end 
// expected EXopALU[ 0 ]
initial
begin
	EXopALU_expected[0] = 1'bX;
end 
// expected ALUOperation[ 3 ]
initial
begin
	ALUOperation_expected[3] = 1'bX;
end 
// expected ALUOperation[ 2 ]
initial
begin
	ALUOperation_expected[2] = 1'bX;
end 
// expected ALUOperation[ 1 ]
initial
begin
	ALUOperation_expected[1] = 1'bX;
end 
// expected ALUOperation[ 0 ]
initial
begin
	ALUOperation_expected[0] = 1'bX;
end 
// expected TreatedForwardB[ 1 ]
initial
begin
	TreatedForwardB_expected[1] = 1'bX;
end 
// expected TreatedForwardB[ 0 ]
initial
begin
	TreatedForwardB_expected[0] = 1'bX;
end 

// expected Stall
initial
begin
	Stall_expected = 1'bX;
end 

// expected JAL
initial
begin
	JAL_expected = 1'bX;
end 

// expected WBMemPraReg
initial
begin
	WBMemPraReg_expected = 1'bX;
end 
// generate trigger
always @(ALUOperation_expected or ALUOperation or atR_expected or atR or BInstruction_expected or BInstruction or BPC_expected or BPC or EXBranch_expected or EXBranch or EXHIGH_expected or EXHIGH or EXLOW_expected or EXLOW or EXopALU_expected or EXopALU or EXULAA_expected or EXULAA or EXULAB_expected or EXULAB or Flush_expected or Flush or ForwardA_expected or ForwardA or ForwardB_expected or ForwardB or Instruction_expected or Instruction or JAL_expected or JAL or Jump_expected or Jump or MEMBranch_expected or MEMBranch or MEMOutALU_expected or MEMOutALU or MemReadValue_expected or MemReadValue or notOpSignal_expected or notOpSignal or OrigPC_expected or OrigPC or outALU_expected or outALU or Overflow_expected or Overflow or RegA_expected or RegA or s0_expected or s0 or s1_expected or s1 or s2_expected or s2 or Stall_expected or Stall or t0R_expected or t0R or t1R_expected or t1R or TreatedForwardB_expected or TreatedForwardB or WBDadoDeRetorno_expected or WBDadoDeRetorno or WBMemPraReg_expected or WBMemPraReg or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOperation = %b | expected atR = %b | expected BInstruction = %b | expected BPC = %b | expected EXBranch = %b | expected EXHIGH = %b | expected EXLOW = %b | expected EXopALU = %b | expected EXULAA = %b | expected EXULAB = %b | expected Flush = %b | expected ForwardA = %b | expected ForwardB = %b | expected Instruction = %b | expected JAL = %b | expected Jump = %b | expected MEMBranch = %b | expected MEMOutALU = %b | expected MemReadValue = %b | expected notOpSignal = %b | expected OrigPC = %b | expected outALU = %b | expected Overflow = %b | expected RegA = %b | expected s0 = %b | expected s1 = %b | expected s2 = %b | expected Stall = %b | expected t0R = %b | expected t1R = %b | expected TreatedForwardB = %b | expected WBDadoDeRetorno = %b | expected WBMemPraReg = %b | expected Zero = %b | ",ALUOperation_expected_prev,atR_expected_prev,BInstruction_expected_prev,BPC_expected_prev,EXBranch_expected_prev,EXHIGH_expected_prev,EXLOW_expected_prev,EXopALU_expected_prev,EXULAA_expected_prev,EXULAB_expected_prev,Flush_expected_prev,ForwardA_expected_prev,ForwardB_expected_prev,Instruction_expected_prev,JAL_expected_prev,Jump_expected_prev,MEMBranch_expected_prev,MEMOutALU_expected_prev,MemReadValue_expected_prev,notOpSignal_expected_prev,OrigPC_expected_prev,outALU_expected_prev,Overflow_expected_prev,RegA_expected_prev,s0_expected_prev,s1_expected_prev,s2_expected_prev,Stall_expected_prev,t0R_expected_prev,t1R_expected_prev,TreatedForwardB_expected_prev,WBDadoDeRetorno_expected_prev,WBMemPraReg_expected_prev,Zero_expected_prev);
	$display("| real ALUOperation = %b | real atR = %b | real BInstruction = %b | real BPC = %b | real EXBranch = %b | real EXHIGH = %b | real EXLOW = %b | real EXopALU = %b | real EXULAA = %b | real EXULAB = %b | real Flush = %b | real ForwardA = %b | real ForwardB = %b | real Instruction = %b | real JAL = %b | real Jump = %b | real MEMBranch = %b | real MEMOutALU = %b | real MemReadValue = %b | real notOpSignal = %b | real OrigPC = %b | real outALU = %b | real Overflow = %b | real RegA = %b | real s0 = %b | real s1 = %b | real s2 = %b | real Stall = %b | real t0R = %b | real t1R = %b | real TreatedForwardB = %b | real WBDadoDeRetorno = %b | real WBMemPraReg = %b | real Zero = %b | ",ALUOperation_prev,atR_prev,BInstruction_prev,BPC_prev,EXBranch_prev,EXHIGH_prev,EXLOW_prev,EXopALU_prev,EXULAA_prev,EXULAB_prev,Flush_prev,ForwardA_prev,ForwardB_prev,Instruction_prev,JAL_prev,Jump_prev,MEMBranch_prev,MEMOutALU_prev,MemReadValue_prev,notOpSignal_prev,OrigPC_prev,outALU_prev,Overflow_prev,RegA_prev,s0_prev,s1_prev,s2_prev,Stall_prev,t0R_prev,t1R_prev,TreatedForwardB_prev,WBDadoDeRetorno_prev,WBMemPraReg_prev,Zero_prev);
`endif
	if (
		( ALUOperation_expected_prev[0] !== 1'bx ) && ( ALUOperation_prev[0] !== ALUOperation_expected_prev[0] )
		&& ((ALUOperation_expected_prev[0] !== last_ALUOperation_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[0] = ALUOperation_expected_prev[0];
	end
	if (
		( ALUOperation_expected_prev[1] !== 1'bx ) && ( ALUOperation_prev[1] !== ALUOperation_expected_prev[1] )
		&& ((ALUOperation_expected_prev[1] !== last_ALUOperation_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[1] = ALUOperation_expected_prev[1];
	end
	if (
		( ALUOperation_expected_prev[2] !== 1'bx ) && ( ALUOperation_prev[2] !== ALUOperation_expected_prev[2] )
		&& ((ALUOperation_expected_prev[2] !== last_ALUOperation_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[2] = ALUOperation_expected_prev[2];
	end
	if (
		( ALUOperation_expected_prev[3] !== 1'bx ) && ( ALUOperation_prev[3] !== ALUOperation_expected_prev[3] )
		&& ((ALUOperation_expected_prev[3] !== last_ALUOperation_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[3] = ALUOperation_expected_prev[3];
	end
	if (
		( atR_expected_prev[0] !== 1'bx ) && ( atR_prev[0] !== atR_expected_prev[0] )
		&& ((atR_expected_prev[0] !== last_atR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[0] = atR_expected_prev[0];
	end
	if (
		( atR_expected_prev[1] !== 1'bx ) && ( atR_prev[1] !== atR_expected_prev[1] )
		&& ((atR_expected_prev[1] !== last_atR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[1] = atR_expected_prev[1];
	end
	if (
		( atR_expected_prev[2] !== 1'bx ) && ( atR_prev[2] !== atR_expected_prev[2] )
		&& ((atR_expected_prev[2] !== last_atR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[2] = atR_expected_prev[2];
	end
	if (
		( atR_expected_prev[3] !== 1'bx ) && ( atR_prev[3] !== atR_expected_prev[3] )
		&& ((atR_expected_prev[3] !== last_atR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[3] = atR_expected_prev[3];
	end
	if (
		( atR_expected_prev[4] !== 1'bx ) && ( atR_prev[4] !== atR_expected_prev[4] )
		&& ((atR_expected_prev[4] !== last_atR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[4] = atR_expected_prev[4];
	end
	if (
		( atR_expected_prev[5] !== 1'bx ) && ( atR_prev[5] !== atR_expected_prev[5] )
		&& ((atR_expected_prev[5] !== last_atR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[5] = atR_expected_prev[5];
	end
	if (
		( atR_expected_prev[6] !== 1'bx ) && ( atR_prev[6] !== atR_expected_prev[6] )
		&& ((atR_expected_prev[6] !== last_atR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[6] = atR_expected_prev[6];
	end
	if (
		( atR_expected_prev[7] !== 1'bx ) && ( atR_prev[7] !== atR_expected_prev[7] )
		&& ((atR_expected_prev[7] !== last_atR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[7] = atR_expected_prev[7];
	end
	if (
		( atR_expected_prev[8] !== 1'bx ) && ( atR_prev[8] !== atR_expected_prev[8] )
		&& ((atR_expected_prev[8] !== last_atR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[8] = atR_expected_prev[8];
	end
	if (
		( atR_expected_prev[9] !== 1'bx ) && ( atR_prev[9] !== atR_expected_prev[9] )
		&& ((atR_expected_prev[9] !== last_atR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[9] = atR_expected_prev[9];
	end
	if (
		( atR_expected_prev[10] !== 1'bx ) && ( atR_prev[10] !== atR_expected_prev[10] )
		&& ((atR_expected_prev[10] !== last_atR_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[10] = atR_expected_prev[10];
	end
	if (
		( atR_expected_prev[11] !== 1'bx ) && ( atR_prev[11] !== atR_expected_prev[11] )
		&& ((atR_expected_prev[11] !== last_atR_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[11] = atR_expected_prev[11];
	end
	if (
		( atR_expected_prev[12] !== 1'bx ) && ( atR_prev[12] !== atR_expected_prev[12] )
		&& ((atR_expected_prev[12] !== last_atR_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[12] = atR_expected_prev[12];
	end
	if (
		( atR_expected_prev[13] !== 1'bx ) && ( atR_prev[13] !== atR_expected_prev[13] )
		&& ((atR_expected_prev[13] !== last_atR_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[13] = atR_expected_prev[13];
	end
	if (
		( atR_expected_prev[14] !== 1'bx ) && ( atR_prev[14] !== atR_expected_prev[14] )
		&& ((atR_expected_prev[14] !== last_atR_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[14] = atR_expected_prev[14];
	end
	if (
		( atR_expected_prev[15] !== 1'bx ) && ( atR_prev[15] !== atR_expected_prev[15] )
		&& ((atR_expected_prev[15] !== last_atR_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[15] = atR_expected_prev[15];
	end
	if (
		( atR_expected_prev[16] !== 1'bx ) && ( atR_prev[16] !== atR_expected_prev[16] )
		&& ((atR_expected_prev[16] !== last_atR_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[16] = atR_expected_prev[16];
	end
	if (
		( atR_expected_prev[17] !== 1'bx ) && ( atR_prev[17] !== atR_expected_prev[17] )
		&& ((atR_expected_prev[17] !== last_atR_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[17] = atR_expected_prev[17];
	end
	if (
		( atR_expected_prev[18] !== 1'bx ) && ( atR_prev[18] !== atR_expected_prev[18] )
		&& ((atR_expected_prev[18] !== last_atR_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[18] = atR_expected_prev[18];
	end
	if (
		( atR_expected_prev[19] !== 1'bx ) && ( atR_prev[19] !== atR_expected_prev[19] )
		&& ((atR_expected_prev[19] !== last_atR_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[19] = atR_expected_prev[19];
	end
	if (
		( atR_expected_prev[20] !== 1'bx ) && ( atR_prev[20] !== atR_expected_prev[20] )
		&& ((atR_expected_prev[20] !== last_atR_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[20] = atR_expected_prev[20];
	end
	if (
		( atR_expected_prev[21] !== 1'bx ) && ( atR_prev[21] !== atR_expected_prev[21] )
		&& ((atR_expected_prev[21] !== last_atR_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[21] = atR_expected_prev[21];
	end
	if (
		( atR_expected_prev[22] !== 1'bx ) && ( atR_prev[22] !== atR_expected_prev[22] )
		&& ((atR_expected_prev[22] !== last_atR_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[22] = atR_expected_prev[22];
	end
	if (
		( atR_expected_prev[23] !== 1'bx ) && ( atR_prev[23] !== atR_expected_prev[23] )
		&& ((atR_expected_prev[23] !== last_atR_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[23] = atR_expected_prev[23];
	end
	if (
		( atR_expected_prev[24] !== 1'bx ) && ( atR_prev[24] !== atR_expected_prev[24] )
		&& ((atR_expected_prev[24] !== last_atR_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[24] = atR_expected_prev[24];
	end
	if (
		( atR_expected_prev[25] !== 1'bx ) && ( atR_prev[25] !== atR_expected_prev[25] )
		&& ((atR_expected_prev[25] !== last_atR_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[25] = atR_expected_prev[25];
	end
	if (
		( atR_expected_prev[26] !== 1'bx ) && ( atR_prev[26] !== atR_expected_prev[26] )
		&& ((atR_expected_prev[26] !== last_atR_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[26] = atR_expected_prev[26];
	end
	if (
		( atR_expected_prev[27] !== 1'bx ) && ( atR_prev[27] !== atR_expected_prev[27] )
		&& ((atR_expected_prev[27] !== last_atR_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[27] = atR_expected_prev[27];
	end
	if (
		( atR_expected_prev[28] !== 1'bx ) && ( atR_prev[28] !== atR_expected_prev[28] )
		&& ((atR_expected_prev[28] !== last_atR_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[28] = atR_expected_prev[28];
	end
	if (
		( atR_expected_prev[29] !== 1'bx ) && ( atR_prev[29] !== atR_expected_prev[29] )
		&& ((atR_expected_prev[29] !== last_atR_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[29] = atR_expected_prev[29];
	end
	if (
		( atR_expected_prev[30] !== 1'bx ) && ( atR_prev[30] !== atR_expected_prev[30] )
		&& ((atR_expected_prev[30] !== last_atR_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[30] = atR_expected_prev[30];
	end
	if (
		( atR_expected_prev[31] !== 1'bx ) && ( atR_prev[31] !== atR_expected_prev[31] )
		&& ((atR_expected_prev[31] !== last_atR_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port atR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", atR_expected_prev);
		$display ("     Real value = %b", atR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_atR_exp[31] = atR_expected_prev[31];
	end
	if (
		( BPC_expected_prev[0] !== 1'bx ) && ( BPC_prev[0] !== BPC_expected_prev[0] )
		&& ((BPC_expected_prev[0] !== last_BPC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[0] = BPC_expected_prev[0];
	end
	if (
		( BPC_expected_prev[1] !== 1'bx ) && ( BPC_prev[1] !== BPC_expected_prev[1] )
		&& ((BPC_expected_prev[1] !== last_BPC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[1] = BPC_expected_prev[1];
	end
	if (
		( BPC_expected_prev[2] !== 1'bx ) && ( BPC_prev[2] !== BPC_expected_prev[2] )
		&& ((BPC_expected_prev[2] !== last_BPC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[2] = BPC_expected_prev[2];
	end
	if (
		( BPC_expected_prev[3] !== 1'bx ) && ( BPC_prev[3] !== BPC_expected_prev[3] )
		&& ((BPC_expected_prev[3] !== last_BPC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[3] = BPC_expected_prev[3];
	end
	if (
		( BPC_expected_prev[4] !== 1'bx ) && ( BPC_prev[4] !== BPC_expected_prev[4] )
		&& ((BPC_expected_prev[4] !== last_BPC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[4] = BPC_expected_prev[4];
	end
	if (
		( BPC_expected_prev[5] !== 1'bx ) && ( BPC_prev[5] !== BPC_expected_prev[5] )
		&& ((BPC_expected_prev[5] !== last_BPC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[5] = BPC_expected_prev[5];
	end
	if (
		( BPC_expected_prev[6] !== 1'bx ) && ( BPC_prev[6] !== BPC_expected_prev[6] )
		&& ((BPC_expected_prev[6] !== last_BPC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[6] = BPC_expected_prev[6];
	end
	if (
		( BPC_expected_prev[7] !== 1'bx ) && ( BPC_prev[7] !== BPC_expected_prev[7] )
		&& ((BPC_expected_prev[7] !== last_BPC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[7] = BPC_expected_prev[7];
	end
	if (
		( BPC_expected_prev[8] !== 1'bx ) && ( BPC_prev[8] !== BPC_expected_prev[8] )
		&& ((BPC_expected_prev[8] !== last_BPC_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[8] = BPC_expected_prev[8];
	end
	if (
		( BPC_expected_prev[9] !== 1'bx ) && ( BPC_prev[9] !== BPC_expected_prev[9] )
		&& ((BPC_expected_prev[9] !== last_BPC_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[9] = BPC_expected_prev[9];
	end
	if (
		( BPC_expected_prev[10] !== 1'bx ) && ( BPC_prev[10] !== BPC_expected_prev[10] )
		&& ((BPC_expected_prev[10] !== last_BPC_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[10] = BPC_expected_prev[10];
	end
	if (
		( BPC_expected_prev[11] !== 1'bx ) && ( BPC_prev[11] !== BPC_expected_prev[11] )
		&& ((BPC_expected_prev[11] !== last_BPC_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[11] = BPC_expected_prev[11];
	end
	if (
		( BPC_expected_prev[12] !== 1'bx ) && ( BPC_prev[12] !== BPC_expected_prev[12] )
		&& ((BPC_expected_prev[12] !== last_BPC_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[12] = BPC_expected_prev[12];
	end
	if (
		( BPC_expected_prev[13] !== 1'bx ) && ( BPC_prev[13] !== BPC_expected_prev[13] )
		&& ((BPC_expected_prev[13] !== last_BPC_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[13] = BPC_expected_prev[13];
	end
	if (
		( BPC_expected_prev[14] !== 1'bx ) && ( BPC_prev[14] !== BPC_expected_prev[14] )
		&& ((BPC_expected_prev[14] !== last_BPC_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[14] = BPC_expected_prev[14];
	end
	if (
		( BPC_expected_prev[15] !== 1'bx ) && ( BPC_prev[15] !== BPC_expected_prev[15] )
		&& ((BPC_expected_prev[15] !== last_BPC_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[15] = BPC_expected_prev[15];
	end
	if (
		( BPC_expected_prev[16] !== 1'bx ) && ( BPC_prev[16] !== BPC_expected_prev[16] )
		&& ((BPC_expected_prev[16] !== last_BPC_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[16] = BPC_expected_prev[16];
	end
	if (
		( BPC_expected_prev[17] !== 1'bx ) && ( BPC_prev[17] !== BPC_expected_prev[17] )
		&& ((BPC_expected_prev[17] !== last_BPC_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[17] = BPC_expected_prev[17];
	end
	if (
		( BPC_expected_prev[18] !== 1'bx ) && ( BPC_prev[18] !== BPC_expected_prev[18] )
		&& ((BPC_expected_prev[18] !== last_BPC_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[18] = BPC_expected_prev[18];
	end
	if (
		( BPC_expected_prev[19] !== 1'bx ) && ( BPC_prev[19] !== BPC_expected_prev[19] )
		&& ((BPC_expected_prev[19] !== last_BPC_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[19] = BPC_expected_prev[19];
	end
	if (
		( BPC_expected_prev[20] !== 1'bx ) && ( BPC_prev[20] !== BPC_expected_prev[20] )
		&& ((BPC_expected_prev[20] !== last_BPC_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[20] = BPC_expected_prev[20];
	end
	if (
		( BPC_expected_prev[21] !== 1'bx ) && ( BPC_prev[21] !== BPC_expected_prev[21] )
		&& ((BPC_expected_prev[21] !== last_BPC_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[21] = BPC_expected_prev[21];
	end
	if (
		( BPC_expected_prev[22] !== 1'bx ) && ( BPC_prev[22] !== BPC_expected_prev[22] )
		&& ((BPC_expected_prev[22] !== last_BPC_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[22] = BPC_expected_prev[22];
	end
	if (
		( BPC_expected_prev[23] !== 1'bx ) && ( BPC_prev[23] !== BPC_expected_prev[23] )
		&& ((BPC_expected_prev[23] !== last_BPC_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[23] = BPC_expected_prev[23];
	end
	if (
		( BPC_expected_prev[24] !== 1'bx ) && ( BPC_prev[24] !== BPC_expected_prev[24] )
		&& ((BPC_expected_prev[24] !== last_BPC_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[24] = BPC_expected_prev[24];
	end
	if (
		( BPC_expected_prev[25] !== 1'bx ) && ( BPC_prev[25] !== BPC_expected_prev[25] )
		&& ((BPC_expected_prev[25] !== last_BPC_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[25] = BPC_expected_prev[25];
	end
	if (
		( BPC_expected_prev[26] !== 1'bx ) && ( BPC_prev[26] !== BPC_expected_prev[26] )
		&& ((BPC_expected_prev[26] !== last_BPC_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[26] = BPC_expected_prev[26];
	end
	if (
		( BPC_expected_prev[27] !== 1'bx ) && ( BPC_prev[27] !== BPC_expected_prev[27] )
		&& ((BPC_expected_prev[27] !== last_BPC_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[27] = BPC_expected_prev[27];
	end
	if (
		( BPC_expected_prev[28] !== 1'bx ) && ( BPC_prev[28] !== BPC_expected_prev[28] )
		&& ((BPC_expected_prev[28] !== last_BPC_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[28] = BPC_expected_prev[28];
	end
	if (
		( BPC_expected_prev[29] !== 1'bx ) && ( BPC_prev[29] !== BPC_expected_prev[29] )
		&& ((BPC_expected_prev[29] !== last_BPC_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[29] = BPC_expected_prev[29];
	end
	if (
		( BPC_expected_prev[30] !== 1'bx ) && ( BPC_prev[30] !== BPC_expected_prev[30] )
		&& ((BPC_expected_prev[30] !== last_BPC_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[30] = BPC_expected_prev[30];
	end
	if (
		( BPC_expected_prev[31] !== 1'bx ) && ( BPC_prev[31] !== BPC_expected_prev[31] )
		&& ((BPC_expected_prev[31] !== last_BPC_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BPC_exp[31] = BPC_expected_prev[31];
	end
	if (
		( EXHIGH_expected_prev[0] !== 1'bx ) && ( EXHIGH_prev[0] !== EXHIGH_expected_prev[0] )
		&& ((EXHIGH_expected_prev[0] !== last_EXHIGH_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[0] = EXHIGH_expected_prev[0];
	end
	if (
		( EXHIGH_expected_prev[1] !== 1'bx ) && ( EXHIGH_prev[1] !== EXHIGH_expected_prev[1] )
		&& ((EXHIGH_expected_prev[1] !== last_EXHIGH_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[1] = EXHIGH_expected_prev[1];
	end
	if (
		( EXHIGH_expected_prev[2] !== 1'bx ) && ( EXHIGH_prev[2] !== EXHIGH_expected_prev[2] )
		&& ((EXHIGH_expected_prev[2] !== last_EXHIGH_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[2] = EXHIGH_expected_prev[2];
	end
	if (
		( EXHIGH_expected_prev[3] !== 1'bx ) && ( EXHIGH_prev[3] !== EXHIGH_expected_prev[3] )
		&& ((EXHIGH_expected_prev[3] !== last_EXHIGH_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[3] = EXHIGH_expected_prev[3];
	end
	if (
		( EXHIGH_expected_prev[4] !== 1'bx ) && ( EXHIGH_prev[4] !== EXHIGH_expected_prev[4] )
		&& ((EXHIGH_expected_prev[4] !== last_EXHIGH_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[4] = EXHIGH_expected_prev[4];
	end
	if (
		( EXHIGH_expected_prev[5] !== 1'bx ) && ( EXHIGH_prev[5] !== EXHIGH_expected_prev[5] )
		&& ((EXHIGH_expected_prev[5] !== last_EXHIGH_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[5] = EXHIGH_expected_prev[5];
	end
	if (
		( EXHIGH_expected_prev[6] !== 1'bx ) && ( EXHIGH_prev[6] !== EXHIGH_expected_prev[6] )
		&& ((EXHIGH_expected_prev[6] !== last_EXHIGH_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[6] = EXHIGH_expected_prev[6];
	end
	if (
		( EXHIGH_expected_prev[7] !== 1'bx ) && ( EXHIGH_prev[7] !== EXHIGH_expected_prev[7] )
		&& ((EXHIGH_expected_prev[7] !== last_EXHIGH_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[7] = EXHIGH_expected_prev[7];
	end
	if (
		( EXHIGH_expected_prev[8] !== 1'bx ) && ( EXHIGH_prev[8] !== EXHIGH_expected_prev[8] )
		&& ((EXHIGH_expected_prev[8] !== last_EXHIGH_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[8] = EXHIGH_expected_prev[8];
	end
	if (
		( EXHIGH_expected_prev[9] !== 1'bx ) && ( EXHIGH_prev[9] !== EXHIGH_expected_prev[9] )
		&& ((EXHIGH_expected_prev[9] !== last_EXHIGH_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[9] = EXHIGH_expected_prev[9];
	end
	if (
		( EXHIGH_expected_prev[10] !== 1'bx ) && ( EXHIGH_prev[10] !== EXHIGH_expected_prev[10] )
		&& ((EXHIGH_expected_prev[10] !== last_EXHIGH_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[10] = EXHIGH_expected_prev[10];
	end
	if (
		( EXHIGH_expected_prev[11] !== 1'bx ) && ( EXHIGH_prev[11] !== EXHIGH_expected_prev[11] )
		&& ((EXHIGH_expected_prev[11] !== last_EXHIGH_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[11] = EXHIGH_expected_prev[11];
	end
	if (
		( EXHIGH_expected_prev[12] !== 1'bx ) && ( EXHIGH_prev[12] !== EXHIGH_expected_prev[12] )
		&& ((EXHIGH_expected_prev[12] !== last_EXHIGH_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[12] = EXHIGH_expected_prev[12];
	end
	if (
		( EXHIGH_expected_prev[13] !== 1'bx ) && ( EXHIGH_prev[13] !== EXHIGH_expected_prev[13] )
		&& ((EXHIGH_expected_prev[13] !== last_EXHIGH_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[13] = EXHIGH_expected_prev[13];
	end
	if (
		( EXHIGH_expected_prev[14] !== 1'bx ) && ( EXHIGH_prev[14] !== EXHIGH_expected_prev[14] )
		&& ((EXHIGH_expected_prev[14] !== last_EXHIGH_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[14] = EXHIGH_expected_prev[14];
	end
	if (
		( EXHIGH_expected_prev[15] !== 1'bx ) && ( EXHIGH_prev[15] !== EXHIGH_expected_prev[15] )
		&& ((EXHIGH_expected_prev[15] !== last_EXHIGH_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[15] = EXHIGH_expected_prev[15];
	end
	if (
		( EXHIGH_expected_prev[16] !== 1'bx ) && ( EXHIGH_prev[16] !== EXHIGH_expected_prev[16] )
		&& ((EXHIGH_expected_prev[16] !== last_EXHIGH_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[16] = EXHIGH_expected_prev[16];
	end
	if (
		( EXHIGH_expected_prev[17] !== 1'bx ) && ( EXHIGH_prev[17] !== EXHIGH_expected_prev[17] )
		&& ((EXHIGH_expected_prev[17] !== last_EXHIGH_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[17] = EXHIGH_expected_prev[17];
	end
	if (
		( EXHIGH_expected_prev[18] !== 1'bx ) && ( EXHIGH_prev[18] !== EXHIGH_expected_prev[18] )
		&& ((EXHIGH_expected_prev[18] !== last_EXHIGH_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[18] = EXHIGH_expected_prev[18];
	end
	if (
		( EXHIGH_expected_prev[19] !== 1'bx ) && ( EXHIGH_prev[19] !== EXHIGH_expected_prev[19] )
		&& ((EXHIGH_expected_prev[19] !== last_EXHIGH_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[19] = EXHIGH_expected_prev[19];
	end
	if (
		( EXHIGH_expected_prev[20] !== 1'bx ) && ( EXHIGH_prev[20] !== EXHIGH_expected_prev[20] )
		&& ((EXHIGH_expected_prev[20] !== last_EXHIGH_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[20] = EXHIGH_expected_prev[20];
	end
	if (
		( EXHIGH_expected_prev[21] !== 1'bx ) && ( EXHIGH_prev[21] !== EXHIGH_expected_prev[21] )
		&& ((EXHIGH_expected_prev[21] !== last_EXHIGH_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[21] = EXHIGH_expected_prev[21];
	end
	if (
		( EXHIGH_expected_prev[22] !== 1'bx ) && ( EXHIGH_prev[22] !== EXHIGH_expected_prev[22] )
		&& ((EXHIGH_expected_prev[22] !== last_EXHIGH_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[22] = EXHIGH_expected_prev[22];
	end
	if (
		( EXHIGH_expected_prev[23] !== 1'bx ) && ( EXHIGH_prev[23] !== EXHIGH_expected_prev[23] )
		&& ((EXHIGH_expected_prev[23] !== last_EXHIGH_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[23] = EXHIGH_expected_prev[23];
	end
	if (
		( EXHIGH_expected_prev[24] !== 1'bx ) && ( EXHIGH_prev[24] !== EXHIGH_expected_prev[24] )
		&& ((EXHIGH_expected_prev[24] !== last_EXHIGH_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[24] = EXHIGH_expected_prev[24];
	end
	if (
		( EXHIGH_expected_prev[25] !== 1'bx ) && ( EXHIGH_prev[25] !== EXHIGH_expected_prev[25] )
		&& ((EXHIGH_expected_prev[25] !== last_EXHIGH_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[25] = EXHIGH_expected_prev[25];
	end
	if (
		( EXHIGH_expected_prev[26] !== 1'bx ) && ( EXHIGH_prev[26] !== EXHIGH_expected_prev[26] )
		&& ((EXHIGH_expected_prev[26] !== last_EXHIGH_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[26] = EXHIGH_expected_prev[26];
	end
	if (
		( EXHIGH_expected_prev[27] !== 1'bx ) && ( EXHIGH_prev[27] !== EXHIGH_expected_prev[27] )
		&& ((EXHIGH_expected_prev[27] !== last_EXHIGH_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[27] = EXHIGH_expected_prev[27];
	end
	if (
		( EXHIGH_expected_prev[28] !== 1'bx ) && ( EXHIGH_prev[28] !== EXHIGH_expected_prev[28] )
		&& ((EXHIGH_expected_prev[28] !== last_EXHIGH_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[28] = EXHIGH_expected_prev[28];
	end
	if (
		( EXHIGH_expected_prev[29] !== 1'bx ) && ( EXHIGH_prev[29] !== EXHIGH_expected_prev[29] )
		&& ((EXHIGH_expected_prev[29] !== last_EXHIGH_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[29] = EXHIGH_expected_prev[29];
	end
	if (
		( EXHIGH_expected_prev[30] !== 1'bx ) && ( EXHIGH_prev[30] !== EXHIGH_expected_prev[30] )
		&& ((EXHIGH_expected_prev[30] !== last_EXHIGH_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[30] = EXHIGH_expected_prev[30];
	end
	if (
		( EXHIGH_expected_prev[31] !== 1'bx ) && ( EXHIGH_prev[31] !== EXHIGH_expected_prev[31] )
		&& ((EXHIGH_expected_prev[31] !== last_EXHIGH_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EXHIGH_exp[31] = EXHIGH_expected_prev[31];
	end
	if (
		( EXLOW_expected_prev[0] !== 1'bx ) && ( EXLOW_prev[0] !== EXLOW_expected_prev[0] )
		&& ((EXLOW_expected_prev[0] !== last_EXLOW_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[0] = EXLOW_expected_prev[0];
	end
	if (
		( EXLOW_expected_prev[1] !== 1'bx ) && ( EXLOW_prev[1] !== EXLOW_expected_prev[1] )
		&& ((EXLOW_expected_prev[1] !== last_EXLOW_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[1] = EXLOW_expected_prev[1];
	end
	if (
		( EXLOW_expected_prev[2] !== 1'bx ) && ( EXLOW_prev[2] !== EXLOW_expected_prev[2] )
		&& ((EXLOW_expected_prev[2] !== last_EXLOW_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[2] = EXLOW_expected_prev[2];
	end
	if (
		( EXLOW_expected_prev[3] !== 1'bx ) && ( EXLOW_prev[3] !== EXLOW_expected_prev[3] )
		&& ((EXLOW_expected_prev[3] !== last_EXLOW_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[3] = EXLOW_expected_prev[3];
	end
	if (
		( EXLOW_expected_prev[4] !== 1'bx ) && ( EXLOW_prev[4] !== EXLOW_expected_prev[4] )
		&& ((EXLOW_expected_prev[4] !== last_EXLOW_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[4] = EXLOW_expected_prev[4];
	end
	if (
		( EXLOW_expected_prev[5] !== 1'bx ) && ( EXLOW_prev[5] !== EXLOW_expected_prev[5] )
		&& ((EXLOW_expected_prev[5] !== last_EXLOW_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[5] = EXLOW_expected_prev[5];
	end
	if (
		( EXLOW_expected_prev[6] !== 1'bx ) && ( EXLOW_prev[6] !== EXLOW_expected_prev[6] )
		&& ((EXLOW_expected_prev[6] !== last_EXLOW_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[6] = EXLOW_expected_prev[6];
	end
	if (
		( EXLOW_expected_prev[7] !== 1'bx ) && ( EXLOW_prev[7] !== EXLOW_expected_prev[7] )
		&& ((EXLOW_expected_prev[7] !== last_EXLOW_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[7] = EXLOW_expected_prev[7];
	end
	if (
		( EXLOW_expected_prev[8] !== 1'bx ) && ( EXLOW_prev[8] !== EXLOW_expected_prev[8] )
		&& ((EXLOW_expected_prev[8] !== last_EXLOW_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[8] = EXLOW_expected_prev[8];
	end
	if (
		( EXLOW_expected_prev[9] !== 1'bx ) && ( EXLOW_prev[9] !== EXLOW_expected_prev[9] )
		&& ((EXLOW_expected_prev[9] !== last_EXLOW_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[9] = EXLOW_expected_prev[9];
	end
	if (
		( EXLOW_expected_prev[10] !== 1'bx ) && ( EXLOW_prev[10] !== EXLOW_expected_prev[10] )
		&& ((EXLOW_expected_prev[10] !== last_EXLOW_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[10] = EXLOW_expected_prev[10];
	end
	if (
		( EXLOW_expected_prev[11] !== 1'bx ) && ( EXLOW_prev[11] !== EXLOW_expected_prev[11] )
		&& ((EXLOW_expected_prev[11] !== last_EXLOW_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[11] = EXLOW_expected_prev[11];
	end
	if (
		( EXLOW_expected_prev[12] !== 1'bx ) && ( EXLOW_prev[12] !== EXLOW_expected_prev[12] )
		&& ((EXLOW_expected_prev[12] !== last_EXLOW_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[12] = EXLOW_expected_prev[12];
	end
	if (
		( EXLOW_expected_prev[13] !== 1'bx ) && ( EXLOW_prev[13] !== EXLOW_expected_prev[13] )
		&& ((EXLOW_expected_prev[13] !== last_EXLOW_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[13] = EXLOW_expected_prev[13];
	end
	if (
		( EXLOW_expected_prev[14] !== 1'bx ) && ( EXLOW_prev[14] !== EXLOW_expected_prev[14] )
		&& ((EXLOW_expected_prev[14] !== last_EXLOW_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[14] = EXLOW_expected_prev[14];
	end
	if (
		( EXLOW_expected_prev[15] !== 1'bx ) && ( EXLOW_prev[15] !== EXLOW_expected_prev[15] )
		&& ((EXLOW_expected_prev[15] !== last_EXLOW_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[15] = EXLOW_expected_prev[15];
	end
	if (
		( EXLOW_expected_prev[16] !== 1'bx ) && ( EXLOW_prev[16] !== EXLOW_expected_prev[16] )
		&& ((EXLOW_expected_prev[16] !== last_EXLOW_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[16] = EXLOW_expected_prev[16];
	end
	if (
		( EXLOW_expected_prev[17] !== 1'bx ) && ( EXLOW_prev[17] !== EXLOW_expected_prev[17] )
		&& ((EXLOW_expected_prev[17] !== last_EXLOW_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[17] = EXLOW_expected_prev[17];
	end
	if (
		( EXLOW_expected_prev[18] !== 1'bx ) && ( EXLOW_prev[18] !== EXLOW_expected_prev[18] )
		&& ((EXLOW_expected_prev[18] !== last_EXLOW_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[18] = EXLOW_expected_prev[18];
	end
	if (
		( EXLOW_expected_prev[19] !== 1'bx ) && ( EXLOW_prev[19] !== EXLOW_expected_prev[19] )
		&& ((EXLOW_expected_prev[19] !== last_EXLOW_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[19] = EXLOW_expected_prev[19];
	end
	if (
		( EXLOW_expected_prev[20] !== 1'bx ) && ( EXLOW_prev[20] !== EXLOW_expected_prev[20] )
		&& ((EXLOW_expected_prev[20] !== last_EXLOW_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[20] = EXLOW_expected_prev[20];
	end
	if (
		( EXLOW_expected_prev[21] !== 1'bx ) && ( EXLOW_prev[21] !== EXLOW_expected_prev[21] )
		&& ((EXLOW_expected_prev[21] !== last_EXLOW_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[21] = EXLOW_expected_prev[21];
	end
	if (
		( EXLOW_expected_prev[22] !== 1'bx ) && ( EXLOW_prev[22] !== EXLOW_expected_prev[22] )
		&& ((EXLOW_expected_prev[22] !== last_EXLOW_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[22] = EXLOW_expected_prev[22];
	end
	if (
		( EXLOW_expected_prev[23] !== 1'bx ) && ( EXLOW_prev[23] !== EXLOW_expected_prev[23] )
		&& ((EXLOW_expected_prev[23] !== last_EXLOW_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[23] = EXLOW_expected_prev[23];
	end
	if (
		( EXLOW_expected_prev[24] !== 1'bx ) && ( EXLOW_prev[24] !== EXLOW_expected_prev[24] )
		&& ((EXLOW_expected_prev[24] !== last_EXLOW_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[24] = EXLOW_expected_prev[24];
	end
	if (
		( EXLOW_expected_prev[25] !== 1'bx ) && ( EXLOW_prev[25] !== EXLOW_expected_prev[25] )
		&& ((EXLOW_expected_prev[25] !== last_EXLOW_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[25] = EXLOW_expected_prev[25];
	end
	if (
		( EXLOW_expected_prev[26] !== 1'bx ) && ( EXLOW_prev[26] !== EXLOW_expected_prev[26] )
		&& ((EXLOW_expected_prev[26] !== last_EXLOW_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[26] = EXLOW_expected_prev[26];
	end
	if (
		( EXLOW_expected_prev[27] !== 1'bx ) && ( EXLOW_prev[27] !== EXLOW_expected_prev[27] )
		&& ((EXLOW_expected_prev[27] !== last_EXLOW_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[27] = EXLOW_expected_prev[27];
	end
	if (
		( EXLOW_expected_prev[28] !== 1'bx ) && ( EXLOW_prev[28] !== EXLOW_expected_prev[28] )
		&& ((EXLOW_expected_prev[28] !== last_EXLOW_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[28] = EXLOW_expected_prev[28];
	end
	if (
		( EXLOW_expected_prev[29] !== 1'bx ) && ( EXLOW_prev[29] !== EXLOW_expected_prev[29] )
		&& ((EXLOW_expected_prev[29] !== last_EXLOW_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[29] = EXLOW_expected_prev[29];
	end
	if (
		( EXLOW_expected_prev[30] !== 1'bx ) && ( EXLOW_prev[30] !== EXLOW_expected_prev[30] )
		&& ((EXLOW_expected_prev[30] !== last_EXLOW_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[30] = EXLOW_expected_prev[30];
	end
	if (
		( EXLOW_expected_prev[31] !== 1'bx ) && ( EXLOW_prev[31] !== EXLOW_expected_prev[31] )
		&& ((EXLOW_expected_prev[31] !== last_EXLOW_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EXLOW_exp[31] = EXLOW_expected_prev[31];
	end
	if (
		( EXopALU_expected_prev[0] !== 1'bx ) && ( EXopALU_prev[0] !== EXopALU_expected_prev[0] )
		&& ((EXopALU_expected_prev[0] !== last_EXopALU_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_EXopALU_exp[0] = EXopALU_expected_prev[0];
	end
	if (
		( EXopALU_expected_prev[1] !== 1'bx ) && ( EXopALU_prev[1] !== EXopALU_expected_prev[1] )
		&& ((EXopALU_expected_prev[1] !== last_EXopALU_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_EXopALU_exp[1] = EXopALU_expected_prev[1];
	end
	if (
		( EXopALU_expected_prev[2] !== 1'bx ) && ( EXopALU_prev[2] !== EXopALU_expected_prev[2] )
		&& ((EXopALU_expected_prev[2] !== last_EXopALU_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_EXopALU_exp[2] = EXopALU_expected_prev[2];
	end
	if (
		( EXULAA_expected_prev[0] !== 1'bx ) && ( EXULAA_prev[0] !== EXULAA_expected_prev[0] )
		&& ((EXULAA_expected_prev[0] !== last_EXULAA_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[0] = EXULAA_expected_prev[0];
	end
	if (
		( EXULAA_expected_prev[1] !== 1'bx ) && ( EXULAA_prev[1] !== EXULAA_expected_prev[1] )
		&& ((EXULAA_expected_prev[1] !== last_EXULAA_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[1] = EXULAA_expected_prev[1];
	end
	if (
		( EXULAA_expected_prev[2] !== 1'bx ) && ( EXULAA_prev[2] !== EXULAA_expected_prev[2] )
		&& ((EXULAA_expected_prev[2] !== last_EXULAA_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[2] = EXULAA_expected_prev[2];
	end
	if (
		( EXULAA_expected_prev[3] !== 1'bx ) && ( EXULAA_prev[3] !== EXULAA_expected_prev[3] )
		&& ((EXULAA_expected_prev[3] !== last_EXULAA_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[3] = EXULAA_expected_prev[3];
	end
	if (
		( EXULAA_expected_prev[4] !== 1'bx ) && ( EXULAA_prev[4] !== EXULAA_expected_prev[4] )
		&& ((EXULAA_expected_prev[4] !== last_EXULAA_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[4] = EXULAA_expected_prev[4];
	end
	if (
		( EXULAA_expected_prev[5] !== 1'bx ) && ( EXULAA_prev[5] !== EXULAA_expected_prev[5] )
		&& ((EXULAA_expected_prev[5] !== last_EXULAA_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[5] = EXULAA_expected_prev[5];
	end
	if (
		( EXULAA_expected_prev[6] !== 1'bx ) && ( EXULAA_prev[6] !== EXULAA_expected_prev[6] )
		&& ((EXULAA_expected_prev[6] !== last_EXULAA_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[6] = EXULAA_expected_prev[6];
	end
	if (
		( EXULAA_expected_prev[7] !== 1'bx ) && ( EXULAA_prev[7] !== EXULAA_expected_prev[7] )
		&& ((EXULAA_expected_prev[7] !== last_EXULAA_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[7] = EXULAA_expected_prev[7];
	end
	if (
		( EXULAA_expected_prev[8] !== 1'bx ) && ( EXULAA_prev[8] !== EXULAA_expected_prev[8] )
		&& ((EXULAA_expected_prev[8] !== last_EXULAA_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[8] = EXULAA_expected_prev[8];
	end
	if (
		( EXULAA_expected_prev[9] !== 1'bx ) && ( EXULAA_prev[9] !== EXULAA_expected_prev[9] )
		&& ((EXULAA_expected_prev[9] !== last_EXULAA_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[9] = EXULAA_expected_prev[9];
	end
	if (
		( EXULAA_expected_prev[10] !== 1'bx ) && ( EXULAA_prev[10] !== EXULAA_expected_prev[10] )
		&& ((EXULAA_expected_prev[10] !== last_EXULAA_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[10] = EXULAA_expected_prev[10];
	end
	if (
		( EXULAA_expected_prev[11] !== 1'bx ) && ( EXULAA_prev[11] !== EXULAA_expected_prev[11] )
		&& ((EXULAA_expected_prev[11] !== last_EXULAA_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[11] = EXULAA_expected_prev[11];
	end
	if (
		( EXULAA_expected_prev[12] !== 1'bx ) && ( EXULAA_prev[12] !== EXULAA_expected_prev[12] )
		&& ((EXULAA_expected_prev[12] !== last_EXULAA_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[12] = EXULAA_expected_prev[12];
	end
	if (
		( EXULAA_expected_prev[13] !== 1'bx ) && ( EXULAA_prev[13] !== EXULAA_expected_prev[13] )
		&& ((EXULAA_expected_prev[13] !== last_EXULAA_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[13] = EXULAA_expected_prev[13];
	end
	if (
		( EXULAA_expected_prev[14] !== 1'bx ) && ( EXULAA_prev[14] !== EXULAA_expected_prev[14] )
		&& ((EXULAA_expected_prev[14] !== last_EXULAA_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[14] = EXULAA_expected_prev[14];
	end
	if (
		( EXULAA_expected_prev[15] !== 1'bx ) && ( EXULAA_prev[15] !== EXULAA_expected_prev[15] )
		&& ((EXULAA_expected_prev[15] !== last_EXULAA_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[15] = EXULAA_expected_prev[15];
	end
	if (
		( EXULAA_expected_prev[16] !== 1'bx ) && ( EXULAA_prev[16] !== EXULAA_expected_prev[16] )
		&& ((EXULAA_expected_prev[16] !== last_EXULAA_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[16] = EXULAA_expected_prev[16];
	end
	if (
		( EXULAA_expected_prev[17] !== 1'bx ) && ( EXULAA_prev[17] !== EXULAA_expected_prev[17] )
		&& ((EXULAA_expected_prev[17] !== last_EXULAA_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[17] = EXULAA_expected_prev[17];
	end
	if (
		( EXULAA_expected_prev[18] !== 1'bx ) && ( EXULAA_prev[18] !== EXULAA_expected_prev[18] )
		&& ((EXULAA_expected_prev[18] !== last_EXULAA_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[18] = EXULAA_expected_prev[18];
	end
	if (
		( EXULAA_expected_prev[19] !== 1'bx ) && ( EXULAA_prev[19] !== EXULAA_expected_prev[19] )
		&& ((EXULAA_expected_prev[19] !== last_EXULAA_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[19] = EXULAA_expected_prev[19];
	end
	if (
		( EXULAA_expected_prev[20] !== 1'bx ) && ( EXULAA_prev[20] !== EXULAA_expected_prev[20] )
		&& ((EXULAA_expected_prev[20] !== last_EXULAA_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[20] = EXULAA_expected_prev[20];
	end
	if (
		( EXULAA_expected_prev[21] !== 1'bx ) && ( EXULAA_prev[21] !== EXULAA_expected_prev[21] )
		&& ((EXULAA_expected_prev[21] !== last_EXULAA_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[21] = EXULAA_expected_prev[21];
	end
	if (
		( EXULAA_expected_prev[22] !== 1'bx ) && ( EXULAA_prev[22] !== EXULAA_expected_prev[22] )
		&& ((EXULAA_expected_prev[22] !== last_EXULAA_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[22] = EXULAA_expected_prev[22];
	end
	if (
		( EXULAA_expected_prev[23] !== 1'bx ) && ( EXULAA_prev[23] !== EXULAA_expected_prev[23] )
		&& ((EXULAA_expected_prev[23] !== last_EXULAA_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[23] = EXULAA_expected_prev[23];
	end
	if (
		( EXULAA_expected_prev[24] !== 1'bx ) && ( EXULAA_prev[24] !== EXULAA_expected_prev[24] )
		&& ((EXULAA_expected_prev[24] !== last_EXULAA_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[24] = EXULAA_expected_prev[24];
	end
	if (
		( EXULAA_expected_prev[25] !== 1'bx ) && ( EXULAA_prev[25] !== EXULAA_expected_prev[25] )
		&& ((EXULAA_expected_prev[25] !== last_EXULAA_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[25] = EXULAA_expected_prev[25];
	end
	if (
		( EXULAA_expected_prev[26] !== 1'bx ) && ( EXULAA_prev[26] !== EXULAA_expected_prev[26] )
		&& ((EXULAA_expected_prev[26] !== last_EXULAA_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[26] = EXULAA_expected_prev[26];
	end
	if (
		( EXULAA_expected_prev[27] !== 1'bx ) && ( EXULAA_prev[27] !== EXULAA_expected_prev[27] )
		&& ((EXULAA_expected_prev[27] !== last_EXULAA_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[27] = EXULAA_expected_prev[27];
	end
	if (
		( EXULAA_expected_prev[28] !== 1'bx ) && ( EXULAA_prev[28] !== EXULAA_expected_prev[28] )
		&& ((EXULAA_expected_prev[28] !== last_EXULAA_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[28] = EXULAA_expected_prev[28];
	end
	if (
		( EXULAA_expected_prev[29] !== 1'bx ) && ( EXULAA_prev[29] !== EXULAA_expected_prev[29] )
		&& ((EXULAA_expected_prev[29] !== last_EXULAA_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[29] = EXULAA_expected_prev[29];
	end
	if (
		( EXULAA_expected_prev[30] !== 1'bx ) && ( EXULAA_prev[30] !== EXULAA_expected_prev[30] )
		&& ((EXULAA_expected_prev[30] !== last_EXULAA_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[30] = EXULAA_expected_prev[30];
	end
	if (
		( EXULAA_expected_prev[31] !== 1'bx ) && ( EXULAA_prev[31] !== EXULAA_expected_prev[31] )
		&& ((EXULAA_expected_prev[31] !== last_EXULAA_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EXULAA_exp[31] = EXULAA_expected_prev[31];
	end
	if (
		( EXULAB_expected_prev[0] !== 1'bx ) && ( EXULAB_prev[0] !== EXULAB_expected_prev[0] )
		&& ((EXULAB_expected_prev[0] !== last_EXULAB_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[0] = EXULAB_expected_prev[0];
	end
	if (
		( EXULAB_expected_prev[1] !== 1'bx ) && ( EXULAB_prev[1] !== EXULAB_expected_prev[1] )
		&& ((EXULAB_expected_prev[1] !== last_EXULAB_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[1] = EXULAB_expected_prev[1];
	end
	if (
		( EXULAB_expected_prev[2] !== 1'bx ) && ( EXULAB_prev[2] !== EXULAB_expected_prev[2] )
		&& ((EXULAB_expected_prev[2] !== last_EXULAB_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[2] = EXULAB_expected_prev[2];
	end
	if (
		( EXULAB_expected_prev[3] !== 1'bx ) && ( EXULAB_prev[3] !== EXULAB_expected_prev[3] )
		&& ((EXULAB_expected_prev[3] !== last_EXULAB_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[3] = EXULAB_expected_prev[3];
	end
	if (
		( EXULAB_expected_prev[4] !== 1'bx ) && ( EXULAB_prev[4] !== EXULAB_expected_prev[4] )
		&& ((EXULAB_expected_prev[4] !== last_EXULAB_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[4] = EXULAB_expected_prev[4];
	end
	if (
		( EXULAB_expected_prev[5] !== 1'bx ) && ( EXULAB_prev[5] !== EXULAB_expected_prev[5] )
		&& ((EXULAB_expected_prev[5] !== last_EXULAB_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[5] = EXULAB_expected_prev[5];
	end
	if (
		( EXULAB_expected_prev[6] !== 1'bx ) && ( EXULAB_prev[6] !== EXULAB_expected_prev[6] )
		&& ((EXULAB_expected_prev[6] !== last_EXULAB_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[6] = EXULAB_expected_prev[6];
	end
	if (
		( EXULAB_expected_prev[7] !== 1'bx ) && ( EXULAB_prev[7] !== EXULAB_expected_prev[7] )
		&& ((EXULAB_expected_prev[7] !== last_EXULAB_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[7] = EXULAB_expected_prev[7];
	end
	if (
		( EXULAB_expected_prev[8] !== 1'bx ) && ( EXULAB_prev[8] !== EXULAB_expected_prev[8] )
		&& ((EXULAB_expected_prev[8] !== last_EXULAB_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[8] = EXULAB_expected_prev[8];
	end
	if (
		( EXULAB_expected_prev[9] !== 1'bx ) && ( EXULAB_prev[9] !== EXULAB_expected_prev[9] )
		&& ((EXULAB_expected_prev[9] !== last_EXULAB_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[9] = EXULAB_expected_prev[9];
	end
	if (
		( EXULAB_expected_prev[10] !== 1'bx ) && ( EXULAB_prev[10] !== EXULAB_expected_prev[10] )
		&& ((EXULAB_expected_prev[10] !== last_EXULAB_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[10] = EXULAB_expected_prev[10];
	end
	if (
		( EXULAB_expected_prev[11] !== 1'bx ) && ( EXULAB_prev[11] !== EXULAB_expected_prev[11] )
		&& ((EXULAB_expected_prev[11] !== last_EXULAB_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[11] = EXULAB_expected_prev[11];
	end
	if (
		( EXULAB_expected_prev[12] !== 1'bx ) && ( EXULAB_prev[12] !== EXULAB_expected_prev[12] )
		&& ((EXULAB_expected_prev[12] !== last_EXULAB_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[12] = EXULAB_expected_prev[12];
	end
	if (
		( EXULAB_expected_prev[13] !== 1'bx ) && ( EXULAB_prev[13] !== EXULAB_expected_prev[13] )
		&& ((EXULAB_expected_prev[13] !== last_EXULAB_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[13] = EXULAB_expected_prev[13];
	end
	if (
		( EXULAB_expected_prev[14] !== 1'bx ) && ( EXULAB_prev[14] !== EXULAB_expected_prev[14] )
		&& ((EXULAB_expected_prev[14] !== last_EXULAB_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[14] = EXULAB_expected_prev[14];
	end
	if (
		( EXULAB_expected_prev[15] !== 1'bx ) && ( EXULAB_prev[15] !== EXULAB_expected_prev[15] )
		&& ((EXULAB_expected_prev[15] !== last_EXULAB_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[15] = EXULAB_expected_prev[15];
	end
	if (
		( EXULAB_expected_prev[16] !== 1'bx ) && ( EXULAB_prev[16] !== EXULAB_expected_prev[16] )
		&& ((EXULAB_expected_prev[16] !== last_EXULAB_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[16] = EXULAB_expected_prev[16];
	end
	if (
		( EXULAB_expected_prev[17] !== 1'bx ) && ( EXULAB_prev[17] !== EXULAB_expected_prev[17] )
		&& ((EXULAB_expected_prev[17] !== last_EXULAB_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[17] = EXULAB_expected_prev[17];
	end
	if (
		( EXULAB_expected_prev[18] !== 1'bx ) && ( EXULAB_prev[18] !== EXULAB_expected_prev[18] )
		&& ((EXULAB_expected_prev[18] !== last_EXULAB_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[18] = EXULAB_expected_prev[18];
	end
	if (
		( EXULAB_expected_prev[19] !== 1'bx ) && ( EXULAB_prev[19] !== EXULAB_expected_prev[19] )
		&& ((EXULAB_expected_prev[19] !== last_EXULAB_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[19] = EXULAB_expected_prev[19];
	end
	if (
		( EXULAB_expected_prev[20] !== 1'bx ) && ( EXULAB_prev[20] !== EXULAB_expected_prev[20] )
		&& ((EXULAB_expected_prev[20] !== last_EXULAB_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[20] = EXULAB_expected_prev[20];
	end
	if (
		( EXULAB_expected_prev[21] !== 1'bx ) && ( EXULAB_prev[21] !== EXULAB_expected_prev[21] )
		&& ((EXULAB_expected_prev[21] !== last_EXULAB_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[21] = EXULAB_expected_prev[21];
	end
	if (
		( EXULAB_expected_prev[22] !== 1'bx ) && ( EXULAB_prev[22] !== EXULAB_expected_prev[22] )
		&& ((EXULAB_expected_prev[22] !== last_EXULAB_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[22] = EXULAB_expected_prev[22];
	end
	if (
		( EXULAB_expected_prev[23] !== 1'bx ) && ( EXULAB_prev[23] !== EXULAB_expected_prev[23] )
		&& ((EXULAB_expected_prev[23] !== last_EXULAB_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[23] = EXULAB_expected_prev[23];
	end
	if (
		( EXULAB_expected_prev[24] !== 1'bx ) && ( EXULAB_prev[24] !== EXULAB_expected_prev[24] )
		&& ((EXULAB_expected_prev[24] !== last_EXULAB_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[24] = EXULAB_expected_prev[24];
	end
	if (
		( EXULAB_expected_prev[25] !== 1'bx ) && ( EXULAB_prev[25] !== EXULAB_expected_prev[25] )
		&& ((EXULAB_expected_prev[25] !== last_EXULAB_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[25] = EXULAB_expected_prev[25];
	end
	if (
		( EXULAB_expected_prev[26] !== 1'bx ) && ( EXULAB_prev[26] !== EXULAB_expected_prev[26] )
		&& ((EXULAB_expected_prev[26] !== last_EXULAB_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[26] = EXULAB_expected_prev[26];
	end
	if (
		( EXULAB_expected_prev[27] !== 1'bx ) && ( EXULAB_prev[27] !== EXULAB_expected_prev[27] )
		&& ((EXULAB_expected_prev[27] !== last_EXULAB_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[27] = EXULAB_expected_prev[27];
	end
	if (
		( EXULAB_expected_prev[28] !== 1'bx ) && ( EXULAB_prev[28] !== EXULAB_expected_prev[28] )
		&& ((EXULAB_expected_prev[28] !== last_EXULAB_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[28] = EXULAB_expected_prev[28];
	end
	if (
		( EXULAB_expected_prev[29] !== 1'bx ) && ( EXULAB_prev[29] !== EXULAB_expected_prev[29] )
		&& ((EXULAB_expected_prev[29] !== last_EXULAB_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[29] = EXULAB_expected_prev[29];
	end
	if (
		( EXULAB_expected_prev[30] !== 1'bx ) && ( EXULAB_prev[30] !== EXULAB_expected_prev[30] )
		&& ((EXULAB_expected_prev[30] !== last_EXULAB_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[30] = EXULAB_expected_prev[30];
	end
	if (
		( EXULAB_expected_prev[31] !== 1'bx ) && ( EXULAB_prev[31] !== EXULAB_expected_prev[31] )
		&& ((EXULAB_expected_prev[31] !== last_EXULAB_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EXULAB_exp[31] = EXULAB_expected_prev[31];
	end
	if (
		( ForwardA_expected_prev[0] !== 1'bx ) && ( ForwardA_prev[0] !== ForwardA_expected_prev[0] )
		&& ((ForwardA_expected_prev[0] !== last_ForwardA_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ForwardA_exp[0] = ForwardA_expected_prev[0];
	end
	if (
		( ForwardA_expected_prev[1] !== 1'bx ) && ( ForwardA_prev[1] !== ForwardA_expected_prev[1] )
		&& ((ForwardA_expected_prev[1] !== last_ForwardA_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ForwardA_exp[1] = ForwardA_expected_prev[1];
	end
	if (
		( ForwardB_expected_prev[0] !== 1'bx ) && ( ForwardB_prev[0] !== ForwardB_expected_prev[0] )
		&& ((ForwardB_expected_prev[0] !== last_ForwardB_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ForwardB_exp[0] = ForwardB_expected_prev[0];
	end
	if (
		( ForwardB_expected_prev[1] !== 1'bx ) && ( ForwardB_prev[1] !== ForwardB_expected_prev[1] )
		&& ((ForwardB_expected_prev[1] !== last_ForwardB_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ForwardB_exp[1] = ForwardB_expected_prev[1];
	end
	if (
		( JAL_expected_prev !== 1'bx ) && ( JAL_prev !== JAL_expected_prev )
		&& ((JAL_expected_prev !== last_JAL_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JAL_expected_prev);
		$display ("     Real value = %b", JAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_JAL_exp = JAL_expected_prev;
	end
	if (
		( MEMOutALU_expected_prev[0] !== 1'bx ) && ( MEMOutALU_prev[0] !== MEMOutALU_expected_prev[0] )
		&& ((MEMOutALU_expected_prev[0] !== last_MEMOutALU_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[0] = MEMOutALU_expected_prev[0];
	end
	if (
		( MEMOutALU_expected_prev[1] !== 1'bx ) && ( MEMOutALU_prev[1] !== MEMOutALU_expected_prev[1] )
		&& ((MEMOutALU_expected_prev[1] !== last_MEMOutALU_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[1] = MEMOutALU_expected_prev[1];
	end
	if (
		( MEMOutALU_expected_prev[2] !== 1'bx ) && ( MEMOutALU_prev[2] !== MEMOutALU_expected_prev[2] )
		&& ((MEMOutALU_expected_prev[2] !== last_MEMOutALU_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[2] = MEMOutALU_expected_prev[2];
	end
	if (
		( MEMOutALU_expected_prev[3] !== 1'bx ) && ( MEMOutALU_prev[3] !== MEMOutALU_expected_prev[3] )
		&& ((MEMOutALU_expected_prev[3] !== last_MEMOutALU_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[3] = MEMOutALU_expected_prev[3];
	end
	if (
		( MEMOutALU_expected_prev[4] !== 1'bx ) && ( MEMOutALU_prev[4] !== MEMOutALU_expected_prev[4] )
		&& ((MEMOutALU_expected_prev[4] !== last_MEMOutALU_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[4] = MEMOutALU_expected_prev[4];
	end
	if (
		( MEMOutALU_expected_prev[5] !== 1'bx ) && ( MEMOutALU_prev[5] !== MEMOutALU_expected_prev[5] )
		&& ((MEMOutALU_expected_prev[5] !== last_MEMOutALU_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[5] = MEMOutALU_expected_prev[5];
	end
	if (
		( MEMOutALU_expected_prev[6] !== 1'bx ) && ( MEMOutALU_prev[6] !== MEMOutALU_expected_prev[6] )
		&& ((MEMOutALU_expected_prev[6] !== last_MEMOutALU_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[6] = MEMOutALU_expected_prev[6];
	end
	if (
		( MEMOutALU_expected_prev[7] !== 1'bx ) && ( MEMOutALU_prev[7] !== MEMOutALU_expected_prev[7] )
		&& ((MEMOutALU_expected_prev[7] !== last_MEMOutALU_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[7] = MEMOutALU_expected_prev[7];
	end
	if (
		( MEMOutALU_expected_prev[8] !== 1'bx ) && ( MEMOutALU_prev[8] !== MEMOutALU_expected_prev[8] )
		&& ((MEMOutALU_expected_prev[8] !== last_MEMOutALU_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[8] = MEMOutALU_expected_prev[8];
	end
	if (
		( MEMOutALU_expected_prev[9] !== 1'bx ) && ( MEMOutALU_prev[9] !== MEMOutALU_expected_prev[9] )
		&& ((MEMOutALU_expected_prev[9] !== last_MEMOutALU_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[9] = MEMOutALU_expected_prev[9];
	end
	if (
		( MEMOutALU_expected_prev[10] !== 1'bx ) && ( MEMOutALU_prev[10] !== MEMOutALU_expected_prev[10] )
		&& ((MEMOutALU_expected_prev[10] !== last_MEMOutALU_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[10] = MEMOutALU_expected_prev[10];
	end
	if (
		( MEMOutALU_expected_prev[11] !== 1'bx ) && ( MEMOutALU_prev[11] !== MEMOutALU_expected_prev[11] )
		&& ((MEMOutALU_expected_prev[11] !== last_MEMOutALU_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[11] = MEMOutALU_expected_prev[11];
	end
	if (
		( MEMOutALU_expected_prev[12] !== 1'bx ) && ( MEMOutALU_prev[12] !== MEMOutALU_expected_prev[12] )
		&& ((MEMOutALU_expected_prev[12] !== last_MEMOutALU_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[12] = MEMOutALU_expected_prev[12];
	end
	if (
		( MEMOutALU_expected_prev[13] !== 1'bx ) && ( MEMOutALU_prev[13] !== MEMOutALU_expected_prev[13] )
		&& ((MEMOutALU_expected_prev[13] !== last_MEMOutALU_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[13] = MEMOutALU_expected_prev[13];
	end
	if (
		( MEMOutALU_expected_prev[14] !== 1'bx ) && ( MEMOutALU_prev[14] !== MEMOutALU_expected_prev[14] )
		&& ((MEMOutALU_expected_prev[14] !== last_MEMOutALU_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[14] = MEMOutALU_expected_prev[14];
	end
	if (
		( MEMOutALU_expected_prev[15] !== 1'bx ) && ( MEMOutALU_prev[15] !== MEMOutALU_expected_prev[15] )
		&& ((MEMOutALU_expected_prev[15] !== last_MEMOutALU_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[15] = MEMOutALU_expected_prev[15];
	end
	if (
		( MEMOutALU_expected_prev[16] !== 1'bx ) && ( MEMOutALU_prev[16] !== MEMOutALU_expected_prev[16] )
		&& ((MEMOutALU_expected_prev[16] !== last_MEMOutALU_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[16] = MEMOutALU_expected_prev[16];
	end
	if (
		( MEMOutALU_expected_prev[17] !== 1'bx ) && ( MEMOutALU_prev[17] !== MEMOutALU_expected_prev[17] )
		&& ((MEMOutALU_expected_prev[17] !== last_MEMOutALU_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[17] = MEMOutALU_expected_prev[17];
	end
	if (
		( MEMOutALU_expected_prev[18] !== 1'bx ) && ( MEMOutALU_prev[18] !== MEMOutALU_expected_prev[18] )
		&& ((MEMOutALU_expected_prev[18] !== last_MEMOutALU_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[18] = MEMOutALU_expected_prev[18];
	end
	if (
		( MEMOutALU_expected_prev[19] !== 1'bx ) && ( MEMOutALU_prev[19] !== MEMOutALU_expected_prev[19] )
		&& ((MEMOutALU_expected_prev[19] !== last_MEMOutALU_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[19] = MEMOutALU_expected_prev[19];
	end
	if (
		( MEMOutALU_expected_prev[20] !== 1'bx ) && ( MEMOutALU_prev[20] !== MEMOutALU_expected_prev[20] )
		&& ((MEMOutALU_expected_prev[20] !== last_MEMOutALU_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[20] = MEMOutALU_expected_prev[20];
	end
	if (
		( MEMOutALU_expected_prev[21] !== 1'bx ) && ( MEMOutALU_prev[21] !== MEMOutALU_expected_prev[21] )
		&& ((MEMOutALU_expected_prev[21] !== last_MEMOutALU_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[21] = MEMOutALU_expected_prev[21];
	end
	if (
		( MEMOutALU_expected_prev[22] !== 1'bx ) && ( MEMOutALU_prev[22] !== MEMOutALU_expected_prev[22] )
		&& ((MEMOutALU_expected_prev[22] !== last_MEMOutALU_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[22] = MEMOutALU_expected_prev[22];
	end
	if (
		( MEMOutALU_expected_prev[23] !== 1'bx ) && ( MEMOutALU_prev[23] !== MEMOutALU_expected_prev[23] )
		&& ((MEMOutALU_expected_prev[23] !== last_MEMOutALU_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[23] = MEMOutALU_expected_prev[23];
	end
	if (
		( MEMOutALU_expected_prev[24] !== 1'bx ) && ( MEMOutALU_prev[24] !== MEMOutALU_expected_prev[24] )
		&& ((MEMOutALU_expected_prev[24] !== last_MEMOutALU_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[24] = MEMOutALU_expected_prev[24];
	end
	if (
		( MEMOutALU_expected_prev[25] !== 1'bx ) && ( MEMOutALU_prev[25] !== MEMOutALU_expected_prev[25] )
		&& ((MEMOutALU_expected_prev[25] !== last_MEMOutALU_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[25] = MEMOutALU_expected_prev[25];
	end
	if (
		( MEMOutALU_expected_prev[26] !== 1'bx ) && ( MEMOutALU_prev[26] !== MEMOutALU_expected_prev[26] )
		&& ((MEMOutALU_expected_prev[26] !== last_MEMOutALU_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[26] = MEMOutALU_expected_prev[26];
	end
	if (
		( MEMOutALU_expected_prev[27] !== 1'bx ) && ( MEMOutALU_prev[27] !== MEMOutALU_expected_prev[27] )
		&& ((MEMOutALU_expected_prev[27] !== last_MEMOutALU_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[27] = MEMOutALU_expected_prev[27];
	end
	if (
		( MEMOutALU_expected_prev[28] !== 1'bx ) && ( MEMOutALU_prev[28] !== MEMOutALU_expected_prev[28] )
		&& ((MEMOutALU_expected_prev[28] !== last_MEMOutALU_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[28] = MEMOutALU_expected_prev[28];
	end
	if (
		( MEMOutALU_expected_prev[29] !== 1'bx ) && ( MEMOutALU_prev[29] !== MEMOutALU_expected_prev[29] )
		&& ((MEMOutALU_expected_prev[29] !== last_MEMOutALU_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[29] = MEMOutALU_expected_prev[29];
	end
	if (
		( MEMOutALU_expected_prev[30] !== 1'bx ) && ( MEMOutALU_prev[30] !== MEMOutALU_expected_prev[30] )
		&& ((MEMOutALU_expected_prev[30] !== last_MEMOutALU_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[30] = MEMOutALU_expected_prev[30];
	end
	if (
		( MEMOutALU_expected_prev[31] !== 1'bx ) && ( MEMOutALU_prev[31] !== MEMOutALU_expected_prev[31] )
		&& ((MEMOutALU_expected_prev[31] !== last_MEMOutALU_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMOutALU[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMOutALU_expected_prev);
		$display ("     Real value = %b", MEMOutALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_MEMOutALU_exp[31] = MEMOutALU_expected_prev[31];
	end
	if (
		( MemReadValue_expected_prev[0] !== 1'bx ) && ( MemReadValue_prev[0] !== MemReadValue_expected_prev[0] )
		&& ((MemReadValue_expected_prev[0] !== last_MemReadValue_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[0] = MemReadValue_expected_prev[0];
	end
	if (
		( MemReadValue_expected_prev[1] !== 1'bx ) && ( MemReadValue_prev[1] !== MemReadValue_expected_prev[1] )
		&& ((MemReadValue_expected_prev[1] !== last_MemReadValue_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[1] = MemReadValue_expected_prev[1];
	end
	if (
		( MemReadValue_expected_prev[2] !== 1'bx ) && ( MemReadValue_prev[2] !== MemReadValue_expected_prev[2] )
		&& ((MemReadValue_expected_prev[2] !== last_MemReadValue_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[2] = MemReadValue_expected_prev[2];
	end
	if (
		( MemReadValue_expected_prev[3] !== 1'bx ) && ( MemReadValue_prev[3] !== MemReadValue_expected_prev[3] )
		&& ((MemReadValue_expected_prev[3] !== last_MemReadValue_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[3] = MemReadValue_expected_prev[3];
	end
	if (
		( MemReadValue_expected_prev[4] !== 1'bx ) && ( MemReadValue_prev[4] !== MemReadValue_expected_prev[4] )
		&& ((MemReadValue_expected_prev[4] !== last_MemReadValue_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[4] = MemReadValue_expected_prev[4];
	end
	if (
		( MemReadValue_expected_prev[5] !== 1'bx ) && ( MemReadValue_prev[5] !== MemReadValue_expected_prev[5] )
		&& ((MemReadValue_expected_prev[5] !== last_MemReadValue_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[5] = MemReadValue_expected_prev[5];
	end
	if (
		( MemReadValue_expected_prev[6] !== 1'bx ) && ( MemReadValue_prev[6] !== MemReadValue_expected_prev[6] )
		&& ((MemReadValue_expected_prev[6] !== last_MemReadValue_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[6] = MemReadValue_expected_prev[6];
	end
	if (
		( MemReadValue_expected_prev[7] !== 1'bx ) && ( MemReadValue_prev[7] !== MemReadValue_expected_prev[7] )
		&& ((MemReadValue_expected_prev[7] !== last_MemReadValue_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[7] = MemReadValue_expected_prev[7];
	end
	if (
		( MemReadValue_expected_prev[8] !== 1'bx ) && ( MemReadValue_prev[8] !== MemReadValue_expected_prev[8] )
		&& ((MemReadValue_expected_prev[8] !== last_MemReadValue_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[8] = MemReadValue_expected_prev[8];
	end
	if (
		( MemReadValue_expected_prev[9] !== 1'bx ) && ( MemReadValue_prev[9] !== MemReadValue_expected_prev[9] )
		&& ((MemReadValue_expected_prev[9] !== last_MemReadValue_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[9] = MemReadValue_expected_prev[9];
	end
	if (
		( MemReadValue_expected_prev[10] !== 1'bx ) && ( MemReadValue_prev[10] !== MemReadValue_expected_prev[10] )
		&& ((MemReadValue_expected_prev[10] !== last_MemReadValue_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[10] = MemReadValue_expected_prev[10];
	end
	if (
		( MemReadValue_expected_prev[11] !== 1'bx ) && ( MemReadValue_prev[11] !== MemReadValue_expected_prev[11] )
		&& ((MemReadValue_expected_prev[11] !== last_MemReadValue_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[11] = MemReadValue_expected_prev[11];
	end
	if (
		( MemReadValue_expected_prev[12] !== 1'bx ) && ( MemReadValue_prev[12] !== MemReadValue_expected_prev[12] )
		&& ((MemReadValue_expected_prev[12] !== last_MemReadValue_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[12] = MemReadValue_expected_prev[12];
	end
	if (
		( MemReadValue_expected_prev[13] !== 1'bx ) && ( MemReadValue_prev[13] !== MemReadValue_expected_prev[13] )
		&& ((MemReadValue_expected_prev[13] !== last_MemReadValue_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[13] = MemReadValue_expected_prev[13];
	end
	if (
		( MemReadValue_expected_prev[14] !== 1'bx ) && ( MemReadValue_prev[14] !== MemReadValue_expected_prev[14] )
		&& ((MemReadValue_expected_prev[14] !== last_MemReadValue_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[14] = MemReadValue_expected_prev[14];
	end
	if (
		( MemReadValue_expected_prev[15] !== 1'bx ) && ( MemReadValue_prev[15] !== MemReadValue_expected_prev[15] )
		&& ((MemReadValue_expected_prev[15] !== last_MemReadValue_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[15] = MemReadValue_expected_prev[15];
	end
	if (
		( MemReadValue_expected_prev[16] !== 1'bx ) && ( MemReadValue_prev[16] !== MemReadValue_expected_prev[16] )
		&& ((MemReadValue_expected_prev[16] !== last_MemReadValue_exp[16]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[16] = MemReadValue_expected_prev[16];
	end
	if (
		( MemReadValue_expected_prev[17] !== 1'bx ) && ( MemReadValue_prev[17] !== MemReadValue_expected_prev[17] )
		&& ((MemReadValue_expected_prev[17] !== last_MemReadValue_exp[17]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[17] = MemReadValue_expected_prev[17];
	end
	if (
		( MemReadValue_expected_prev[18] !== 1'bx ) && ( MemReadValue_prev[18] !== MemReadValue_expected_prev[18] )
		&& ((MemReadValue_expected_prev[18] !== last_MemReadValue_exp[18]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[18] = MemReadValue_expected_prev[18];
	end
	if (
		( MemReadValue_expected_prev[19] !== 1'bx ) && ( MemReadValue_prev[19] !== MemReadValue_expected_prev[19] )
		&& ((MemReadValue_expected_prev[19] !== last_MemReadValue_exp[19]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[19] = MemReadValue_expected_prev[19];
	end
	if (
		( MemReadValue_expected_prev[20] !== 1'bx ) && ( MemReadValue_prev[20] !== MemReadValue_expected_prev[20] )
		&& ((MemReadValue_expected_prev[20] !== last_MemReadValue_exp[20]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[20] = MemReadValue_expected_prev[20];
	end
	if (
		( MemReadValue_expected_prev[21] !== 1'bx ) && ( MemReadValue_prev[21] !== MemReadValue_expected_prev[21] )
		&& ((MemReadValue_expected_prev[21] !== last_MemReadValue_exp[21]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[21] = MemReadValue_expected_prev[21];
	end
	if (
		( MemReadValue_expected_prev[22] !== 1'bx ) && ( MemReadValue_prev[22] !== MemReadValue_expected_prev[22] )
		&& ((MemReadValue_expected_prev[22] !== last_MemReadValue_exp[22]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[22] = MemReadValue_expected_prev[22];
	end
	if (
		( MemReadValue_expected_prev[23] !== 1'bx ) && ( MemReadValue_prev[23] !== MemReadValue_expected_prev[23] )
		&& ((MemReadValue_expected_prev[23] !== last_MemReadValue_exp[23]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[23] = MemReadValue_expected_prev[23];
	end
	if (
		( MemReadValue_expected_prev[24] !== 1'bx ) && ( MemReadValue_prev[24] !== MemReadValue_expected_prev[24] )
		&& ((MemReadValue_expected_prev[24] !== last_MemReadValue_exp[24]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[24] = MemReadValue_expected_prev[24];
	end
	if (
		( MemReadValue_expected_prev[25] !== 1'bx ) && ( MemReadValue_prev[25] !== MemReadValue_expected_prev[25] )
		&& ((MemReadValue_expected_prev[25] !== last_MemReadValue_exp[25]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[25] = MemReadValue_expected_prev[25];
	end
	if (
		( MemReadValue_expected_prev[26] !== 1'bx ) && ( MemReadValue_prev[26] !== MemReadValue_expected_prev[26] )
		&& ((MemReadValue_expected_prev[26] !== last_MemReadValue_exp[26]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[26] = MemReadValue_expected_prev[26];
	end
	if (
		( MemReadValue_expected_prev[27] !== 1'bx ) && ( MemReadValue_prev[27] !== MemReadValue_expected_prev[27] )
		&& ((MemReadValue_expected_prev[27] !== last_MemReadValue_exp[27]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[27] = MemReadValue_expected_prev[27];
	end
	if (
		( MemReadValue_expected_prev[28] !== 1'bx ) && ( MemReadValue_prev[28] !== MemReadValue_expected_prev[28] )
		&& ((MemReadValue_expected_prev[28] !== last_MemReadValue_exp[28]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[28] = MemReadValue_expected_prev[28];
	end
	if (
		( MemReadValue_expected_prev[29] !== 1'bx ) && ( MemReadValue_prev[29] !== MemReadValue_expected_prev[29] )
		&& ((MemReadValue_expected_prev[29] !== last_MemReadValue_exp[29]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[29] = MemReadValue_expected_prev[29];
	end
	if (
		( MemReadValue_expected_prev[30] !== 1'bx ) && ( MemReadValue_prev[30] !== MemReadValue_expected_prev[30] )
		&& ((MemReadValue_expected_prev[30] !== last_MemReadValue_exp[30]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[30] = MemReadValue_expected_prev[30];
	end
	if (
		( MemReadValue_expected_prev[31] !== 1'bx ) && ( MemReadValue_prev[31] !== MemReadValue_expected_prev[31] )
		&& ((MemReadValue_expected_prev[31] !== last_MemReadValue_exp[31]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemReadValue[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemReadValue_expected_prev);
		$display ("     Real value = %b", MemReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_MemReadValue_exp[31] = MemReadValue_expected_prev[31];
	end
	if (
		( outALU_expected_prev[0] !== 1'bx ) && ( outALU_prev[0] !== outALU_expected_prev[0] )
		&& ((outALU_expected_prev[0] !== last_outALU_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[0] = outALU_expected_prev[0];
	end
	if (
		( outALU_expected_prev[1] !== 1'bx ) && ( outALU_prev[1] !== outALU_expected_prev[1] )
		&& ((outALU_expected_prev[1] !== last_outALU_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[1] = outALU_expected_prev[1];
	end
	if (
		( outALU_expected_prev[2] !== 1'bx ) && ( outALU_prev[2] !== outALU_expected_prev[2] )
		&& ((outALU_expected_prev[2] !== last_outALU_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[2] = outALU_expected_prev[2];
	end
	if (
		( outALU_expected_prev[3] !== 1'bx ) && ( outALU_prev[3] !== outALU_expected_prev[3] )
		&& ((outALU_expected_prev[3] !== last_outALU_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[3] = outALU_expected_prev[3];
	end
	if (
		( outALU_expected_prev[4] !== 1'bx ) && ( outALU_prev[4] !== outALU_expected_prev[4] )
		&& ((outALU_expected_prev[4] !== last_outALU_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[4] = outALU_expected_prev[4];
	end
	if (
		( outALU_expected_prev[5] !== 1'bx ) && ( outALU_prev[5] !== outALU_expected_prev[5] )
		&& ((outALU_expected_prev[5] !== last_outALU_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[5] = outALU_expected_prev[5];
	end
	if (
		( outALU_expected_prev[6] !== 1'bx ) && ( outALU_prev[6] !== outALU_expected_prev[6] )
		&& ((outALU_expected_prev[6] !== last_outALU_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[6] = outALU_expected_prev[6];
	end
	if (
		( outALU_expected_prev[7] !== 1'bx ) && ( outALU_prev[7] !== outALU_expected_prev[7] )
		&& ((outALU_expected_prev[7] !== last_outALU_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[7] = outALU_expected_prev[7];
	end
	if (
		( outALU_expected_prev[8] !== 1'bx ) && ( outALU_prev[8] !== outALU_expected_prev[8] )
		&& ((outALU_expected_prev[8] !== last_outALU_exp[8]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[8] = outALU_expected_prev[8];
	end
	if (
		( outALU_expected_prev[9] !== 1'bx ) && ( outALU_prev[9] !== outALU_expected_prev[9] )
		&& ((outALU_expected_prev[9] !== last_outALU_exp[9]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[9] = outALU_expected_prev[9];
	end
	if (
		( outALU_expected_prev[10] !== 1'bx ) && ( outALU_prev[10] !== outALU_expected_prev[10] )
		&& ((outALU_expected_prev[10] !== last_outALU_exp[10]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[10] = outALU_expected_prev[10];
	end
	if (
		( outALU_expected_prev[11] !== 1'bx ) && ( outALU_prev[11] !== outALU_expected_prev[11] )
		&& ((outALU_expected_prev[11] !== last_outALU_exp[11]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[11] = outALU_expected_prev[11];
	end
	if (
		( outALU_expected_prev[12] !== 1'bx ) && ( outALU_prev[12] !== outALU_expected_prev[12] )
		&& ((outALU_expected_prev[12] !== last_outALU_exp[12]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[12] = outALU_expected_prev[12];
	end
	if (
		( outALU_expected_prev[13] !== 1'bx ) && ( outALU_prev[13] !== outALU_expected_prev[13] )
		&& ((outALU_expected_prev[13] !== last_outALU_exp[13]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[13] = outALU_expected_prev[13];
	end
	if (
		( outALU_expected_prev[14] !== 1'bx ) && ( outALU_prev[14] !== outALU_expected_prev[14] )
		&& ((outALU_expected_prev[14] !== last_outALU_exp[14]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[14] = outALU_expected_prev[14];
	end
	if (
		( outALU_expected_prev[15] !== 1'bx ) && ( outALU_prev[15] !== outALU_expected_prev[15] )
		&& ((outALU_expected_prev[15] !== last_outALU_exp[15]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[15] = outALU_expected_prev[15];
	end
	if (
		( outALU_expected_prev[16] !== 1'bx ) && ( outALU_prev[16] !== outALU_expected_prev[16] )
		&& ((outALU_expected_prev[16] !== last_outALU_exp[16]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[16] = outALU_expected_prev[16];
	end
	if (
		( outALU_expected_prev[17] !== 1'bx ) && ( outALU_prev[17] !== outALU_expected_prev[17] )
		&& ((outALU_expected_prev[17] !== last_outALU_exp[17]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[17] = outALU_expected_prev[17];
	end
	if (
		( outALU_expected_prev[18] !== 1'bx ) && ( outALU_prev[18] !== outALU_expected_prev[18] )
		&& ((outALU_expected_prev[18] !== last_outALU_exp[18]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[18] = outALU_expected_prev[18];
	end
	if (
		( outALU_expected_prev[19] !== 1'bx ) && ( outALU_prev[19] !== outALU_expected_prev[19] )
		&& ((outALU_expected_prev[19] !== last_outALU_exp[19]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[19] = outALU_expected_prev[19];
	end
	if (
		( outALU_expected_prev[20] !== 1'bx ) && ( outALU_prev[20] !== outALU_expected_prev[20] )
		&& ((outALU_expected_prev[20] !== last_outALU_exp[20]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[20] = outALU_expected_prev[20];
	end
	if (
		( outALU_expected_prev[21] !== 1'bx ) && ( outALU_prev[21] !== outALU_expected_prev[21] )
		&& ((outALU_expected_prev[21] !== last_outALU_exp[21]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[21] = outALU_expected_prev[21];
	end
	if (
		( outALU_expected_prev[22] !== 1'bx ) && ( outALU_prev[22] !== outALU_expected_prev[22] )
		&& ((outALU_expected_prev[22] !== last_outALU_exp[22]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[22] = outALU_expected_prev[22];
	end
	if (
		( outALU_expected_prev[23] !== 1'bx ) && ( outALU_prev[23] !== outALU_expected_prev[23] )
		&& ((outALU_expected_prev[23] !== last_outALU_exp[23]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[23] = outALU_expected_prev[23];
	end
	if (
		( outALU_expected_prev[24] !== 1'bx ) && ( outALU_prev[24] !== outALU_expected_prev[24] )
		&& ((outALU_expected_prev[24] !== last_outALU_exp[24]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[24] = outALU_expected_prev[24];
	end
	if (
		( outALU_expected_prev[25] !== 1'bx ) && ( outALU_prev[25] !== outALU_expected_prev[25] )
		&& ((outALU_expected_prev[25] !== last_outALU_exp[25]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[25] = outALU_expected_prev[25];
	end
	if (
		( outALU_expected_prev[26] !== 1'bx ) && ( outALU_prev[26] !== outALU_expected_prev[26] )
		&& ((outALU_expected_prev[26] !== last_outALU_exp[26]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[26] = outALU_expected_prev[26];
	end
	if (
		( outALU_expected_prev[27] !== 1'bx ) && ( outALU_prev[27] !== outALU_expected_prev[27] )
		&& ((outALU_expected_prev[27] !== last_outALU_exp[27]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[27] = outALU_expected_prev[27];
	end
	if (
		( outALU_expected_prev[28] !== 1'bx ) && ( outALU_prev[28] !== outALU_expected_prev[28] )
		&& ((outALU_expected_prev[28] !== last_outALU_exp[28]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[28] = outALU_expected_prev[28];
	end
	if (
		( outALU_expected_prev[29] !== 1'bx ) && ( outALU_prev[29] !== outALU_expected_prev[29] )
		&& ((outALU_expected_prev[29] !== last_outALU_exp[29]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[29] = outALU_expected_prev[29];
	end
	if (
		( outALU_expected_prev[30] !== 1'bx ) && ( outALU_prev[30] !== outALU_expected_prev[30] )
		&& ((outALU_expected_prev[30] !== last_outALU_exp[30]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[30] = outALU_expected_prev[30];
	end
	if (
		( outALU_expected_prev[31] !== 1'bx ) && ( outALU_prev[31] !== outALU_expected_prev[31] )
		&& ((outALU_expected_prev[31] !== last_outALU_exp[31]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_outALU_exp[31] = outALU_expected_prev[31];
	end
	if (
		( RegA_expected_prev[0] !== 1'bx ) && ( RegA_prev[0] !== RegA_expected_prev[0] )
		&& ((RegA_expected_prev[0] !== last_RegA_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[0] = RegA_expected_prev[0];
	end
	if (
		( RegA_expected_prev[1] !== 1'bx ) && ( RegA_prev[1] !== RegA_expected_prev[1] )
		&& ((RegA_expected_prev[1] !== last_RegA_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[1] = RegA_expected_prev[1];
	end
	if (
		( RegA_expected_prev[2] !== 1'bx ) && ( RegA_prev[2] !== RegA_expected_prev[2] )
		&& ((RegA_expected_prev[2] !== last_RegA_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[2] = RegA_expected_prev[2];
	end
	if (
		( RegA_expected_prev[3] !== 1'bx ) && ( RegA_prev[3] !== RegA_expected_prev[3] )
		&& ((RegA_expected_prev[3] !== last_RegA_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[3] = RegA_expected_prev[3];
	end
	if (
		( RegA_expected_prev[4] !== 1'bx ) && ( RegA_prev[4] !== RegA_expected_prev[4] )
		&& ((RegA_expected_prev[4] !== last_RegA_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[4] = RegA_expected_prev[4];
	end
	if (
		( RegA_expected_prev[5] !== 1'bx ) && ( RegA_prev[5] !== RegA_expected_prev[5] )
		&& ((RegA_expected_prev[5] !== last_RegA_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[5] = RegA_expected_prev[5];
	end
	if (
		( RegA_expected_prev[6] !== 1'bx ) && ( RegA_prev[6] !== RegA_expected_prev[6] )
		&& ((RegA_expected_prev[6] !== last_RegA_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[6] = RegA_expected_prev[6];
	end
	if (
		( RegA_expected_prev[7] !== 1'bx ) && ( RegA_prev[7] !== RegA_expected_prev[7] )
		&& ((RegA_expected_prev[7] !== last_RegA_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[7] = RegA_expected_prev[7];
	end
	if (
		( RegA_expected_prev[8] !== 1'bx ) && ( RegA_prev[8] !== RegA_expected_prev[8] )
		&& ((RegA_expected_prev[8] !== last_RegA_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[8] = RegA_expected_prev[8];
	end
	if (
		( RegA_expected_prev[9] !== 1'bx ) && ( RegA_prev[9] !== RegA_expected_prev[9] )
		&& ((RegA_expected_prev[9] !== last_RegA_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[9] = RegA_expected_prev[9];
	end
	if (
		( RegA_expected_prev[10] !== 1'bx ) && ( RegA_prev[10] !== RegA_expected_prev[10] )
		&& ((RegA_expected_prev[10] !== last_RegA_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[10] = RegA_expected_prev[10];
	end
	if (
		( RegA_expected_prev[11] !== 1'bx ) && ( RegA_prev[11] !== RegA_expected_prev[11] )
		&& ((RegA_expected_prev[11] !== last_RegA_exp[11]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[11] = RegA_expected_prev[11];
	end
	if (
		( RegA_expected_prev[12] !== 1'bx ) && ( RegA_prev[12] !== RegA_expected_prev[12] )
		&& ((RegA_expected_prev[12] !== last_RegA_exp[12]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[12] = RegA_expected_prev[12];
	end
	if (
		( RegA_expected_prev[13] !== 1'bx ) && ( RegA_prev[13] !== RegA_expected_prev[13] )
		&& ((RegA_expected_prev[13] !== last_RegA_exp[13]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[13] = RegA_expected_prev[13];
	end
	if (
		( RegA_expected_prev[14] !== 1'bx ) && ( RegA_prev[14] !== RegA_expected_prev[14] )
		&& ((RegA_expected_prev[14] !== last_RegA_exp[14]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[14] = RegA_expected_prev[14];
	end
	if (
		( RegA_expected_prev[15] !== 1'bx ) && ( RegA_prev[15] !== RegA_expected_prev[15] )
		&& ((RegA_expected_prev[15] !== last_RegA_exp[15]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[15] = RegA_expected_prev[15];
	end
	if (
		( RegA_expected_prev[16] !== 1'bx ) && ( RegA_prev[16] !== RegA_expected_prev[16] )
		&& ((RegA_expected_prev[16] !== last_RegA_exp[16]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[16] = RegA_expected_prev[16];
	end
	if (
		( RegA_expected_prev[17] !== 1'bx ) && ( RegA_prev[17] !== RegA_expected_prev[17] )
		&& ((RegA_expected_prev[17] !== last_RegA_exp[17]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[17] = RegA_expected_prev[17];
	end
	if (
		( RegA_expected_prev[18] !== 1'bx ) && ( RegA_prev[18] !== RegA_expected_prev[18] )
		&& ((RegA_expected_prev[18] !== last_RegA_exp[18]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[18] = RegA_expected_prev[18];
	end
	if (
		( RegA_expected_prev[19] !== 1'bx ) && ( RegA_prev[19] !== RegA_expected_prev[19] )
		&& ((RegA_expected_prev[19] !== last_RegA_exp[19]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[19] = RegA_expected_prev[19];
	end
	if (
		( RegA_expected_prev[20] !== 1'bx ) && ( RegA_prev[20] !== RegA_expected_prev[20] )
		&& ((RegA_expected_prev[20] !== last_RegA_exp[20]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[20] = RegA_expected_prev[20];
	end
	if (
		( RegA_expected_prev[21] !== 1'bx ) && ( RegA_prev[21] !== RegA_expected_prev[21] )
		&& ((RegA_expected_prev[21] !== last_RegA_exp[21]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[21] = RegA_expected_prev[21];
	end
	if (
		( RegA_expected_prev[22] !== 1'bx ) && ( RegA_prev[22] !== RegA_expected_prev[22] )
		&& ((RegA_expected_prev[22] !== last_RegA_exp[22]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[22] = RegA_expected_prev[22];
	end
	if (
		( RegA_expected_prev[23] !== 1'bx ) && ( RegA_prev[23] !== RegA_expected_prev[23] )
		&& ((RegA_expected_prev[23] !== last_RegA_exp[23]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[23] = RegA_expected_prev[23];
	end
	if (
		( RegA_expected_prev[24] !== 1'bx ) && ( RegA_prev[24] !== RegA_expected_prev[24] )
		&& ((RegA_expected_prev[24] !== last_RegA_exp[24]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[24] = RegA_expected_prev[24];
	end
	if (
		( RegA_expected_prev[25] !== 1'bx ) && ( RegA_prev[25] !== RegA_expected_prev[25] )
		&& ((RegA_expected_prev[25] !== last_RegA_exp[25]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[25] = RegA_expected_prev[25];
	end
	if (
		( RegA_expected_prev[26] !== 1'bx ) && ( RegA_prev[26] !== RegA_expected_prev[26] )
		&& ((RegA_expected_prev[26] !== last_RegA_exp[26]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[26] = RegA_expected_prev[26];
	end
	if (
		( RegA_expected_prev[27] !== 1'bx ) && ( RegA_prev[27] !== RegA_expected_prev[27] )
		&& ((RegA_expected_prev[27] !== last_RegA_exp[27]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[27] = RegA_expected_prev[27];
	end
	if (
		( RegA_expected_prev[28] !== 1'bx ) && ( RegA_prev[28] !== RegA_expected_prev[28] )
		&& ((RegA_expected_prev[28] !== last_RegA_exp[28]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[28] = RegA_expected_prev[28];
	end
	if (
		( RegA_expected_prev[29] !== 1'bx ) && ( RegA_prev[29] !== RegA_expected_prev[29] )
		&& ((RegA_expected_prev[29] !== last_RegA_exp[29]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[29] = RegA_expected_prev[29];
	end
	if (
		( RegA_expected_prev[30] !== 1'bx ) && ( RegA_prev[30] !== RegA_expected_prev[30] )
		&& ((RegA_expected_prev[30] !== last_RegA_exp[30]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[30] = RegA_expected_prev[30];
	end
	if (
		( RegA_expected_prev[31] !== 1'bx ) && ( RegA_prev[31] !== RegA_expected_prev[31] )
		&& ((RegA_expected_prev[31] !== last_RegA_exp[31]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegA_expected_prev);
		$display ("     Real value = %b", RegA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_RegA_exp[31] = RegA_expected_prev[31];
	end
	if (
		( Stall_expected_prev !== 1'bx ) && ( Stall_prev !== Stall_expected_prev )
		&& ((Stall_expected_prev !== last_Stall_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stall :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stall_expected_prev);
		$display ("     Real value = %b", Stall_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_Stall_exp = Stall_expected_prev;
	end
	if (
		( t0R_expected_prev[0] !== 1'bx ) && ( t0R_prev[0] !== t0R_expected_prev[0] )
		&& ((t0R_expected_prev[0] !== last_t0R_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[0] = t0R_expected_prev[0];
	end
	if (
		( t0R_expected_prev[1] !== 1'bx ) && ( t0R_prev[1] !== t0R_expected_prev[1] )
		&& ((t0R_expected_prev[1] !== last_t0R_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[1] = t0R_expected_prev[1];
	end
	if (
		( t0R_expected_prev[2] !== 1'bx ) && ( t0R_prev[2] !== t0R_expected_prev[2] )
		&& ((t0R_expected_prev[2] !== last_t0R_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[2] = t0R_expected_prev[2];
	end
	if (
		( t0R_expected_prev[3] !== 1'bx ) && ( t0R_prev[3] !== t0R_expected_prev[3] )
		&& ((t0R_expected_prev[3] !== last_t0R_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[3] = t0R_expected_prev[3];
	end
	if (
		( t0R_expected_prev[4] !== 1'bx ) && ( t0R_prev[4] !== t0R_expected_prev[4] )
		&& ((t0R_expected_prev[4] !== last_t0R_exp[4]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[4] = t0R_expected_prev[4];
	end
	if (
		( t0R_expected_prev[5] !== 1'bx ) && ( t0R_prev[5] !== t0R_expected_prev[5] )
		&& ((t0R_expected_prev[5] !== last_t0R_exp[5]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[5] = t0R_expected_prev[5];
	end
	if (
		( t0R_expected_prev[6] !== 1'bx ) && ( t0R_prev[6] !== t0R_expected_prev[6] )
		&& ((t0R_expected_prev[6] !== last_t0R_exp[6]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[6] = t0R_expected_prev[6];
	end
	if (
		( t0R_expected_prev[7] !== 1'bx ) && ( t0R_prev[7] !== t0R_expected_prev[7] )
		&& ((t0R_expected_prev[7] !== last_t0R_exp[7]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[7] = t0R_expected_prev[7];
	end
	if (
		( t0R_expected_prev[8] !== 1'bx ) && ( t0R_prev[8] !== t0R_expected_prev[8] )
		&& ((t0R_expected_prev[8] !== last_t0R_exp[8]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[8] = t0R_expected_prev[8];
	end
	if (
		( t0R_expected_prev[9] !== 1'bx ) && ( t0R_prev[9] !== t0R_expected_prev[9] )
		&& ((t0R_expected_prev[9] !== last_t0R_exp[9]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[9] = t0R_expected_prev[9];
	end
	if (
		( t0R_expected_prev[10] !== 1'bx ) && ( t0R_prev[10] !== t0R_expected_prev[10] )
		&& ((t0R_expected_prev[10] !== last_t0R_exp[10]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[10] = t0R_expected_prev[10];
	end
	if (
		( t0R_expected_prev[11] !== 1'bx ) && ( t0R_prev[11] !== t0R_expected_prev[11] )
		&& ((t0R_expected_prev[11] !== last_t0R_exp[11]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[11] = t0R_expected_prev[11];
	end
	if (
		( t0R_expected_prev[12] !== 1'bx ) && ( t0R_prev[12] !== t0R_expected_prev[12] )
		&& ((t0R_expected_prev[12] !== last_t0R_exp[12]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[12] = t0R_expected_prev[12];
	end
	if (
		( t0R_expected_prev[13] !== 1'bx ) && ( t0R_prev[13] !== t0R_expected_prev[13] )
		&& ((t0R_expected_prev[13] !== last_t0R_exp[13]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[13] = t0R_expected_prev[13];
	end
	if (
		( t0R_expected_prev[14] !== 1'bx ) && ( t0R_prev[14] !== t0R_expected_prev[14] )
		&& ((t0R_expected_prev[14] !== last_t0R_exp[14]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[14] = t0R_expected_prev[14];
	end
	if (
		( t0R_expected_prev[15] !== 1'bx ) && ( t0R_prev[15] !== t0R_expected_prev[15] )
		&& ((t0R_expected_prev[15] !== last_t0R_exp[15]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[15] = t0R_expected_prev[15];
	end
	if (
		( t0R_expected_prev[16] !== 1'bx ) && ( t0R_prev[16] !== t0R_expected_prev[16] )
		&& ((t0R_expected_prev[16] !== last_t0R_exp[16]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[16] = t0R_expected_prev[16];
	end
	if (
		( t0R_expected_prev[17] !== 1'bx ) && ( t0R_prev[17] !== t0R_expected_prev[17] )
		&& ((t0R_expected_prev[17] !== last_t0R_exp[17]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[17] = t0R_expected_prev[17];
	end
	if (
		( t0R_expected_prev[18] !== 1'bx ) && ( t0R_prev[18] !== t0R_expected_prev[18] )
		&& ((t0R_expected_prev[18] !== last_t0R_exp[18]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[18] = t0R_expected_prev[18];
	end
	if (
		( t0R_expected_prev[19] !== 1'bx ) && ( t0R_prev[19] !== t0R_expected_prev[19] )
		&& ((t0R_expected_prev[19] !== last_t0R_exp[19]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[19] = t0R_expected_prev[19];
	end
	if (
		( t0R_expected_prev[20] !== 1'bx ) && ( t0R_prev[20] !== t0R_expected_prev[20] )
		&& ((t0R_expected_prev[20] !== last_t0R_exp[20]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[20] = t0R_expected_prev[20];
	end
	if (
		( t0R_expected_prev[21] !== 1'bx ) && ( t0R_prev[21] !== t0R_expected_prev[21] )
		&& ((t0R_expected_prev[21] !== last_t0R_exp[21]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[21] = t0R_expected_prev[21];
	end
	if (
		( t0R_expected_prev[22] !== 1'bx ) && ( t0R_prev[22] !== t0R_expected_prev[22] )
		&& ((t0R_expected_prev[22] !== last_t0R_exp[22]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[22] = t0R_expected_prev[22];
	end
	if (
		( t0R_expected_prev[23] !== 1'bx ) && ( t0R_prev[23] !== t0R_expected_prev[23] )
		&& ((t0R_expected_prev[23] !== last_t0R_exp[23]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[23] = t0R_expected_prev[23];
	end
	if (
		( t0R_expected_prev[24] !== 1'bx ) && ( t0R_prev[24] !== t0R_expected_prev[24] )
		&& ((t0R_expected_prev[24] !== last_t0R_exp[24]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[24] = t0R_expected_prev[24];
	end
	if (
		( t0R_expected_prev[25] !== 1'bx ) && ( t0R_prev[25] !== t0R_expected_prev[25] )
		&& ((t0R_expected_prev[25] !== last_t0R_exp[25]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[25] = t0R_expected_prev[25];
	end
	if (
		( t0R_expected_prev[26] !== 1'bx ) && ( t0R_prev[26] !== t0R_expected_prev[26] )
		&& ((t0R_expected_prev[26] !== last_t0R_exp[26]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[26] = t0R_expected_prev[26];
	end
	if (
		( t0R_expected_prev[27] !== 1'bx ) && ( t0R_prev[27] !== t0R_expected_prev[27] )
		&& ((t0R_expected_prev[27] !== last_t0R_exp[27]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[27] = t0R_expected_prev[27];
	end
	if (
		( t0R_expected_prev[28] !== 1'bx ) && ( t0R_prev[28] !== t0R_expected_prev[28] )
		&& ((t0R_expected_prev[28] !== last_t0R_exp[28]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[28] = t0R_expected_prev[28];
	end
	if (
		( t0R_expected_prev[29] !== 1'bx ) && ( t0R_prev[29] !== t0R_expected_prev[29] )
		&& ((t0R_expected_prev[29] !== last_t0R_exp[29]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[29] = t0R_expected_prev[29];
	end
	if (
		( t0R_expected_prev[30] !== 1'bx ) && ( t0R_prev[30] !== t0R_expected_prev[30] )
		&& ((t0R_expected_prev[30] !== last_t0R_exp[30]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[30] = t0R_expected_prev[30];
	end
	if (
		( t0R_expected_prev[31] !== 1'bx ) && ( t0R_prev[31] !== t0R_expected_prev[31] )
		&& ((t0R_expected_prev[31] !== last_t0R_exp[31]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0R[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0R_expected_prev);
		$display ("     Real value = %b", t0R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t0R_exp[31] = t0R_expected_prev[31];
	end
	if (
		( t1R_expected_prev[0] !== 1'bx ) && ( t1R_prev[0] !== t1R_expected_prev[0] )
		&& ((t1R_expected_prev[0] !== last_t1R_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[0] = t1R_expected_prev[0];
	end
	if (
		( t1R_expected_prev[1] !== 1'bx ) && ( t1R_prev[1] !== t1R_expected_prev[1] )
		&& ((t1R_expected_prev[1] !== last_t1R_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[1] = t1R_expected_prev[1];
	end
	if (
		( t1R_expected_prev[2] !== 1'bx ) && ( t1R_prev[2] !== t1R_expected_prev[2] )
		&& ((t1R_expected_prev[2] !== last_t1R_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[2] = t1R_expected_prev[2];
	end
	if (
		( t1R_expected_prev[3] !== 1'bx ) && ( t1R_prev[3] !== t1R_expected_prev[3] )
		&& ((t1R_expected_prev[3] !== last_t1R_exp[3]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[3] = t1R_expected_prev[3];
	end
	if (
		( t1R_expected_prev[4] !== 1'bx ) && ( t1R_prev[4] !== t1R_expected_prev[4] )
		&& ((t1R_expected_prev[4] !== last_t1R_exp[4]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[4] = t1R_expected_prev[4];
	end
	if (
		( t1R_expected_prev[5] !== 1'bx ) && ( t1R_prev[5] !== t1R_expected_prev[5] )
		&& ((t1R_expected_prev[5] !== last_t1R_exp[5]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[5] = t1R_expected_prev[5];
	end
	if (
		( t1R_expected_prev[6] !== 1'bx ) && ( t1R_prev[6] !== t1R_expected_prev[6] )
		&& ((t1R_expected_prev[6] !== last_t1R_exp[6]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[6] = t1R_expected_prev[6];
	end
	if (
		( t1R_expected_prev[7] !== 1'bx ) && ( t1R_prev[7] !== t1R_expected_prev[7] )
		&& ((t1R_expected_prev[7] !== last_t1R_exp[7]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[7] = t1R_expected_prev[7];
	end
	if (
		( t1R_expected_prev[8] !== 1'bx ) && ( t1R_prev[8] !== t1R_expected_prev[8] )
		&& ((t1R_expected_prev[8] !== last_t1R_exp[8]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[8] = t1R_expected_prev[8];
	end
	if (
		( t1R_expected_prev[9] !== 1'bx ) && ( t1R_prev[9] !== t1R_expected_prev[9] )
		&& ((t1R_expected_prev[9] !== last_t1R_exp[9]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[9] = t1R_expected_prev[9];
	end
	if (
		( t1R_expected_prev[10] !== 1'bx ) && ( t1R_prev[10] !== t1R_expected_prev[10] )
		&& ((t1R_expected_prev[10] !== last_t1R_exp[10]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[10] = t1R_expected_prev[10];
	end
	if (
		( t1R_expected_prev[11] !== 1'bx ) && ( t1R_prev[11] !== t1R_expected_prev[11] )
		&& ((t1R_expected_prev[11] !== last_t1R_exp[11]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[11] = t1R_expected_prev[11];
	end
	if (
		( t1R_expected_prev[12] !== 1'bx ) && ( t1R_prev[12] !== t1R_expected_prev[12] )
		&& ((t1R_expected_prev[12] !== last_t1R_exp[12]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[12] = t1R_expected_prev[12];
	end
	if (
		( t1R_expected_prev[13] !== 1'bx ) && ( t1R_prev[13] !== t1R_expected_prev[13] )
		&& ((t1R_expected_prev[13] !== last_t1R_exp[13]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[13] = t1R_expected_prev[13];
	end
	if (
		( t1R_expected_prev[14] !== 1'bx ) && ( t1R_prev[14] !== t1R_expected_prev[14] )
		&& ((t1R_expected_prev[14] !== last_t1R_exp[14]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[14] = t1R_expected_prev[14];
	end
	if (
		( t1R_expected_prev[15] !== 1'bx ) && ( t1R_prev[15] !== t1R_expected_prev[15] )
		&& ((t1R_expected_prev[15] !== last_t1R_exp[15]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[15] = t1R_expected_prev[15];
	end
	if (
		( t1R_expected_prev[16] !== 1'bx ) && ( t1R_prev[16] !== t1R_expected_prev[16] )
		&& ((t1R_expected_prev[16] !== last_t1R_exp[16]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[16] = t1R_expected_prev[16];
	end
	if (
		( t1R_expected_prev[17] !== 1'bx ) && ( t1R_prev[17] !== t1R_expected_prev[17] )
		&& ((t1R_expected_prev[17] !== last_t1R_exp[17]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[17] = t1R_expected_prev[17];
	end
	if (
		( t1R_expected_prev[18] !== 1'bx ) && ( t1R_prev[18] !== t1R_expected_prev[18] )
		&& ((t1R_expected_prev[18] !== last_t1R_exp[18]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[18] = t1R_expected_prev[18];
	end
	if (
		( t1R_expected_prev[19] !== 1'bx ) && ( t1R_prev[19] !== t1R_expected_prev[19] )
		&& ((t1R_expected_prev[19] !== last_t1R_exp[19]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[19] = t1R_expected_prev[19];
	end
	if (
		( t1R_expected_prev[20] !== 1'bx ) && ( t1R_prev[20] !== t1R_expected_prev[20] )
		&& ((t1R_expected_prev[20] !== last_t1R_exp[20]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[20] = t1R_expected_prev[20];
	end
	if (
		( t1R_expected_prev[21] !== 1'bx ) && ( t1R_prev[21] !== t1R_expected_prev[21] )
		&& ((t1R_expected_prev[21] !== last_t1R_exp[21]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[21] = t1R_expected_prev[21];
	end
	if (
		( t1R_expected_prev[22] !== 1'bx ) && ( t1R_prev[22] !== t1R_expected_prev[22] )
		&& ((t1R_expected_prev[22] !== last_t1R_exp[22]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[22] = t1R_expected_prev[22];
	end
	if (
		( t1R_expected_prev[23] !== 1'bx ) && ( t1R_prev[23] !== t1R_expected_prev[23] )
		&& ((t1R_expected_prev[23] !== last_t1R_exp[23]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[23] = t1R_expected_prev[23];
	end
	if (
		( t1R_expected_prev[24] !== 1'bx ) && ( t1R_prev[24] !== t1R_expected_prev[24] )
		&& ((t1R_expected_prev[24] !== last_t1R_exp[24]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[24] = t1R_expected_prev[24];
	end
	if (
		( t1R_expected_prev[25] !== 1'bx ) && ( t1R_prev[25] !== t1R_expected_prev[25] )
		&& ((t1R_expected_prev[25] !== last_t1R_exp[25]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[25] = t1R_expected_prev[25];
	end
	if (
		( t1R_expected_prev[26] !== 1'bx ) && ( t1R_prev[26] !== t1R_expected_prev[26] )
		&& ((t1R_expected_prev[26] !== last_t1R_exp[26]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[26] = t1R_expected_prev[26];
	end
	if (
		( t1R_expected_prev[27] !== 1'bx ) && ( t1R_prev[27] !== t1R_expected_prev[27] )
		&& ((t1R_expected_prev[27] !== last_t1R_exp[27]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[27] = t1R_expected_prev[27];
	end
	if (
		( t1R_expected_prev[28] !== 1'bx ) && ( t1R_prev[28] !== t1R_expected_prev[28] )
		&& ((t1R_expected_prev[28] !== last_t1R_exp[28]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[28] = t1R_expected_prev[28];
	end
	if (
		( t1R_expected_prev[29] !== 1'bx ) && ( t1R_prev[29] !== t1R_expected_prev[29] )
		&& ((t1R_expected_prev[29] !== last_t1R_exp[29]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[29] = t1R_expected_prev[29];
	end
	if (
		( t1R_expected_prev[30] !== 1'bx ) && ( t1R_prev[30] !== t1R_expected_prev[30] )
		&& ((t1R_expected_prev[30] !== last_t1R_exp[30]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[30] = t1R_expected_prev[30];
	end
	if (
		( t1R_expected_prev[31] !== 1'bx ) && ( t1R_prev[31] !== t1R_expected_prev[31] )
		&& ((t1R_expected_prev[31] !== last_t1R_exp[31]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1R[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1R_expected_prev);
		$display ("     Real value = %b", t1R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t1R_exp[31] = t1R_expected_prev[31];
	end
	if (
		( TreatedForwardB_expected_prev[0] !== 1'bx ) && ( TreatedForwardB_prev[0] !== TreatedForwardB_expected_prev[0] )
		&& ((TreatedForwardB_expected_prev[0] !== last_TreatedForwardB_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TreatedForwardB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TreatedForwardB_expected_prev);
		$display ("     Real value = %b", TreatedForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_TreatedForwardB_exp[0] = TreatedForwardB_expected_prev[0];
	end
	if (
		( TreatedForwardB_expected_prev[1] !== 1'bx ) && ( TreatedForwardB_prev[1] !== TreatedForwardB_expected_prev[1] )
		&& ((TreatedForwardB_expected_prev[1] !== last_TreatedForwardB_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TreatedForwardB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TreatedForwardB_expected_prev);
		$display ("     Real value = %b", TreatedForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_TreatedForwardB_exp[1] = TreatedForwardB_expected_prev[1];
	end
	if (
		( WBDadoDeRetorno_expected_prev[0] !== 1'bx ) && ( WBDadoDeRetorno_prev[0] !== WBDadoDeRetorno_expected_prev[0] )
		&& ((WBDadoDeRetorno_expected_prev[0] !== last_WBDadoDeRetorno_exp[0]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[0] = WBDadoDeRetorno_expected_prev[0];
	end
	if (
		( WBDadoDeRetorno_expected_prev[1] !== 1'bx ) && ( WBDadoDeRetorno_prev[1] !== WBDadoDeRetorno_expected_prev[1] )
		&& ((WBDadoDeRetorno_expected_prev[1] !== last_WBDadoDeRetorno_exp[1]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[1] = WBDadoDeRetorno_expected_prev[1];
	end
	if (
		( WBDadoDeRetorno_expected_prev[2] !== 1'bx ) && ( WBDadoDeRetorno_prev[2] !== WBDadoDeRetorno_expected_prev[2] )
		&& ((WBDadoDeRetorno_expected_prev[2] !== last_WBDadoDeRetorno_exp[2]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[2] = WBDadoDeRetorno_expected_prev[2];
	end
	if (
		( WBDadoDeRetorno_expected_prev[3] !== 1'bx ) && ( WBDadoDeRetorno_prev[3] !== WBDadoDeRetorno_expected_prev[3] )
		&& ((WBDadoDeRetorno_expected_prev[3] !== last_WBDadoDeRetorno_exp[3]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[3] = WBDadoDeRetorno_expected_prev[3];
	end
	if (
		( WBDadoDeRetorno_expected_prev[4] !== 1'bx ) && ( WBDadoDeRetorno_prev[4] !== WBDadoDeRetorno_expected_prev[4] )
		&& ((WBDadoDeRetorno_expected_prev[4] !== last_WBDadoDeRetorno_exp[4]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[4] = WBDadoDeRetorno_expected_prev[4];
	end
	if (
		( WBDadoDeRetorno_expected_prev[5] !== 1'bx ) && ( WBDadoDeRetorno_prev[5] !== WBDadoDeRetorno_expected_prev[5] )
		&& ((WBDadoDeRetorno_expected_prev[5] !== last_WBDadoDeRetorno_exp[5]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[5] = WBDadoDeRetorno_expected_prev[5];
	end
	if (
		( WBDadoDeRetorno_expected_prev[6] !== 1'bx ) && ( WBDadoDeRetorno_prev[6] !== WBDadoDeRetorno_expected_prev[6] )
		&& ((WBDadoDeRetorno_expected_prev[6] !== last_WBDadoDeRetorno_exp[6]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[6] = WBDadoDeRetorno_expected_prev[6];
	end
	if (
		( WBDadoDeRetorno_expected_prev[7] !== 1'bx ) && ( WBDadoDeRetorno_prev[7] !== WBDadoDeRetorno_expected_prev[7] )
		&& ((WBDadoDeRetorno_expected_prev[7] !== last_WBDadoDeRetorno_exp[7]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[7] = WBDadoDeRetorno_expected_prev[7];
	end
	if (
		( WBDadoDeRetorno_expected_prev[8] !== 1'bx ) && ( WBDadoDeRetorno_prev[8] !== WBDadoDeRetorno_expected_prev[8] )
		&& ((WBDadoDeRetorno_expected_prev[8] !== last_WBDadoDeRetorno_exp[8]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[8] = WBDadoDeRetorno_expected_prev[8];
	end
	if (
		( WBDadoDeRetorno_expected_prev[9] !== 1'bx ) && ( WBDadoDeRetorno_prev[9] !== WBDadoDeRetorno_expected_prev[9] )
		&& ((WBDadoDeRetorno_expected_prev[9] !== last_WBDadoDeRetorno_exp[9]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[9] = WBDadoDeRetorno_expected_prev[9];
	end
	if (
		( WBDadoDeRetorno_expected_prev[10] !== 1'bx ) && ( WBDadoDeRetorno_prev[10] !== WBDadoDeRetorno_expected_prev[10] )
		&& ((WBDadoDeRetorno_expected_prev[10] !== last_WBDadoDeRetorno_exp[10]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[10] = WBDadoDeRetorno_expected_prev[10];
	end
	if (
		( WBDadoDeRetorno_expected_prev[11] !== 1'bx ) && ( WBDadoDeRetorno_prev[11] !== WBDadoDeRetorno_expected_prev[11] )
		&& ((WBDadoDeRetorno_expected_prev[11] !== last_WBDadoDeRetorno_exp[11]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[11] = WBDadoDeRetorno_expected_prev[11];
	end
	if (
		( WBDadoDeRetorno_expected_prev[12] !== 1'bx ) && ( WBDadoDeRetorno_prev[12] !== WBDadoDeRetorno_expected_prev[12] )
		&& ((WBDadoDeRetorno_expected_prev[12] !== last_WBDadoDeRetorno_exp[12]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[12] = WBDadoDeRetorno_expected_prev[12];
	end
	if (
		( WBDadoDeRetorno_expected_prev[13] !== 1'bx ) && ( WBDadoDeRetorno_prev[13] !== WBDadoDeRetorno_expected_prev[13] )
		&& ((WBDadoDeRetorno_expected_prev[13] !== last_WBDadoDeRetorno_exp[13]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[13] = WBDadoDeRetorno_expected_prev[13];
	end
	if (
		( WBDadoDeRetorno_expected_prev[14] !== 1'bx ) && ( WBDadoDeRetorno_prev[14] !== WBDadoDeRetorno_expected_prev[14] )
		&& ((WBDadoDeRetorno_expected_prev[14] !== last_WBDadoDeRetorno_exp[14]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[14] = WBDadoDeRetorno_expected_prev[14];
	end
	if (
		( WBDadoDeRetorno_expected_prev[15] !== 1'bx ) && ( WBDadoDeRetorno_prev[15] !== WBDadoDeRetorno_expected_prev[15] )
		&& ((WBDadoDeRetorno_expected_prev[15] !== last_WBDadoDeRetorno_exp[15]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[15] = WBDadoDeRetorno_expected_prev[15];
	end
	if (
		( WBDadoDeRetorno_expected_prev[16] !== 1'bx ) && ( WBDadoDeRetorno_prev[16] !== WBDadoDeRetorno_expected_prev[16] )
		&& ((WBDadoDeRetorno_expected_prev[16] !== last_WBDadoDeRetorno_exp[16]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[16] = WBDadoDeRetorno_expected_prev[16];
	end
	if (
		( WBDadoDeRetorno_expected_prev[17] !== 1'bx ) && ( WBDadoDeRetorno_prev[17] !== WBDadoDeRetorno_expected_prev[17] )
		&& ((WBDadoDeRetorno_expected_prev[17] !== last_WBDadoDeRetorno_exp[17]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[17] = WBDadoDeRetorno_expected_prev[17];
	end
	if (
		( WBDadoDeRetorno_expected_prev[18] !== 1'bx ) && ( WBDadoDeRetorno_prev[18] !== WBDadoDeRetorno_expected_prev[18] )
		&& ((WBDadoDeRetorno_expected_prev[18] !== last_WBDadoDeRetorno_exp[18]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[18] = WBDadoDeRetorno_expected_prev[18];
	end
	if (
		( WBDadoDeRetorno_expected_prev[19] !== 1'bx ) && ( WBDadoDeRetorno_prev[19] !== WBDadoDeRetorno_expected_prev[19] )
		&& ((WBDadoDeRetorno_expected_prev[19] !== last_WBDadoDeRetorno_exp[19]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[19] = WBDadoDeRetorno_expected_prev[19];
	end
	if (
		( WBDadoDeRetorno_expected_prev[20] !== 1'bx ) && ( WBDadoDeRetorno_prev[20] !== WBDadoDeRetorno_expected_prev[20] )
		&& ((WBDadoDeRetorno_expected_prev[20] !== last_WBDadoDeRetorno_exp[20]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[20] = WBDadoDeRetorno_expected_prev[20];
	end
	if (
		( WBDadoDeRetorno_expected_prev[21] !== 1'bx ) && ( WBDadoDeRetorno_prev[21] !== WBDadoDeRetorno_expected_prev[21] )
		&& ((WBDadoDeRetorno_expected_prev[21] !== last_WBDadoDeRetorno_exp[21]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[21] = WBDadoDeRetorno_expected_prev[21];
	end
	if (
		( WBDadoDeRetorno_expected_prev[22] !== 1'bx ) && ( WBDadoDeRetorno_prev[22] !== WBDadoDeRetorno_expected_prev[22] )
		&& ((WBDadoDeRetorno_expected_prev[22] !== last_WBDadoDeRetorno_exp[22]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[22] = WBDadoDeRetorno_expected_prev[22];
	end
	if (
		( WBDadoDeRetorno_expected_prev[23] !== 1'bx ) && ( WBDadoDeRetorno_prev[23] !== WBDadoDeRetorno_expected_prev[23] )
		&& ((WBDadoDeRetorno_expected_prev[23] !== last_WBDadoDeRetorno_exp[23]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[23] = WBDadoDeRetorno_expected_prev[23];
	end
	if (
		( WBDadoDeRetorno_expected_prev[24] !== 1'bx ) && ( WBDadoDeRetorno_prev[24] !== WBDadoDeRetorno_expected_prev[24] )
		&& ((WBDadoDeRetorno_expected_prev[24] !== last_WBDadoDeRetorno_exp[24]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[24] = WBDadoDeRetorno_expected_prev[24];
	end
	if (
		( WBDadoDeRetorno_expected_prev[25] !== 1'bx ) && ( WBDadoDeRetorno_prev[25] !== WBDadoDeRetorno_expected_prev[25] )
		&& ((WBDadoDeRetorno_expected_prev[25] !== last_WBDadoDeRetorno_exp[25]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[25] = WBDadoDeRetorno_expected_prev[25];
	end
	if (
		( WBDadoDeRetorno_expected_prev[26] !== 1'bx ) && ( WBDadoDeRetorno_prev[26] !== WBDadoDeRetorno_expected_prev[26] )
		&& ((WBDadoDeRetorno_expected_prev[26] !== last_WBDadoDeRetorno_exp[26]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[26] = WBDadoDeRetorno_expected_prev[26];
	end
	if (
		( WBDadoDeRetorno_expected_prev[27] !== 1'bx ) && ( WBDadoDeRetorno_prev[27] !== WBDadoDeRetorno_expected_prev[27] )
		&& ((WBDadoDeRetorno_expected_prev[27] !== last_WBDadoDeRetorno_exp[27]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[27] = WBDadoDeRetorno_expected_prev[27];
	end
	if (
		( WBDadoDeRetorno_expected_prev[28] !== 1'bx ) && ( WBDadoDeRetorno_prev[28] !== WBDadoDeRetorno_expected_prev[28] )
		&& ((WBDadoDeRetorno_expected_prev[28] !== last_WBDadoDeRetorno_exp[28]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[28] = WBDadoDeRetorno_expected_prev[28];
	end
	if (
		( WBDadoDeRetorno_expected_prev[29] !== 1'bx ) && ( WBDadoDeRetorno_prev[29] !== WBDadoDeRetorno_expected_prev[29] )
		&& ((WBDadoDeRetorno_expected_prev[29] !== last_WBDadoDeRetorno_exp[29]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[29] = WBDadoDeRetorno_expected_prev[29];
	end
	if (
		( WBDadoDeRetorno_expected_prev[30] !== 1'bx ) && ( WBDadoDeRetorno_prev[30] !== WBDadoDeRetorno_expected_prev[30] )
		&& ((WBDadoDeRetorno_expected_prev[30] !== last_WBDadoDeRetorno_exp[30]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[30] = WBDadoDeRetorno_expected_prev[30];
	end
	if (
		( WBDadoDeRetorno_expected_prev[31] !== 1'bx ) && ( WBDadoDeRetorno_prev[31] !== WBDadoDeRetorno_expected_prev[31] )
		&& ((WBDadoDeRetorno_expected_prev[31] !== last_WBDadoDeRetorno_exp[31]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_WBDadoDeRetorno_exp[31] = WBDadoDeRetorno_expected_prev[31];
	end
	if (
		( WBMemPraReg_expected_prev !== 1'bx ) && ( WBMemPraReg_prev !== WBMemPraReg_expected_prev )
		&& ((WBMemPraReg_expected_prev !== last_WBMemPraReg_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBMemPraReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBMemPraReg_expected_prev);
		$display ("     Real value = %b", WBMemPraReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_WBMemPraReg_exp = WBMemPraReg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module PipelineInit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock2;
// wires                                               
wire [3:0] ALUOperation;
wire [31:0] atR;
wire [31:0] BInstruction;
wire [31:0] BPC;
wire [1:0] EXBranch;
wire [31:0] EXHIGH;
wire [31:0] EXLOW;
wire [2:0] EXopALU;
wire [31:0] EXULAA;
wire [31:0] EXULAB;
wire Flush;
wire [1:0] ForwardA;
wire [1:0] ForwardB;
wire [31:0] Instruction;
wire JAL;
wire Jump;
wire [1:0] MEMBranch;
wire [31:0] MEMOutALU;
wire [31:0] MemReadValue;
wire notOpSignal;
wire OrigPC;
wire [31:0] outALU;
wire Overflow;
wire [31:0] RegA;
wire [31:0] s0;
wire [31:0] s1;
wire [31:0] s2;
wire Stall;
wire [31:0] t0R;
wire [31:0] t1R;
wire [1:0] TreatedForwardB;
wire [31:0] WBDadoDeRetorno;
wire WBMemPraReg;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
PipelineInit i1 (
// port map - connection between master ports and signals/registers   
	.ALUOperation(ALUOperation),
	.atR(atR),
	.BInstruction(BInstruction),
	.BPC(BPC),
	.clock(clock),
	.clock2(clock2),
	.EXBranch(EXBranch),
	.EXHIGH(EXHIGH),
	.EXLOW(EXLOW),
	.EXopALU(EXopALU),
	.EXULAA(EXULAA),
	.EXULAB(EXULAB),
	.Flush(Flush),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.Instruction(Instruction),
	.JAL(JAL),
	.Jump(Jump),
	.MEMBranch(MEMBranch),
	.MEMOutALU(MEMOutALU),
	.MemReadValue(MemReadValue),
	.notOpSignal(notOpSignal),
	.OrigPC(OrigPC),
	.outALU(outALU),
	.Overflow(Overflow),
	.RegA(RegA),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.Stall(Stall),
	.t0R(t0R),
	.t1R(t1R),
	.TreatedForwardB(TreatedForwardB),
	.WBDadoDeRetorno(WBDadoDeRetorno),
	.WBMemPraReg(WBMemPraReg),
	.Zero(Zero)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// clock2
initial
begin
	clock2 = 1'b0;
	clock2 = #2500 1'b1;
	# 5000;
	repeat(99)
	begin
		clock2 = 1'b0;
		clock2 = #5000 1'b1;
		# 5000;
	end
	clock2 = 1'b0;
end 
// ForwardA[ 1 ]
initial
begin
	ForwardA[1] = 1'bX;
end 
// ForwardA[ 0 ]
initial
begin
	ForwardA[0] = 1'bX;
end 
// ForwardB[ 1 ]
initial
begin
	ForwardB[1] = 1'bX;
end 
// ForwardB[ 0 ]
initial
begin
	ForwardB[0] = 1'bX;
end 

PipelineInit_vlg_sample_tst tb_sample (
	.clock(clock),
	.clock2(clock2),
	.sampler_tx(sampler)
);

PipelineInit_vlg_check_tst tb_out(
	.ALUOperation(ALUOperation),
	.atR(atR),
	.BInstruction(BInstruction),
	.BPC(BPC),
	.EXBranch(EXBranch),
	.EXHIGH(EXHIGH),
	.EXLOW(EXLOW),
	.EXopALU(EXopALU),
	.EXULAA(EXULAA),
	.EXULAB(EXULAB),
	.Flush(Flush),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.Instruction(Instruction),
	.JAL(JAL),
	.Jump(Jump),
	.MEMBranch(MEMBranch),
	.MEMOutALU(MEMOutALU),
	.MemReadValue(MemReadValue),
	.notOpSignal(notOpSignal),
	.OrigPC(OrigPC),
	.outALU(outALU),
	.Overflow(Overflow),
	.RegA(RegA),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.Stall(Stall),
	.t0R(t0R),
	.t1R(t1R),
	.TreatedForwardB(TreatedForwardB),
	.WBDadoDeRetorno(WBDadoDeRetorno),
	.WBMemPraReg(WBMemPraReg),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule


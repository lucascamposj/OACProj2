// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2018 19:53:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PipelineInit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PipelineInit_vlg_sample_tst(
	clock,
	clock2,
	sampler_tx
);
input  clock;
input  clock2;
output sampler_tx;

reg sample;
time current_time;
always @(clock or clock2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PipelineInit_vlg_check_tst (
	ALUOperation,
	BInstruction,
	BPC,
	BproxPC,
	DCtrlBranch,
	DCtrlcontrolJump,
	DCtrlEscreveMem,
	DCtrlEscreveReg,
	DCtrlExtent,
	DCtrlMemParaReg,
	DCtrlopALU,
	DCtrlOrigALU,
	DCtrlRegDst,
	DJAL,
	DJump,
	DJumpPC,
	DRSDados0,
	DRTDados1,
	EXHIGH,
	EXImm,
	EXLOW,
	EXopALU,
	EXULAA,
	EXULAB,
	Flush,
	ForwardA,
	ForwardB,
	Jump,
	MEMBranch,
	MEMEscreveMem,
	MEMnPC,
	MEMReadValue,
	MEMZero,
	OrigPC,
	outALU,
	Stall,
	WBDadoDeRetorno,
	WBEscreveReg,
	WBMemParaReg,
	Zero,
	sampler_rx
);
input [3:0] ALUOperation;
input [31:0] BInstruction;
input [31:0] BPC;
input [31:0] BproxPC;
input [1:0] DCtrlBranch;
input [1:0] DCtrlcontrolJump;
input  DCtrlEscreveMem;
input  DCtrlEscreveReg;
input  DCtrlExtent;
input  DCtrlMemParaReg;
input [2:0] DCtrlopALU;
input  DCtrlOrigALU;
input [1:0] DCtrlRegDst;
input  DJAL;
input  DJump;
input [31:0] DJumpPC;
input [31:0] DRSDados0;
input [31:0] DRTDados1;
input [31:0] EXHIGH;
input [5:0] EXImm;
input [31:0] EXLOW;
input [2:0] EXopALU;
input [31:0] EXULAA;
input [31:0] EXULAB;
input  Flush;
input [1:0] ForwardA;
input [1:0] ForwardB;
input  Jump;
input [1:0] MEMBranch;
input  MEMEscreveMem;
input [31:0] MEMnPC;
input [31:0] MEMReadValue;
input  MEMZero;
input  OrigPC;
input [31:0] outALU;
input  Stall;
input [31:0] WBDadoDeRetorno;
input  WBEscreveReg;
input  WBMemParaReg;
input  Zero;
input sampler_rx;

reg [3:0] ALUOperation_expected;
reg [31:0] BInstruction_expected;
reg [31:0] BPC_expected;
reg [31:0] BproxPC_expected;
reg [1:0] DCtrlBranch_expected;
reg [1:0] DCtrlcontrolJump_expected;
reg  DCtrlEscreveMem_expected;
reg  DCtrlEscreveReg_expected;
reg  DCtrlExtent_expected;
reg  DCtrlMemParaReg_expected;
reg [2:0] DCtrlopALU_expected;
reg  DCtrlOrigALU_expected;
reg [1:0] DCtrlRegDst_expected;
reg  DJAL_expected;
reg  DJump_expected;
reg [31:0] DJumpPC_expected;
reg [31:0] DRSDados0_expected;
reg [31:0] DRTDados1_expected;
reg [31:0] EXHIGH_expected;
reg [5:0] EXImm_expected;
reg [31:0] EXLOW_expected;
reg [2:0] EXopALU_expected;
reg [31:0] EXULAA_expected;
reg [31:0] EXULAB_expected;
reg  Flush_expected;
reg [1:0] ForwardA_expected;
reg [1:0] ForwardB_expected;
reg  Jump_expected;
reg [1:0] MEMBranch_expected;
reg  MEMEscreveMem_expected;
reg [31:0] MEMnPC_expected;
reg [31:0] MEMReadValue_expected;
reg  MEMZero_expected;
reg  OrigPC_expected;
reg [31:0] outALU_expected;
reg  Stall_expected;
reg [31:0] WBDadoDeRetorno_expected;
reg  WBEscreveReg_expected;
reg  WBMemParaReg_expected;
reg  Zero_expected;

reg [3:0] ALUOperation_prev;
reg [31:0] BInstruction_prev;
reg [31:0] BPC_prev;
reg [31:0] BproxPC_prev;
reg [1:0] DCtrlBranch_prev;
reg [1:0] DCtrlcontrolJump_prev;
reg  DCtrlEscreveMem_prev;
reg  DCtrlEscreveReg_prev;
reg  DCtrlExtent_prev;
reg  DCtrlMemParaReg_prev;
reg [2:0] DCtrlopALU_prev;
reg  DCtrlOrigALU_prev;
reg [1:0] DCtrlRegDst_prev;
reg  DJAL_prev;
reg  DJump_prev;
reg [31:0] DJumpPC_prev;
reg [31:0] DRSDados0_prev;
reg [31:0] DRTDados1_prev;
reg [31:0] EXHIGH_prev;
reg [5:0] EXImm_prev;
reg [31:0] EXLOW_prev;
reg [2:0] EXopALU_prev;
reg [31:0] EXULAA_prev;
reg [31:0] EXULAB_prev;
reg  Flush_prev;
reg [1:0] ForwardA_prev;
reg [1:0] ForwardB_prev;
reg  Jump_prev;
reg [1:0] MEMBranch_prev;
reg  MEMEscreveMem_prev;
reg [31:0] MEMnPC_prev;
reg [31:0] MEMReadValue_prev;
reg  MEMZero_prev;
reg  OrigPC_prev;
reg [31:0] outALU_prev;
reg  Stall_prev;
reg [31:0] WBDadoDeRetorno_prev;
reg  WBEscreveReg_prev;
reg  WBMemParaReg_prev;
reg  Zero_prev;

reg [3:0] ALUOperation_expected_prev;
reg [31:0] BInstruction_expected_prev;
reg [31:0] BPC_expected_prev;
reg [31:0] BproxPC_expected_prev;
reg [1:0] DCtrlBranch_expected_prev;
reg [1:0] DCtrlcontrolJump_expected_prev;
reg  DCtrlEscreveMem_expected_prev;
reg  DCtrlEscreveReg_expected_prev;
reg  DCtrlExtent_expected_prev;
reg  DCtrlMemParaReg_expected_prev;
reg [2:0] DCtrlopALU_expected_prev;
reg  DCtrlOrigALU_expected_prev;
reg [1:0] DCtrlRegDst_expected_prev;
reg  DJAL_expected_prev;
reg  DJump_expected_prev;
reg [31:0] DJumpPC_expected_prev;
reg [31:0] DRSDados0_expected_prev;
reg [31:0] DRTDados1_expected_prev;
reg [31:0] EXHIGH_expected_prev;
reg [5:0] EXImm_expected_prev;
reg [31:0] EXLOW_expected_prev;
reg [2:0] EXopALU_expected_prev;
reg [31:0] EXULAA_expected_prev;
reg [31:0] EXULAB_expected_prev;
reg  Flush_expected_prev;
reg [1:0] ForwardA_expected_prev;
reg [1:0] ForwardB_expected_prev;
reg  Jump_expected_prev;
reg [1:0] MEMBranch_expected_prev;
reg  MEMEscreveMem_expected_prev;
reg [31:0] MEMnPC_expected_prev;
reg [31:0] MEMReadValue_expected_prev;
reg  MEMZero_expected_prev;
reg  OrigPC_expected_prev;
reg [31:0] outALU_expected_prev;
reg  Stall_expected_prev;
reg [31:0] WBDadoDeRetorno_expected_prev;
reg  Zero_expected_prev;

reg [3:0] last_ALUOperation_exp;
reg [31:0] last_BInstruction_exp;
reg [31:0] last_BPC_exp;
reg [31:0] last_BproxPC_exp;
reg [1:0] last_DCtrlBranch_exp;
reg [1:0] last_DCtrlcontrolJump_exp;
reg  last_DCtrlEscreveMem_exp;
reg  last_DCtrlEscreveReg_exp;
reg  last_DCtrlExtent_exp;
reg  last_DCtrlMemParaReg_exp;
reg [2:0] last_DCtrlopALU_exp;
reg  last_DCtrlOrigALU_exp;
reg [1:0] last_DCtrlRegDst_exp;
reg  last_DJAL_exp;
reg  last_DJump_exp;
reg [31:0] last_DJumpPC_exp;
reg [31:0] last_DRSDados0_exp;
reg [31:0] last_DRTDados1_exp;
reg [31:0] last_EXHIGH_exp;
reg [5:0] last_EXImm_exp;
reg [31:0] last_EXLOW_exp;
reg [2:0] last_EXopALU_exp;
reg [31:0] last_EXULAA_exp;
reg [31:0] last_EXULAB_exp;
reg  last_Flush_exp;
reg [1:0] last_ForwardA_exp;
reg [1:0] last_ForwardB_exp;
reg  last_Jump_exp;
reg [1:0] last_MEMBranch_exp;
reg  last_MEMEscreveMem_exp;
reg [31:0] last_MEMnPC_exp;
reg [31:0] last_MEMReadValue_exp;
reg  last_MEMZero_exp;
reg  last_OrigPC_exp;
reg [31:0] last_outALU_exp;
reg  last_Stall_exp;
reg [31:0] last_WBDadoDeRetorno_exp;
reg  last_Zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:40] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 40'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOperation_prev = ALUOperation;
	BInstruction_prev = BInstruction;
	BPC_prev = BPC;
	BproxPC_prev = BproxPC;
	DCtrlBranch_prev = DCtrlBranch;
	DCtrlcontrolJump_prev = DCtrlcontrolJump;
	DCtrlEscreveMem_prev = DCtrlEscreveMem;
	DCtrlEscreveReg_prev = DCtrlEscreveReg;
	DCtrlExtent_prev = DCtrlExtent;
	DCtrlMemParaReg_prev = DCtrlMemParaReg;
	DCtrlopALU_prev = DCtrlopALU;
	DCtrlOrigALU_prev = DCtrlOrigALU;
	DCtrlRegDst_prev = DCtrlRegDst;
	DJAL_prev = DJAL;
	DJump_prev = DJump;
	DJumpPC_prev = DJumpPC;
	DRSDados0_prev = DRSDados0;
	DRTDados1_prev = DRTDados1;
	EXHIGH_prev = EXHIGH;
	EXImm_prev = EXImm;
	EXLOW_prev = EXLOW;
	EXopALU_prev = EXopALU;
	EXULAA_prev = EXULAA;
	EXULAB_prev = EXULAB;
	Flush_prev = Flush;
	ForwardA_prev = ForwardA;
	ForwardB_prev = ForwardB;
	Jump_prev = Jump;
	MEMBranch_prev = MEMBranch;
	MEMEscreveMem_prev = MEMEscreveMem;
	MEMnPC_prev = MEMnPC;
	MEMReadValue_prev = MEMReadValue;
	MEMZero_prev = MEMZero;
	OrigPC_prev = OrigPC;
	outALU_prev = outALU;
	Stall_prev = Stall;
	WBDadoDeRetorno_prev = WBDadoDeRetorno;
	WBEscreveReg_prev = WBEscreveReg;
	WBMemParaReg_prev = WBMemParaReg;
	Zero_prev = Zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOperation_expected_prev = ALUOperation_expected;
	BInstruction_expected_prev = BInstruction_expected;
	BPC_expected_prev = BPC_expected;
	BproxPC_expected_prev = BproxPC_expected;
	DCtrlBranch_expected_prev = DCtrlBranch_expected;
	DCtrlcontrolJump_expected_prev = DCtrlcontrolJump_expected;
	DCtrlEscreveMem_expected_prev = DCtrlEscreveMem_expected;
	DCtrlEscreveReg_expected_prev = DCtrlEscreveReg_expected;
	DCtrlExtent_expected_prev = DCtrlExtent_expected;
	DCtrlMemParaReg_expected_prev = DCtrlMemParaReg_expected;
	DCtrlopALU_expected_prev = DCtrlopALU_expected;
	DCtrlOrigALU_expected_prev = DCtrlOrigALU_expected;
	DCtrlRegDst_expected_prev = DCtrlRegDst_expected;
	DJAL_expected_prev = DJAL_expected;
	DJump_expected_prev = DJump_expected;
	DJumpPC_expected_prev = DJumpPC_expected;
	DRSDados0_expected_prev = DRSDados0_expected;
	DRTDados1_expected_prev = DRTDados1_expected;
	EXHIGH_expected_prev = EXHIGH_expected;
	EXImm_expected_prev = EXImm_expected;
	EXLOW_expected_prev = EXLOW_expected;
	EXopALU_expected_prev = EXopALU_expected;
	EXULAA_expected_prev = EXULAA_expected;
	EXULAB_expected_prev = EXULAB_expected;
	Flush_expected_prev = Flush_expected;
	ForwardA_expected_prev = ForwardA_expected;
	ForwardB_expected_prev = ForwardB_expected;
	Jump_expected_prev = Jump_expected;
	MEMBranch_expected_prev = MEMBranch_expected;
	MEMEscreveMem_expected_prev = MEMEscreveMem_expected;
	MEMnPC_expected_prev = MEMnPC_expected;
	MEMReadValue_expected_prev = MEMReadValue_expected;
	MEMZero_expected_prev = MEMZero_expected;
	OrigPC_expected_prev = OrigPC_expected;
	outALU_expected_prev = outALU_expected;
	Stall_expected_prev = Stall_expected;
	WBDadoDeRetorno_expected_prev = WBDadoDeRetorno_expected;
	Zero_expected_prev = Zero_expected;
end


// expected BproxPC[ 31 ]
initial
begin
	BproxPC_expected[31] = 1'bX;
end 
// expected BproxPC[ 30 ]
initial
begin
	BproxPC_expected[30] = 1'bX;
end 
// expected BproxPC[ 29 ]
initial
begin
	BproxPC_expected[29] = 1'bX;
end 
// expected BproxPC[ 28 ]
initial
begin
	BproxPC_expected[28] = 1'bX;
end 
// expected BproxPC[ 27 ]
initial
begin
	BproxPC_expected[27] = 1'bX;
end 
// expected BproxPC[ 26 ]
initial
begin
	BproxPC_expected[26] = 1'bX;
end 
// expected BproxPC[ 25 ]
initial
begin
	BproxPC_expected[25] = 1'bX;
end 
// expected BproxPC[ 24 ]
initial
begin
	BproxPC_expected[24] = 1'bX;
end 
// expected BproxPC[ 23 ]
initial
begin
	BproxPC_expected[23] = 1'bX;
end 
// expected BproxPC[ 22 ]
initial
begin
	BproxPC_expected[22] = 1'bX;
end 
// expected BproxPC[ 21 ]
initial
begin
	BproxPC_expected[21] = 1'bX;
end 
// expected BproxPC[ 20 ]
initial
begin
	BproxPC_expected[20] = 1'bX;
end 
// expected BproxPC[ 19 ]
initial
begin
	BproxPC_expected[19] = 1'bX;
end 
// expected BproxPC[ 18 ]
initial
begin
	BproxPC_expected[18] = 1'bX;
end 
// expected BproxPC[ 17 ]
initial
begin
	BproxPC_expected[17] = 1'bX;
end 
// expected BproxPC[ 16 ]
initial
begin
	BproxPC_expected[16] = 1'bX;
end 
// expected BproxPC[ 15 ]
initial
begin
	BproxPC_expected[15] = 1'bX;
end 
// expected BproxPC[ 14 ]
initial
begin
	BproxPC_expected[14] = 1'bX;
end 
// expected BproxPC[ 13 ]
initial
begin
	BproxPC_expected[13] = 1'bX;
end 
// expected BproxPC[ 12 ]
initial
begin
	BproxPC_expected[12] = 1'bX;
end 
// expected BproxPC[ 11 ]
initial
begin
	BproxPC_expected[11] = 1'bX;
end 
// expected BproxPC[ 10 ]
initial
begin
	BproxPC_expected[10] = 1'bX;
end 
// expected BproxPC[ 9 ]
initial
begin
	BproxPC_expected[9] = 1'bX;
end 
// expected BproxPC[ 8 ]
initial
begin
	BproxPC_expected[8] = 1'bX;
end 
// expected BproxPC[ 7 ]
initial
begin
	BproxPC_expected[7] = 1'bX;
end 
// expected BproxPC[ 6 ]
initial
begin
	BproxPC_expected[6] = 1'bX;
end 
// expected BproxPC[ 5 ]
initial
begin
	BproxPC_expected[5] = 1'bX;
end 
// expected BproxPC[ 4 ]
initial
begin
	BproxPC_expected[4] = 1'bX;
end 
// expected BproxPC[ 3 ]
initial
begin
	BproxPC_expected[3] = 1'bX;
end 
// expected BproxPC[ 2 ]
initial
begin
	BproxPC_expected[2] = 1'bX;
end 
// expected BproxPC[ 1 ]
initial
begin
	BproxPC_expected[1] = 1'bX;
end 
// expected BproxPC[ 0 ]
initial
begin
	BproxPC_expected[0] = 1'bX;
end 
// expected BPC[ 31 ]
initial
begin
	BPC_expected[31] = 1'bX;
end 
// expected BPC[ 30 ]
initial
begin
	BPC_expected[30] = 1'bX;
end 
// expected BPC[ 29 ]
initial
begin
	BPC_expected[29] = 1'bX;
end 
// expected BPC[ 28 ]
initial
begin
	BPC_expected[28] = 1'bX;
end 
// expected BPC[ 27 ]
initial
begin
	BPC_expected[27] = 1'bX;
end 
// expected BPC[ 26 ]
initial
begin
	BPC_expected[26] = 1'bX;
end 
// expected BPC[ 25 ]
initial
begin
	BPC_expected[25] = 1'bX;
end 
// expected BPC[ 24 ]
initial
begin
	BPC_expected[24] = 1'bX;
end 
// expected BPC[ 23 ]
initial
begin
	BPC_expected[23] = 1'bX;
end 
// expected BPC[ 22 ]
initial
begin
	BPC_expected[22] = 1'bX;
end 
// expected BPC[ 21 ]
initial
begin
	BPC_expected[21] = 1'bX;
end 
// expected BPC[ 20 ]
initial
begin
	BPC_expected[20] = 1'bX;
end 
// expected BPC[ 19 ]
initial
begin
	BPC_expected[19] = 1'bX;
end 
// expected BPC[ 18 ]
initial
begin
	BPC_expected[18] = 1'bX;
end 
// expected BPC[ 17 ]
initial
begin
	BPC_expected[17] = 1'bX;
end 
// expected BPC[ 16 ]
initial
begin
	BPC_expected[16] = 1'bX;
end 
// expected BPC[ 15 ]
initial
begin
	BPC_expected[15] = 1'bX;
end 
// expected BPC[ 14 ]
initial
begin
	BPC_expected[14] = 1'bX;
end 
// expected BPC[ 13 ]
initial
begin
	BPC_expected[13] = 1'bX;
end 
// expected BPC[ 12 ]
initial
begin
	BPC_expected[12] = 1'bX;
end 
// expected BPC[ 11 ]
initial
begin
	BPC_expected[11] = 1'bX;
end 
// expected BPC[ 10 ]
initial
begin
	BPC_expected[10] = 1'bX;
end 
// expected BPC[ 9 ]
initial
begin
	BPC_expected[9] = 1'bX;
end 
// expected BPC[ 8 ]
initial
begin
	BPC_expected[8] = 1'bX;
end 
// expected BPC[ 7 ]
initial
begin
	BPC_expected[7] = 1'bX;
end 
// expected BPC[ 6 ]
initial
begin
	BPC_expected[6] = 1'bX;
end 
// expected BPC[ 5 ]
initial
begin
	BPC_expected[5] = 1'bX;
end 
// expected BPC[ 4 ]
initial
begin
	BPC_expected[4] = 1'bX;
end 
// expected BPC[ 3 ]
initial
begin
	BPC_expected[3] = 1'bX;
end 
// expected BPC[ 2 ]
initial
begin
	BPC_expected[2] = 1'bX;
end 
// expected BPC[ 1 ]
initial
begin
	BPC_expected[1] = 1'bX;
end 
// expected BPC[ 0 ]
initial
begin
	BPC_expected[0] = 1'bX;
end 
// expected BInstruction[ 31 ]
initial
begin
	BInstruction_expected[31] = 1'bX;
end 
// expected BInstruction[ 30 ]
initial
begin
	BInstruction_expected[30] = 1'bX;
end 
// expected BInstruction[ 29 ]
initial
begin
	BInstruction_expected[29] = 1'bX;
end 
// expected BInstruction[ 28 ]
initial
begin
	BInstruction_expected[28] = 1'bX;
end 
// expected BInstruction[ 27 ]
initial
begin
	BInstruction_expected[27] = 1'bX;
end 
// expected BInstruction[ 26 ]
initial
begin
	BInstruction_expected[26] = 1'bX;
end 
// expected BInstruction[ 25 ]
initial
begin
	BInstruction_expected[25] = 1'bX;
end 
// expected BInstruction[ 24 ]
initial
begin
	BInstruction_expected[24] = 1'bX;
end 
// expected BInstruction[ 23 ]
initial
begin
	BInstruction_expected[23] = 1'bX;
end 
// expected BInstruction[ 22 ]
initial
begin
	BInstruction_expected[22] = 1'bX;
end 
// expected BInstruction[ 21 ]
initial
begin
	BInstruction_expected[21] = 1'bX;
end 
// expected BInstruction[ 20 ]
initial
begin
	BInstruction_expected[20] = 1'bX;
end 
// expected BInstruction[ 19 ]
initial
begin
	BInstruction_expected[19] = 1'bX;
end 
// expected BInstruction[ 18 ]
initial
begin
	BInstruction_expected[18] = 1'bX;
end 
// expected BInstruction[ 17 ]
initial
begin
	BInstruction_expected[17] = 1'bX;
end 
// expected BInstruction[ 16 ]
initial
begin
	BInstruction_expected[16] = 1'bX;
end 
// expected BInstruction[ 15 ]
initial
begin
	BInstruction_expected[15] = 1'bX;
end 
// expected BInstruction[ 14 ]
initial
begin
	BInstruction_expected[14] = 1'bX;
end 
// expected BInstruction[ 13 ]
initial
begin
	BInstruction_expected[13] = 1'bX;
end 
// expected BInstruction[ 12 ]
initial
begin
	BInstruction_expected[12] = 1'bX;
end 
// expected BInstruction[ 11 ]
initial
begin
	BInstruction_expected[11] = 1'bX;
end 
// expected BInstruction[ 10 ]
initial
begin
	BInstruction_expected[10] = 1'bX;
end 
// expected BInstruction[ 9 ]
initial
begin
	BInstruction_expected[9] = 1'bX;
end 
// expected BInstruction[ 8 ]
initial
begin
	BInstruction_expected[8] = 1'bX;
end 
// expected BInstruction[ 7 ]
initial
begin
	BInstruction_expected[7] = 1'bX;
end 
// expected BInstruction[ 6 ]
initial
begin
	BInstruction_expected[6] = 1'bX;
end 
// expected BInstruction[ 5 ]
initial
begin
	BInstruction_expected[5] = 1'bX;
end 
// expected BInstruction[ 4 ]
initial
begin
	BInstruction_expected[4] = 1'bX;
end 
// expected BInstruction[ 3 ]
initial
begin
	BInstruction_expected[3] = 1'bX;
end 
// expected BInstruction[ 2 ]
initial
begin
	BInstruction_expected[2] = 1'bX;
end 
// expected BInstruction[ 1 ]
initial
begin
	BInstruction_expected[1] = 1'bX;
end 
// expected BInstruction[ 0 ]
initial
begin
	BInstruction_expected[0] = 1'bX;
end 
// expected DCtrlBranch[ 1 ]
initial
begin
	DCtrlBranch_expected[1] = 1'bX;
end 
// expected DCtrlBranch[ 0 ]
initial
begin
	DCtrlBranch_expected[0] = 1'bX;
end 
// expected DCtrlcontrolJump[ 1 ]
initial
begin
	DCtrlcontrolJump_expected[1] = 1'bX;
end 
// expected DCtrlcontrolJump[ 0 ]
initial
begin
	DCtrlcontrolJump_expected[0] = 1'bX;
end 
// expected DCtrlopALU[ 2 ]
initial
begin
	DCtrlopALU_expected[2] = 1'bX;
end 
// expected DCtrlopALU[ 1 ]
initial
begin
	DCtrlopALU_expected[1] = 1'bX;
end 
// expected DCtrlopALU[ 0 ]
initial
begin
	DCtrlopALU_expected[0] = 1'bX;
end 
// expected DCtrlRegDst[ 1 ]
initial
begin
	DCtrlRegDst_expected[1] = 1'bX;
end 
// expected DCtrlRegDst[ 0 ]
initial
begin
	DCtrlRegDst_expected[0] = 1'bX;
end 

// expected DCtrlOrigALU
initial
begin
	DCtrlOrigALU_expected = 1'bX;
end 

// expected DCtrlEscreveMem
initial
begin
	DCtrlEscreveMem_expected = 1'bX;
end 

// expected DCtrlEscreveReg
initial
begin
	DCtrlEscreveReg_expected = 1'bX;
end 

// expected DCtrlExtent
initial
begin
	DCtrlExtent_expected = 1'bX;
end 

// expected DCtrlMemParaReg
initial
begin
	DCtrlMemParaReg_expected = 1'bX;
end 
// expected DJumpPC[ 31 ]
initial
begin
	DJumpPC_expected[31] = 1'bX;
end 
// expected DJumpPC[ 30 ]
initial
begin
	DJumpPC_expected[30] = 1'bX;
end 
// expected DJumpPC[ 29 ]
initial
begin
	DJumpPC_expected[29] = 1'bX;
end 
// expected DJumpPC[ 28 ]
initial
begin
	DJumpPC_expected[28] = 1'bX;
end 
// expected DJumpPC[ 27 ]
initial
begin
	DJumpPC_expected[27] = 1'bX;
end 
// expected DJumpPC[ 26 ]
initial
begin
	DJumpPC_expected[26] = 1'bX;
end 
// expected DJumpPC[ 25 ]
initial
begin
	DJumpPC_expected[25] = 1'bX;
end 
// expected DJumpPC[ 24 ]
initial
begin
	DJumpPC_expected[24] = 1'bX;
end 
// expected DJumpPC[ 23 ]
initial
begin
	DJumpPC_expected[23] = 1'bX;
end 
// expected DJumpPC[ 22 ]
initial
begin
	DJumpPC_expected[22] = 1'bX;
end 
// expected DJumpPC[ 21 ]
initial
begin
	DJumpPC_expected[21] = 1'bX;
end 
// expected DJumpPC[ 20 ]
initial
begin
	DJumpPC_expected[20] = 1'bX;
end 
// expected DJumpPC[ 19 ]
initial
begin
	DJumpPC_expected[19] = 1'bX;
end 
// expected DJumpPC[ 18 ]
initial
begin
	DJumpPC_expected[18] = 1'bX;
end 
// expected DJumpPC[ 17 ]
initial
begin
	DJumpPC_expected[17] = 1'bX;
end 
// expected DJumpPC[ 16 ]
initial
begin
	DJumpPC_expected[16] = 1'bX;
end 
// expected DJumpPC[ 15 ]
initial
begin
	DJumpPC_expected[15] = 1'bX;
end 
// expected DJumpPC[ 14 ]
initial
begin
	DJumpPC_expected[14] = 1'bX;
end 
// expected DJumpPC[ 13 ]
initial
begin
	DJumpPC_expected[13] = 1'bX;
end 
// expected DJumpPC[ 12 ]
initial
begin
	DJumpPC_expected[12] = 1'bX;
end 
// expected DJumpPC[ 11 ]
initial
begin
	DJumpPC_expected[11] = 1'bX;
end 
// expected DJumpPC[ 10 ]
initial
begin
	DJumpPC_expected[10] = 1'bX;
end 
// expected DJumpPC[ 9 ]
initial
begin
	DJumpPC_expected[9] = 1'bX;
end 
// expected DJumpPC[ 8 ]
initial
begin
	DJumpPC_expected[8] = 1'bX;
end 
// expected DJumpPC[ 7 ]
initial
begin
	DJumpPC_expected[7] = 1'bX;
end 
// expected DJumpPC[ 6 ]
initial
begin
	DJumpPC_expected[6] = 1'bX;
end 
// expected DJumpPC[ 5 ]
initial
begin
	DJumpPC_expected[5] = 1'bX;
end 
// expected DJumpPC[ 4 ]
initial
begin
	DJumpPC_expected[4] = 1'bX;
end 
// expected DJumpPC[ 3 ]
initial
begin
	DJumpPC_expected[3] = 1'bX;
end 
// expected DJumpPC[ 2 ]
initial
begin
	DJumpPC_expected[2] = 1'bX;
end 
// expected DJumpPC[ 1 ]
initial
begin
	DJumpPC_expected[1] = 1'bX;
end 
// expected DJumpPC[ 0 ]
initial
begin
	DJumpPC_expected[0] = 1'bX;
end 
// expected DRSDados0[ 31 ]
initial
begin
	DRSDados0_expected[31] = 1'bX;
end 
// expected DRSDados0[ 30 ]
initial
begin
	DRSDados0_expected[30] = 1'bX;
end 
// expected DRSDados0[ 29 ]
initial
begin
	DRSDados0_expected[29] = 1'bX;
end 
// expected DRSDados0[ 28 ]
initial
begin
	DRSDados0_expected[28] = 1'bX;
end 
// expected DRSDados0[ 27 ]
initial
begin
	DRSDados0_expected[27] = 1'bX;
end 
// expected DRSDados0[ 26 ]
initial
begin
	DRSDados0_expected[26] = 1'bX;
end 
// expected DRSDados0[ 25 ]
initial
begin
	DRSDados0_expected[25] = 1'bX;
end 
// expected DRSDados0[ 24 ]
initial
begin
	DRSDados0_expected[24] = 1'bX;
end 
// expected DRSDados0[ 23 ]
initial
begin
	DRSDados0_expected[23] = 1'bX;
end 
// expected DRSDados0[ 22 ]
initial
begin
	DRSDados0_expected[22] = 1'bX;
end 
// expected DRSDados0[ 21 ]
initial
begin
	DRSDados0_expected[21] = 1'bX;
end 
// expected DRSDados0[ 20 ]
initial
begin
	DRSDados0_expected[20] = 1'bX;
end 
// expected DRSDados0[ 19 ]
initial
begin
	DRSDados0_expected[19] = 1'bX;
end 
// expected DRSDados0[ 18 ]
initial
begin
	DRSDados0_expected[18] = 1'bX;
end 
// expected DRSDados0[ 17 ]
initial
begin
	DRSDados0_expected[17] = 1'bX;
end 
// expected DRSDados0[ 16 ]
initial
begin
	DRSDados0_expected[16] = 1'bX;
end 
// expected DRSDados0[ 15 ]
initial
begin
	DRSDados0_expected[15] = 1'bX;
end 
// expected DRSDados0[ 14 ]
initial
begin
	DRSDados0_expected[14] = 1'bX;
end 
// expected DRSDados0[ 13 ]
initial
begin
	DRSDados0_expected[13] = 1'bX;
end 
// expected DRSDados0[ 12 ]
initial
begin
	DRSDados0_expected[12] = 1'bX;
end 
// expected DRSDados0[ 11 ]
initial
begin
	DRSDados0_expected[11] = 1'bX;
end 
// expected DRSDados0[ 10 ]
initial
begin
	DRSDados0_expected[10] = 1'bX;
end 
// expected DRSDados0[ 9 ]
initial
begin
	DRSDados0_expected[9] = 1'bX;
end 
// expected DRSDados0[ 8 ]
initial
begin
	DRSDados0_expected[8] = 1'bX;
end 
// expected DRSDados0[ 7 ]
initial
begin
	DRSDados0_expected[7] = 1'bX;
end 
// expected DRSDados0[ 6 ]
initial
begin
	DRSDados0_expected[6] = 1'bX;
end 
// expected DRSDados0[ 5 ]
initial
begin
	DRSDados0_expected[5] = 1'bX;
end 
// expected DRSDados0[ 4 ]
initial
begin
	DRSDados0_expected[4] = 1'bX;
end 
// expected DRSDados0[ 3 ]
initial
begin
	DRSDados0_expected[3] = 1'bX;
end 
// expected DRSDados0[ 2 ]
initial
begin
	DRSDados0_expected[2] = 1'bX;
end 
// expected DRSDados0[ 1 ]
initial
begin
	DRSDados0_expected[1] = 1'bX;
end 
// expected DRSDados0[ 0 ]
initial
begin
	DRSDados0_expected[0] = 1'bX;
end 
// expected DRTDados1[ 31 ]
initial
begin
	DRTDados1_expected[31] = 1'bX;
end 
// expected DRTDados1[ 30 ]
initial
begin
	DRTDados1_expected[30] = 1'bX;
end 
// expected DRTDados1[ 29 ]
initial
begin
	DRTDados1_expected[29] = 1'bX;
end 
// expected DRTDados1[ 28 ]
initial
begin
	DRTDados1_expected[28] = 1'bX;
end 
// expected DRTDados1[ 27 ]
initial
begin
	DRTDados1_expected[27] = 1'bX;
end 
// expected DRTDados1[ 26 ]
initial
begin
	DRTDados1_expected[26] = 1'bX;
end 
// expected DRTDados1[ 25 ]
initial
begin
	DRTDados1_expected[25] = 1'bX;
end 
// expected DRTDados1[ 24 ]
initial
begin
	DRTDados1_expected[24] = 1'bX;
end 
// expected DRTDados1[ 23 ]
initial
begin
	DRTDados1_expected[23] = 1'bX;
end 
// expected DRTDados1[ 22 ]
initial
begin
	DRTDados1_expected[22] = 1'bX;
end 
// expected DRTDados1[ 21 ]
initial
begin
	DRTDados1_expected[21] = 1'bX;
end 
// expected DRTDados1[ 20 ]
initial
begin
	DRTDados1_expected[20] = 1'bX;
end 
// expected DRTDados1[ 19 ]
initial
begin
	DRTDados1_expected[19] = 1'bX;
end 
// expected DRTDados1[ 18 ]
initial
begin
	DRTDados1_expected[18] = 1'bX;
end 
// expected DRTDados1[ 17 ]
initial
begin
	DRTDados1_expected[17] = 1'bX;
end 
// expected DRTDados1[ 16 ]
initial
begin
	DRTDados1_expected[16] = 1'bX;
end 
// expected DRTDados1[ 15 ]
initial
begin
	DRTDados1_expected[15] = 1'bX;
end 
// expected DRTDados1[ 14 ]
initial
begin
	DRTDados1_expected[14] = 1'bX;
end 
// expected DRTDados1[ 13 ]
initial
begin
	DRTDados1_expected[13] = 1'bX;
end 
// expected DRTDados1[ 12 ]
initial
begin
	DRTDados1_expected[12] = 1'bX;
end 
// expected DRTDados1[ 11 ]
initial
begin
	DRTDados1_expected[11] = 1'bX;
end 
// expected DRTDados1[ 10 ]
initial
begin
	DRTDados1_expected[10] = 1'bX;
end 
// expected DRTDados1[ 9 ]
initial
begin
	DRTDados1_expected[9] = 1'bX;
end 
// expected DRTDados1[ 8 ]
initial
begin
	DRTDados1_expected[8] = 1'bX;
end 
// expected DRTDados1[ 7 ]
initial
begin
	DRTDados1_expected[7] = 1'bX;
end 
// expected DRTDados1[ 6 ]
initial
begin
	DRTDados1_expected[6] = 1'bX;
end 
// expected DRTDados1[ 5 ]
initial
begin
	DRTDados1_expected[5] = 1'bX;
end 
// expected DRTDados1[ 4 ]
initial
begin
	DRTDados1_expected[4] = 1'bX;
end 
// expected DRTDados1[ 3 ]
initial
begin
	DRTDados1_expected[3] = 1'bX;
end 
// expected DRTDados1[ 2 ]
initial
begin
	DRTDados1_expected[2] = 1'bX;
end 
// expected DRTDados1[ 1 ]
initial
begin
	DRTDados1_expected[1] = 1'bX;
end 
// expected DRTDados1[ 0 ]
initial
begin
	DRTDados1_expected[0] = 1'bX;
end 
// expected ALUOperation[ 3 ]
initial
begin
	ALUOperation_expected[3] = 1'bX;
end 
// expected ALUOperation[ 2 ]
initial
begin
	ALUOperation_expected[2] = 1'bX;
end 
// expected ALUOperation[ 1 ]
initial
begin
	ALUOperation_expected[1] = 1'bX;
end 
// expected ALUOperation[ 0 ]
initial
begin
	ALUOperation_expected[0] = 1'bX;
end 
// expected EXImm[ 5 ]
initial
begin
	EXImm_expected[5] = 1'bX;
end 
// expected EXImm[ 4 ]
initial
begin
	EXImm_expected[4] = 1'bX;
end 
// expected EXImm[ 3 ]
initial
begin
	EXImm_expected[3] = 1'bX;
end 
// expected EXImm[ 2 ]
initial
begin
	EXImm_expected[2] = 1'bX;
end 
// expected EXImm[ 1 ]
initial
begin
	EXImm_expected[1] = 1'bX;
end 
// expected EXImm[ 0 ]
initial
begin
	EXImm_expected[0] = 1'bX;
end 
// expected EXopALU[ 2 ]
initial
begin
	EXopALU_expected[2] = 1'bX;
end 
// expected EXopALU[ 1 ]
initial
begin
	EXopALU_expected[1] = 1'bX;
end 
// expected EXopALU[ 0 ]
initial
begin
	EXopALU_expected[0] = 1'bX;
end 
// expected EXULAA[ 31 ]
initial
begin
	EXULAA_expected[31] = 1'bX;
end 
// expected EXULAA[ 30 ]
initial
begin
	EXULAA_expected[30] = 1'bX;
end 
// expected EXULAA[ 29 ]
initial
begin
	EXULAA_expected[29] = 1'bX;
end 
// expected EXULAA[ 28 ]
initial
begin
	EXULAA_expected[28] = 1'bX;
end 
// expected EXULAA[ 27 ]
initial
begin
	EXULAA_expected[27] = 1'bX;
end 
// expected EXULAA[ 26 ]
initial
begin
	EXULAA_expected[26] = 1'bX;
end 
// expected EXULAA[ 25 ]
initial
begin
	EXULAA_expected[25] = 1'bX;
end 
// expected EXULAA[ 24 ]
initial
begin
	EXULAA_expected[24] = 1'bX;
end 
// expected EXULAA[ 23 ]
initial
begin
	EXULAA_expected[23] = 1'bX;
end 
// expected EXULAA[ 22 ]
initial
begin
	EXULAA_expected[22] = 1'bX;
end 
// expected EXULAA[ 21 ]
initial
begin
	EXULAA_expected[21] = 1'bX;
end 
// expected EXULAA[ 20 ]
initial
begin
	EXULAA_expected[20] = 1'bX;
end 
// expected EXULAA[ 19 ]
initial
begin
	EXULAA_expected[19] = 1'bX;
end 
// expected EXULAA[ 18 ]
initial
begin
	EXULAA_expected[18] = 1'bX;
end 
// expected EXULAA[ 17 ]
initial
begin
	EXULAA_expected[17] = 1'bX;
end 
// expected EXULAA[ 16 ]
initial
begin
	EXULAA_expected[16] = 1'bX;
end 
// expected EXULAA[ 15 ]
initial
begin
	EXULAA_expected[15] = 1'bX;
end 
// expected EXULAA[ 14 ]
initial
begin
	EXULAA_expected[14] = 1'bX;
end 
// expected EXULAA[ 13 ]
initial
begin
	EXULAA_expected[13] = 1'bX;
end 
// expected EXULAA[ 12 ]
initial
begin
	EXULAA_expected[12] = 1'bX;
end 
// expected EXULAA[ 11 ]
initial
begin
	EXULAA_expected[11] = 1'bX;
end 
// expected EXULAA[ 10 ]
initial
begin
	EXULAA_expected[10] = 1'bX;
end 
// expected EXULAA[ 9 ]
initial
begin
	EXULAA_expected[9] = 1'bX;
end 
// expected EXULAA[ 8 ]
initial
begin
	EXULAA_expected[8] = 1'bX;
end 
// expected EXULAA[ 7 ]
initial
begin
	EXULAA_expected[7] = 1'bX;
end 
// expected EXULAA[ 6 ]
initial
begin
	EXULAA_expected[6] = 1'bX;
end 
// expected EXULAA[ 5 ]
initial
begin
	EXULAA_expected[5] = 1'bX;
end 
// expected EXULAA[ 4 ]
initial
begin
	EXULAA_expected[4] = 1'bX;
end 
// expected EXULAA[ 3 ]
initial
begin
	EXULAA_expected[3] = 1'bX;
end 
// expected EXULAA[ 2 ]
initial
begin
	EXULAA_expected[2] = 1'bX;
end 
// expected EXULAA[ 1 ]
initial
begin
	EXULAA_expected[1] = 1'bX;
end 
// expected EXULAA[ 0 ]
initial
begin
	EXULAA_expected[0] = 1'bX;
end 
// expected EXULAB[ 31 ]
initial
begin
	EXULAB_expected[31] = 1'bX;
end 
// expected EXULAB[ 30 ]
initial
begin
	EXULAB_expected[30] = 1'bX;
end 
// expected EXULAB[ 29 ]
initial
begin
	EXULAB_expected[29] = 1'bX;
end 
// expected EXULAB[ 28 ]
initial
begin
	EXULAB_expected[28] = 1'bX;
end 
// expected EXULAB[ 27 ]
initial
begin
	EXULAB_expected[27] = 1'bX;
end 
// expected EXULAB[ 26 ]
initial
begin
	EXULAB_expected[26] = 1'bX;
end 
// expected EXULAB[ 25 ]
initial
begin
	EXULAB_expected[25] = 1'bX;
end 
// expected EXULAB[ 24 ]
initial
begin
	EXULAB_expected[24] = 1'bX;
end 
// expected EXULAB[ 23 ]
initial
begin
	EXULAB_expected[23] = 1'bX;
end 
// expected EXULAB[ 22 ]
initial
begin
	EXULAB_expected[22] = 1'bX;
end 
// expected EXULAB[ 21 ]
initial
begin
	EXULAB_expected[21] = 1'bX;
end 
// expected EXULAB[ 20 ]
initial
begin
	EXULAB_expected[20] = 1'bX;
end 
// expected EXULAB[ 19 ]
initial
begin
	EXULAB_expected[19] = 1'bX;
end 
// expected EXULAB[ 18 ]
initial
begin
	EXULAB_expected[18] = 1'bX;
end 
// expected EXULAB[ 17 ]
initial
begin
	EXULAB_expected[17] = 1'bX;
end 
// expected EXULAB[ 16 ]
initial
begin
	EXULAB_expected[16] = 1'bX;
end 
// expected EXULAB[ 15 ]
initial
begin
	EXULAB_expected[15] = 1'bX;
end 
// expected EXULAB[ 14 ]
initial
begin
	EXULAB_expected[14] = 1'bX;
end 
// expected EXULAB[ 13 ]
initial
begin
	EXULAB_expected[13] = 1'bX;
end 
// expected EXULAB[ 12 ]
initial
begin
	EXULAB_expected[12] = 1'bX;
end 
// expected EXULAB[ 11 ]
initial
begin
	EXULAB_expected[11] = 1'bX;
end 
// expected EXULAB[ 10 ]
initial
begin
	EXULAB_expected[10] = 1'bX;
end 
// expected EXULAB[ 9 ]
initial
begin
	EXULAB_expected[9] = 1'bX;
end 
// expected EXULAB[ 8 ]
initial
begin
	EXULAB_expected[8] = 1'bX;
end 
// expected EXULAB[ 7 ]
initial
begin
	EXULAB_expected[7] = 1'bX;
end 
// expected EXULAB[ 6 ]
initial
begin
	EXULAB_expected[6] = 1'bX;
end 
// expected EXULAB[ 5 ]
initial
begin
	EXULAB_expected[5] = 1'bX;
end 
// expected EXULAB[ 4 ]
initial
begin
	EXULAB_expected[4] = 1'bX;
end 
// expected EXULAB[ 3 ]
initial
begin
	EXULAB_expected[3] = 1'bX;
end 
// expected EXULAB[ 2 ]
initial
begin
	EXULAB_expected[2] = 1'bX;
end 
// expected EXULAB[ 1 ]
initial
begin
	EXULAB_expected[1] = 1'bX;
end 
// expected EXULAB[ 0 ]
initial
begin
	EXULAB_expected[0] = 1'bX;
end 
// expected outALU[ 31 ]
initial
begin
	outALU_expected[31] = 1'bX;
end 
// expected outALU[ 30 ]
initial
begin
	outALU_expected[30] = 1'bX;
end 
// expected outALU[ 29 ]
initial
begin
	outALU_expected[29] = 1'bX;
end 
// expected outALU[ 28 ]
initial
begin
	outALU_expected[28] = 1'bX;
end 
// expected outALU[ 27 ]
initial
begin
	outALU_expected[27] = 1'bX;
end 
// expected outALU[ 26 ]
initial
begin
	outALU_expected[26] = 1'bX;
end 
// expected outALU[ 25 ]
initial
begin
	outALU_expected[25] = 1'bX;
end 
// expected outALU[ 24 ]
initial
begin
	outALU_expected[24] = 1'bX;
end 
// expected outALU[ 23 ]
initial
begin
	outALU_expected[23] = 1'bX;
end 
// expected outALU[ 22 ]
initial
begin
	outALU_expected[22] = 1'bX;
end 
// expected outALU[ 21 ]
initial
begin
	outALU_expected[21] = 1'bX;
end 
// expected outALU[ 20 ]
initial
begin
	outALU_expected[20] = 1'bX;
end 
// expected outALU[ 19 ]
initial
begin
	outALU_expected[19] = 1'bX;
end 
// expected outALU[ 18 ]
initial
begin
	outALU_expected[18] = 1'bX;
end 
// expected outALU[ 17 ]
initial
begin
	outALU_expected[17] = 1'bX;
end 
// expected outALU[ 16 ]
initial
begin
	outALU_expected[16] = 1'bX;
end 
// expected outALU[ 15 ]
initial
begin
	outALU_expected[15] = 1'bX;
end 
// expected outALU[ 14 ]
initial
begin
	outALU_expected[14] = 1'bX;
end 
// expected outALU[ 13 ]
initial
begin
	outALU_expected[13] = 1'bX;
end 
// expected outALU[ 12 ]
initial
begin
	outALU_expected[12] = 1'bX;
end 
// expected outALU[ 11 ]
initial
begin
	outALU_expected[11] = 1'bX;
end 
// expected outALU[ 10 ]
initial
begin
	outALU_expected[10] = 1'bX;
end 
// expected outALU[ 9 ]
initial
begin
	outALU_expected[9] = 1'bX;
end 
// expected outALU[ 8 ]
initial
begin
	outALU_expected[8] = 1'bX;
end 
// expected outALU[ 7 ]
initial
begin
	outALU_expected[7] = 1'bX;
end 
// expected outALU[ 6 ]
initial
begin
	outALU_expected[6] = 1'bX;
end 
// expected outALU[ 5 ]
initial
begin
	outALU_expected[5] = 1'bX;
end 
// expected outALU[ 4 ]
initial
begin
	outALU_expected[4] = 1'bX;
end 
// expected outALU[ 3 ]
initial
begin
	outALU_expected[3] = 1'bX;
end 
// expected outALU[ 2 ]
initial
begin
	outALU_expected[2] = 1'bX;
end 
// expected outALU[ 1 ]
initial
begin
	outALU_expected[1] = 1'bX;
end 
// expected outALU[ 0 ]
initial
begin
	outALU_expected[0] = 1'bX;
end 
// expected EXHIGH[ 31 ]
initial
begin
	EXHIGH_expected[31] = 1'bX;
end 
// expected EXHIGH[ 30 ]
initial
begin
	EXHIGH_expected[30] = 1'bX;
end 
// expected EXHIGH[ 29 ]
initial
begin
	EXHIGH_expected[29] = 1'bX;
end 
// expected EXHIGH[ 28 ]
initial
begin
	EXHIGH_expected[28] = 1'bX;
end 
// expected EXHIGH[ 27 ]
initial
begin
	EXHIGH_expected[27] = 1'bX;
end 
// expected EXHIGH[ 26 ]
initial
begin
	EXHIGH_expected[26] = 1'bX;
end 
// expected EXHIGH[ 25 ]
initial
begin
	EXHIGH_expected[25] = 1'bX;
end 
// expected EXHIGH[ 24 ]
initial
begin
	EXHIGH_expected[24] = 1'bX;
end 
// expected EXHIGH[ 23 ]
initial
begin
	EXHIGH_expected[23] = 1'bX;
end 
// expected EXHIGH[ 22 ]
initial
begin
	EXHIGH_expected[22] = 1'bX;
end 
// expected EXHIGH[ 21 ]
initial
begin
	EXHIGH_expected[21] = 1'bX;
end 
// expected EXHIGH[ 20 ]
initial
begin
	EXHIGH_expected[20] = 1'bX;
end 
// expected EXHIGH[ 19 ]
initial
begin
	EXHIGH_expected[19] = 1'bX;
end 
// expected EXHIGH[ 18 ]
initial
begin
	EXHIGH_expected[18] = 1'bX;
end 
// expected EXHIGH[ 17 ]
initial
begin
	EXHIGH_expected[17] = 1'bX;
end 
// expected EXHIGH[ 16 ]
initial
begin
	EXHIGH_expected[16] = 1'bX;
end 
// expected EXHIGH[ 15 ]
initial
begin
	EXHIGH_expected[15] = 1'bX;
end 
// expected EXHIGH[ 14 ]
initial
begin
	EXHIGH_expected[14] = 1'bX;
end 
// expected EXHIGH[ 13 ]
initial
begin
	EXHIGH_expected[13] = 1'bX;
end 
// expected EXHIGH[ 12 ]
initial
begin
	EXHIGH_expected[12] = 1'bX;
end 
// expected EXHIGH[ 11 ]
initial
begin
	EXHIGH_expected[11] = 1'bX;
end 
// expected EXHIGH[ 10 ]
initial
begin
	EXHIGH_expected[10] = 1'bX;
end 
// expected EXHIGH[ 9 ]
initial
begin
	EXHIGH_expected[9] = 1'bX;
end 
// expected EXHIGH[ 8 ]
initial
begin
	EXHIGH_expected[8] = 1'bX;
end 
// expected EXHIGH[ 7 ]
initial
begin
	EXHIGH_expected[7] = 1'bX;
end 
// expected EXHIGH[ 6 ]
initial
begin
	EXHIGH_expected[6] = 1'bX;
end 
// expected EXHIGH[ 5 ]
initial
begin
	EXHIGH_expected[5] = 1'bX;
end 
// expected EXHIGH[ 4 ]
initial
begin
	EXHIGH_expected[4] = 1'bX;
end 
// expected EXHIGH[ 3 ]
initial
begin
	EXHIGH_expected[3] = 1'bX;
end 
// expected EXHIGH[ 2 ]
initial
begin
	EXHIGH_expected[2] = 1'bX;
end 
// expected EXHIGH[ 1 ]
initial
begin
	EXHIGH_expected[1] = 1'bX;
end 
// expected EXHIGH[ 0 ]
initial
begin
	EXHIGH_expected[0] = 1'bX;
end 
// expected EXLOW[ 31 ]
initial
begin
	EXLOW_expected[31] = 1'bX;
end 
// expected EXLOW[ 30 ]
initial
begin
	EXLOW_expected[30] = 1'bX;
end 
// expected EXLOW[ 29 ]
initial
begin
	EXLOW_expected[29] = 1'bX;
end 
// expected EXLOW[ 28 ]
initial
begin
	EXLOW_expected[28] = 1'bX;
end 
// expected EXLOW[ 27 ]
initial
begin
	EXLOW_expected[27] = 1'bX;
end 
// expected EXLOW[ 26 ]
initial
begin
	EXLOW_expected[26] = 1'bX;
end 
// expected EXLOW[ 25 ]
initial
begin
	EXLOW_expected[25] = 1'bX;
end 
// expected EXLOW[ 24 ]
initial
begin
	EXLOW_expected[24] = 1'bX;
end 
// expected EXLOW[ 23 ]
initial
begin
	EXLOW_expected[23] = 1'bX;
end 
// expected EXLOW[ 22 ]
initial
begin
	EXLOW_expected[22] = 1'bX;
end 
// expected EXLOW[ 21 ]
initial
begin
	EXLOW_expected[21] = 1'bX;
end 
// expected EXLOW[ 20 ]
initial
begin
	EXLOW_expected[20] = 1'bX;
end 
// expected EXLOW[ 19 ]
initial
begin
	EXLOW_expected[19] = 1'bX;
end 
// expected EXLOW[ 18 ]
initial
begin
	EXLOW_expected[18] = 1'bX;
end 
// expected EXLOW[ 17 ]
initial
begin
	EXLOW_expected[17] = 1'bX;
end 
// expected EXLOW[ 16 ]
initial
begin
	EXLOW_expected[16] = 1'bX;
end 
// expected EXLOW[ 15 ]
initial
begin
	EXLOW_expected[15] = 1'bX;
end 
// expected EXLOW[ 14 ]
initial
begin
	EXLOW_expected[14] = 1'bX;
end 
// expected EXLOW[ 13 ]
initial
begin
	EXLOW_expected[13] = 1'bX;
end 
// expected EXLOW[ 12 ]
initial
begin
	EXLOW_expected[12] = 1'bX;
end 
// expected EXLOW[ 11 ]
initial
begin
	EXLOW_expected[11] = 1'bX;
end 
// expected EXLOW[ 10 ]
initial
begin
	EXLOW_expected[10] = 1'bX;
end 
// expected EXLOW[ 9 ]
initial
begin
	EXLOW_expected[9] = 1'bX;
end 
// expected EXLOW[ 8 ]
initial
begin
	EXLOW_expected[8] = 1'bX;
end 
// expected EXLOW[ 7 ]
initial
begin
	EXLOW_expected[7] = 1'bX;
end 
// expected EXLOW[ 6 ]
initial
begin
	EXLOW_expected[6] = 1'bX;
end 
// expected EXLOW[ 5 ]
initial
begin
	EXLOW_expected[5] = 1'bX;
end 
// expected EXLOW[ 4 ]
initial
begin
	EXLOW_expected[4] = 1'bX;
end 
// expected EXLOW[ 3 ]
initial
begin
	EXLOW_expected[3] = 1'bX;
end 
// expected EXLOW[ 2 ]
initial
begin
	EXLOW_expected[2] = 1'bX;
end 
// expected EXLOW[ 1 ]
initial
begin
	EXLOW_expected[1] = 1'bX;
end 
// expected EXLOW[ 0 ]
initial
begin
	EXLOW_expected[0] = 1'bX;
end 

// expected Zero
initial
begin
	Zero_expected = 1'bX;
end 

// expected DJAL
initial
begin
	DJAL_expected = 1'bX;
end 

// expected DJump
initial
begin
	DJump_expected = 1'bX;
end 

// expected Stall
initial
begin
	Stall_expected = 1'bX;
end 

// expected Jump
initial
begin
	Jump_expected = 1'bX;
end 

// expected Flush
initial
begin
	Flush_expected = 1'bX;
end 

// expected OrigPC
initial
begin
	OrigPC_expected = 1'bX;
end 
// expected ForwardA[ 1 ]
initial
begin
	ForwardA_expected[1] = 1'bX;
end 
// expected ForwardA[ 0 ]
initial
begin
	ForwardA_expected[0] = 1'bX;
end 
// expected ForwardB[ 1 ]
initial
begin
	ForwardB_expected[1] = 1'bX;
end 
// expected ForwardB[ 0 ]
initial
begin
	ForwardB_expected[0] = 1'bX;
end 

// expected MEMEscreveMem
initial
begin
	MEMEscreveMem_expected = 1'bX;
end 
// expected MEMBranch[ 1 ]
initial
begin
	MEMBranch_expected[1] = 1'bX;
end 
// expected MEMBranch[ 0 ]
initial
begin
	MEMBranch_expected[0] = 1'bX;
end 
// expected MEMnPC[ 31 ]
initial
begin
	MEMnPC_expected[31] = 1'bX;
end 
// expected MEMnPC[ 30 ]
initial
begin
	MEMnPC_expected[30] = 1'bX;
end 
// expected MEMnPC[ 29 ]
initial
begin
	MEMnPC_expected[29] = 1'bX;
end 
// expected MEMnPC[ 28 ]
initial
begin
	MEMnPC_expected[28] = 1'bX;
end 
// expected MEMnPC[ 27 ]
initial
begin
	MEMnPC_expected[27] = 1'bX;
end 
// expected MEMnPC[ 26 ]
initial
begin
	MEMnPC_expected[26] = 1'bX;
end 
// expected MEMnPC[ 25 ]
initial
begin
	MEMnPC_expected[25] = 1'bX;
end 
// expected MEMnPC[ 24 ]
initial
begin
	MEMnPC_expected[24] = 1'bX;
end 
// expected MEMnPC[ 23 ]
initial
begin
	MEMnPC_expected[23] = 1'bX;
end 
// expected MEMnPC[ 22 ]
initial
begin
	MEMnPC_expected[22] = 1'bX;
end 
// expected MEMnPC[ 21 ]
initial
begin
	MEMnPC_expected[21] = 1'bX;
end 
// expected MEMnPC[ 20 ]
initial
begin
	MEMnPC_expected[20] = 1'bX;
end 
// expected MEMnPC[ 19 ]
initial
begin
	MEMnPC_expected[19] = 1'bX;
end 
// expected MEMnPC[ 18 ]
initial
begin
	MEMnPC_expected[18] = 1'bX;
end 
// expected MEMnPC[ 17 ]
initial
begin
	MEMnPC_expected[17] = 1'bX;
end 
// expected MEMnPC[ 16 ]
initial
begin
	MEMnPC_expected[16] = 1'bX;
end 
// expected MEMnPC[ 15 ]
initial
begin
	MEMnPC_expected[15] = 1'bX;
end 
// expected MEMnPC[ 14 ]
initial
begin
	MEMnPC_expected[14] = 1'bX;
end 
// expected MEMnPC[ 13 ]
initial
begin
	MEMnPC_expected[13] = 1'bX;
end 
// expected MEMnPC[ 12 ]
initial
begin
	MEMnPC_expected[12] = 1'bX;
end 
// expected MEMnPC[ 11 ]
initial
begin
	MEMnPC_expected[11] = 1'bX;
end 
// expected MEMnPC[ 10 ]
initial
begin
	MEMnPC_expected[10] = 1'bX;
end 
// expected MEMnPC[ 9 ]
initial
begin
	MEMnPC_expected[9] = 1'bX;
end 
// expected MEMnPC[ 8 ]
initial
begin
	MEMnPC_expected[8] = 1'bX;
end 
// expected MEMnPC[ 7 ]
initial
begin
	MEMnPC_expected[7] = 1'bX;
end 
// expected MEMnPC[ 6 ]
initial
begin
	MEMnPC_expected[6] = 1'bX;
end 
// expected MEMnPC[ 5 ]
initial
begin
	MEMnPC_expected[5] = 1'bX;
end 
// expected MEMnPC[ 4 ]
initial
begin
	MEMnPC_expected[4] = 1'bX;
end 
// expected MEMnPC[ 3 ]
initial
begin
	MEMnPC_expected[3] = 1'bX;
end 
// expected MEMnPC[ 2 ]
initial
begin
	MEMnPC_expected[2] = 1'bX;
end 
// expected MEMnPC[ 1 ]
initial
begin
	MEMnPC_expected[1] = 1'bX;
end 
// expected MEMnPC[ 0 ]
initial
begin
	MEMnPC_expected[0] = 1'bX;
end 

// expected MEMZero
initial
begin
	MEMZero_expected = 1'bX;
end 
// expected MEMReadValue[ 31 ]
initial
begin
	MEMReadValue_expected[31] = 1'bX;
end 
// expected MEMReadValue[ 30 ]
initial
begin
	MEMReadValue_expected[30] = 1'bX;
end 
// expected MEMReadValue[ 29 ]
initial
begin
	MEMReadValue_expected[29] = 1'bX;
end 
// expected MEMReadValue[ 28 ]
initial
begin
	MEMReadValue_expected[28] = 1'bX;
end 
// expected MEMReadValue[ 27 ]
initial
begin
	MEMReadValue_expected[27] = 1'bX;
end 
// expected MEMReadValue[ 26 ]
initial
begin
	MEMReadValue_expected[26] = 1'bX;
end 
// expected MEMReadValue[ 25 ]
initial
begin
	MEMReadValue_expected[25] = 1'bX;
end 
// expected MEMReadValue[ 24 ]
initial
begin
	MEMReadValue_expected[24] = 1'bX;
end 
// expected MEMReadValue[ 23 ]
initial
begin
	MEMReadValue_expected[23] = 1'bX;
end 
// expected MEMReadValue[ 22 ]
initial
begin
	MEMReadValue_expected[22] = 1'bX;
end 
// expected MEMReadValue[ 21 ]
initial
begin
	MEMReadValue_expected[21] = 1'bX;
end 
// expected MEMReadValue[ 20 ]
initial
begin
	MEMReadValue_expected[20] = 1'bX;
end 
// expected MEMReadValue[ 19 ]
initial
begin
	MEMReadValue_expected[19] = 1'bX;
end 
// expected MEMReadValue[ 18 ]
initial
begin
	MEMReadValue_expected[18] = 1'bX;
end 
// expected MEMReadValue[ 17 ]
initial
begin
	MEMReadValue_expected[17] = 1'bX;
end 
// expected MEMReadValue[ 16 ]
initial
begin
	MEMReadValue_expected[16] = 1'bX;
end 
// expected MEMReadValue[ 15 ]
initial
begin
	MEMReadValue_expected[15] = 1'bX;
end 
// expected MEMReadValue[ 14 ]
initial
begin
	MEMReadValue_expected[14] = 1'bX;
end 
// expected MEMReadValue[ 13 ]
initial
begin
	MEMReadValue_expected[13] = 1'bX;
end 
// expected MEMReadValue[ 12 ]
initial
begin
	MEMReadValue_expected[12] = 1'bX;
end 
// expected MEMReadValue[ 11 ]
initial
begin
	MEMReadValue_expected[11] = 1'bX;
end 
// expected MEMReadValue[ 10 ]
initial
begin
	MEMReadValue_expected[10] = 1'bX;
end 
// expected MEMReadValue[ 9 ]
initial
begin
	MEMReadValue_expected[9] = 1'bX;
end 
// expected MEMReadValue[ 8 ]
initial
begin
	MEMReadValue_expected[8] = 1'bX;
end 
// expected MEMReadValue[ 7 ]
initial
begin
	MEMReadValue_expected[7] = 1'bX;
end 
// expected MEMReadValue[ 6 ]
initial
begin
	MEMReadValue_expected[6] = 1'bX;
end 
// expected MEMReadValue[ 5 ]
initial
begin
	MEMReadValue_expected[5] = 1'bX;
end 
// expected MEMReadValue[ 4 ]
initial
begin
	MEMReadValue_expected[4] = 1'bX;
end 
// expected MEMReadValue[ 3 ]
initial
begin
	MEMReadValue_expected[3] = 1'bX;
end 
// expected MEMReadValue[ 2 ]
initial
begin
	MEMReadValue_expected[2] = 1'bX;
end 
// expected MEMReadValue[ 1 ]
initial
begin
	MEMReadValue_expected[1] = 1'bX;
end 
// expected MEMReadValue[ 0 ]
initial
begin
	MEMReadValue_expected[0] = 1'bX;
end 
// expected WBDadoDeRetorno[ 31 ]
initial
begin
	WBDadoDeRetorno_expected[31] = 1'bX;
end 
// expected WBDadoDeRetorno[ 30 ]
initial
begin
	WBDadoDeRetorno_expected[30] = 1'bX;
end 
// expected WBDadoDeRetorno[ 29 ]
initial
begin
	WBDadoDeRetorno_expected[29] = 1'bX;
end 
// expected WBDadoDeRetorno[ 28 ]
initial
begin
	WBDadoDeRetorno_expected[28] = 1'bX;
end 
// expected WBDadoDeRetorno[ 27 ]
initial
begin
	WBDadoDeRetorno_expected[27] = 1'bX;
end 
// expected WBDadoDeRetorno[ 26 ]
initial
begin
	WBDadoDeRetorno_expected[26] = 1'bX;
end 
// expected WBDadoDeRetorno[ 25 ]
initial
begin
	WBDadoDeRetorno_expected[25] = 1'bX;
end 
// expected WBDadoDeRetorno[ 24 ]
initial
begin
	WBDadoDeRetorno_expected[24] = 1'bX;
end 
// expected WBDadoDeRetorno[ 23 ]
initial
begin
	WBDadoDeRetorno_expected[23] = 1'bX;
end 
// expected WBDadoDeRetorno[ 22 ]
initial
begin
	WBDadoDeRetorno_expected[22] = 1'bX;
end 
// expected WBDadoDeRetorno[ 21 ]
initial
begin
	WBDadoDeRetorno_expected[21] = 1'bX;
end 
// expected WBDadoDeRetorno[ 20 ]
initial
begin
	WBDadoDeRetorno_expected[20] = 1'bX;
end 
// expected WBDadoDeRetorno[ 19 ]
initial
begin
	WBDadoDeRetorno_expected[19] = 1'bX;
end 
// expected WBDadoDeRetorno[ 18 ]
initial
begin
	WBDadoDeRetorno_expected[18] = 1'bX;
end 
// expected WBDadoDeRetorno[ 17 ]
initial
begin
	WBDadoDeRetorno_expected[17] = 1'bX;
end 
// expected WBDadoDeRetorno[ 16 ]
initial
begin
	WBDadoDeRetorno_expected[16] = 1'bX;
end 
// expected WBDadoDeRetorno[ 15 ]
initial
begin
	WBDadoDeRetorno_expected[15] = 1'bX;
end 
// expected WBDadoDeRetorno[ 14 ]
initial
begin
	WBDadoDeRetorno_expected[14] = 1'bX;
end 
// expected WBDadoDeRetorno[ 13 ]
initial
begin
	WBDadoDeRetorno_expected[13] = 1'bX;
end 
// expected WBDadoDeRetorno[ 12 ]
initial
begin
	WBDadoDeRetorno_expected[12] = 1'bX;
end 
// expected WBDadoDeRetorno[ 11 ]
initial
begin
	WBDadoDeRetorno_expected[11] = 1'bX;
end 
// expected WBDadoDeRetorno[ 10 ]
initial
begin
	WBDadoDeRetorno_expected[10] = 1'bX;
end 
// expected WBDadoDeRetorno[ 9 ]
initial
begin
	WBDadoDeRetorno_expected[9] = 1'bX;
end 
// expected WBDadoDeRetorno[ 8 ]
initial
begin
	WBDadoDeRetorno_expected[8] = 1'bX;
end 
// expected WBDadoDeRetorno[ 7 ]
initial
begin
	WBDadoDeRetorno_expected[7] = 1'bX;
end 
// expected WBDadoDeRetorno[ 6 ]
initial
begin
	WBDadoDeRetorno_expected[6] = 1'bX;
end 
// expected WBDadoDeRetorno[ 5 ]
initial
begin
	WBDadoDeRetorno_expected[5] = 1'bX;
end 
// expected WBDadoDeRetorno[ 4 ]
initial
begin
	WBDadoDeRetorno_expected[4] = 1'bX;
end 
// expected WBDadoDeRetorno[ 3 ]
initial
begin
	WBDadoDeRetorno_expected[3] = 1'bX;
end 
// expected WBDadoDeRetorno[ 2 ]
initial
begin
	WBDadoDeRetorno_expected[2] = 1'bX;
end 
// expected WBDadoDeRetorno[ 1 ]
initial
begin
	WBDadoDeRetorno_expected[1] = 1'bX;
end 
// expected WBDadoDeRetorno[ 0 ]
initial
begin
	WBDadoDeRetorno_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUOperation_expected or ALUOperation or BInstruction_expected or BInstruction or BPC_expected or BPC or BproxPC_expected or BproxPC or DCtrlBranch_expected or DCtrlBranch or DCtrlcontrolJump_expected or DCtrlcontrolJump or DCtrlEscreveMem_expected or DCtrlEscreveMem or DCtrlEscreveReg_expected or DCtrlEscreveReg or DCtrlExtent_expected or DCtrlExtent or DCtrlMemParaReg_expected or DCtrlMemParaReg or DCtrlopALU_expected or DCtrlopALU or DCtrlOrigALU_expected or DCtrlOrigALU or DCtrlRegDst_expected or DCtrlRegDst or DJAL_expected or DJAL or DJump_expected or DJump or DJumpPC_expected or DJumpPC or DRSDados0_expected or DRSDados0 or DRTDados1_expected or DRTDados1 or EXHIGH_expected or EXHIGH or EXImm_expected or EXImm or EXLOW_expected or EXLOW or EXopALU_expected or EXopALU or EXULAA_expected or EXULAA or EXULAB_expected or EXULAB or Flush_expected or Flush or ForwardA_expected or ForwardA or ForwardB_expected or ForwardB or Jump_expected or Jump or MEMBranch_expected or MEMBranch or MEMEscreveMem_expected or MEMEscreveMem or MEMnPC_expected or MEMnPC or MEMReadValue_expected or MEMReadValue or MEMZero_expected or MEMZero or OrigPC_expected or OrigPC or outALU_expected or outALU or Stall_expected or Stall or WBDadoDeRetorno_expected or WBDadoDeRetorno or WBEscreveReg_expected or WBEscreveReg or WBMemParaReg_expected or WBMemParaReg or Zero_expected or Zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOperation = %b | expected BInstruction = %b | expected BPC = %b | expected BproxPC = %b | expected DCtrlBranch = %b | expected DCtrlcontrolJump = %b | expected DCtrlEscreveMem = %b | expected DCtrlEscreveReg = %b | expected DCtrlExtent = %b | expected DCtrlMemParaReg = %b | expected DCtrlopALU = %b | expected DCtrlOrigALU = %b | expected DCtrlRegDst = %b | expected DJAL = %b | expected DJump = %b | expected DJumpPC = %b | expected DRSDados0 = %b | expected DRTDados1 = %b | expected EXHIGH = %b | expected EXImm = %b | expected EXLOW = %b | expected EXopALU = %b | expected EXULAA = %b | expected EXULAB = %b | expected Flush = %b | expected ForwardA = %b | expected ForwardB = %b | expected Jump = %b | expected MEMBranch = %b | expected MEMEscreveMem = %b | expected MEMnPC = %b | expected MEMReadValue = %b | expected MEMZero = %b | expected OrigPC = %b | expected outALU = %b | expected Stall = %b | expected WBDadoDeRetorno = %b | expected WBEscreveReg = %b | expected WBMemParaReg = %b | expected Zero = %b | ",ALUOperation_expected_prev,BInstruction_expected_prev,BPC_expected_prev,BproxPC_expected_prev,DCtrlBranch_expected_prev,DCtrlcontrolJump_expected_prev,DCtrlEscreveMem_expected_prev,DCtrlEscreveReg_expected_prev,DCtrlExtent_expected_prev,DCtrlMemParaReg_expected_prev,DCtrlopALU_expected_prev,DCtrlOrigALU_expected_prev,DCtrlRegDst_expected_prev,DJAL_expected_prev,DJump_expected_prev,DJumpPC_expected_prev,DRSDados0_expected_prev,DRTDados1_expected_prev,EXHIGH_expected_prev,EXImm_expected_prev,EXLOW_expected_prev,EXopALU_expected_prev,EXULAA_expected_prev,EXULAB_expected_prev,Flush_expected_prev,ForwardA_expected_prev,ForwardB_expected_prev,Jump_expected_prev,MEMBranch_expected_prev,MEMEscreveMem_expected_prev,MEMnPC_expected_prev,MEMReadValue_expected_prev,MEMZero_expected_prev,OrigPC_expected_prev,outALU_expected_prev,Stall_expected_prev,WBDadoDeRetorno_expected_prev,WBEscreveReg_expected_prev,WBMemParaReg_expected_prev,Zero_expected_prev);
	$display("| real ALUOperation = %b | real BInstruction = %b | real BPC = %b | real BproxPC = %b | real DCtrlBranch = %b | real DCtrlcontrolJump = %b | real DCtrlEscreveMem = %b | real DCtrlEscreveReg = %b | real DCtrlExtent = %b | real DCtrlMemParaReg = %b | real DCtrlopALU = %b | real DCtrlOrigALU = %b | real DCtrlRegDst = %b | real DJAL = %b | real DJump = %b | real DJumpPC = %b | real DRSDados0 = %b | real DRTDados1 = %b | real EXHIGH = %b | real EXImm = %b | real EXLOW = %b | real EXopALU = %b | real EXULAA = %b | real EXULAB = %b | real Flush = %b | real ForwardA = %b | real ForwardB = %b | real Jump = %b | real MEMBranch = %b | real MEMEscreveMem = %b | real MEMnPC = %b | real MEMReadValue = %b | real MEMZero = %b | real OrigPC = %b | real outALU = %b | real Stall = %b | real WBDadoDeRetorno = %b | real WBEscreveReg = %b | real WBMemParaReg = %b | real Zero = %b | ",ALUOperation_prev,BInstruction_prev,BPC_prev,BproxPC_prev,DCtrlBranch_prev,DCtrlcontrolJump_prev,DCtrlEscreveMem_prev,DCtrlEscreveReg_prev,DCtrlExtent_prev,DCtrlMemParaReg_prev,DCtrlopALU_prev,DCtrlOrigALU_prev,DCtrlRegDst_prev,DJAL_prev,DJump_prev,DJumpPC_prev,DRSDados0_prev,DRTDados1_prev,EXHIGH_prev,EXImm_prev,EXLOW_prev,EXopALU_prev,EXULAA_prev,EXULAB_prev,Flush_prev,ForwardA_prev,ForwardB_prev,Jump_prev,MEMBranch_prev,MEMEscreveMem_prev,MEMnPC_prev,MEMReadValue_prev,MEMZero_prev,OrigPC_prev,outALU_prev,Stall_prev,WBDadoDeRetorno_prev,WBEscreveReg_prev,WBMemParaReg_prev,Zero_prev);
`endif
	if (
		( ALUOperation_expected_prev[0] !== 1'bx ) && ( ALUOperation_prev[0] !== ALUOperation_expected_prev[0] )
		&& ((ALUOperation_expected_prev[0] !== last_ALUOperation_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[0] = ALUOperation_expected_prev[0];
	end
	if (
		( ALUOperation_expected_prev[1] !== 1'bx ) && ( ALUOperation_prev[1] !== ALUOperation_expected_prev[1] )
		&& ((ALUOperation_expected_prev[1] !== last_ALUOperation_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[1] = ALUOperation_expected_prev[1];
	end
	if (
		( ALUOperation_expected_prev[2] !== 1'bx ) && ( ALUOperation_prev[2] !== ALUOperation_expected_prev[2] )
		&& ((ALUOperation_expected_prev[2] !== last_ALUOperation_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[2] = ALUOperation_expected_prev[2];
	end
	if (
		( ALUOperation_expected_prev[3] !== 1'bx ) && ( ALUOperation_prev[3] !== ALUOperation_expected_prev[3] )
		&& ((ALUOperation_expected_prev[3] !== last_ALUOperation_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOperation[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOperation_expected_prev);
		$display ("     Real value = %b", ALUOperation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOperation_exp[3] = ALUOperation_expected_prev[3];
	end
	if (
		( BInstruction_expected_prev[0] !== 1'bx ) && ( BInstruction_prev[0] !== BInstruction_expected_prev[0] )
		&& ((BInstruction_expected_prev[0] !== last_BInstruction_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[0] = BInstruction_expected_prev[0];
	end
	if (
		( BInstruction_expected_prev[1] !== 1'bx ) && ( BInstruction_prev[1] !== BInstruction_expected_prev[1] )
		&& ((BInstruction_expected_prev[1] !== last_BInstruction_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[1] = BInstruction_expected_prev[1];
	end
	if (
		( BInstruction_expected_prev[2] !== 1'bx ) && ( BInstruction_prev[2] !== BInstruction_expected_prev[2] )
		&& ((BInstruction_expected_prev[2] !== last_BInstruction_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[2] = BInstruction_expected_prev[2];
	end
	if (
		( BInstruction_expected_prev[3] !== 1'bx ) && ( BInstruction_prev[3] !== BInstruction_expected_prev[3] )
		&& ((BInstruction_expected_prev[3] !== last_BInstruction_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[3] = BInstruction_expected_prev[3];
	end
	if (
		( BInstruction_expected_prev[4] !== 1'bx ) && ( BInstruction_prev[4] !== BInstruction_expected_prev[4] )
		&& ((BInstruction_expected_prev[4] !== last_BInstruction_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[4] = BInstruction_expected_prev[4];
	end
	if (
		( BInstruction_expected_prev[5] !== 1'bx ) && ( BInstruction_prev[5] !== BInstruction_expected_prev[5] )
		&& ((BInstruction_expected_prev[5] !== last_BInstruction_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[5] = BInstruction_expected_prev[5];
	end
	if (
		( BInstruction_expected_prev[6] !== 1'bx ) && ( BInstruction_prev[6] !== BInstruction_expected_prev[6] )
		&& ((BInstruction_expected_prev[6] !== last_BInstruction_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[6] = BInstruction_expected_prev[6];
	end
	if (
		( BInstruction_expected_prev[7] !== 1'bx ) && ( BInstruction_prev[7] !== BInstruction_expected_prev[7] )
		&& ((BInstruction_expected_prev[7] !== last_BInstruction_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[7] = BInstruction_expected_prev[7];
	end
	if (
		( BInstruction_expected_prev[8] !== 1'bx ) && ( BInstruction_prev[8] !== BInstruction_expected_prev[8] )
		&& ((BInstruction_expected_prev[8] !== last_BInstruction_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[8] = BInstruction_expected_prev[8];
	end
	if (
		( BInstruction_expected_prev[9] !== 1'bx ) && ( BInstruction_prev[9] !== BInstruction_expected_prev[9] )
		&& ((BInstruction_expected_prev[9] !== last_BInstruction_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[9] = BInstruction_expected_prev[9];
	end
	if (
		( BInstruction_expected_prev[10] !== 1'bx ) && ( BInstruction_prev[10] !== BInstruction_expected_prev[10] )
		&& ((BInstruction_expected_prev[10] !== last_BInstruction_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[10] = BInstruction_expected_prev[10];
	end
	if (
		( BInstruction_expected_prev[11] !== 1'bx ) && ( BInstruction_prev[11] !== BInstruction_expected_prev[11] )
		&& ((BInstruction_expected_prev[11] !== last_BInstruction_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[11] = BInstruction_expected_prev[11];
	end
	if (
		( BInstruction_expected_prev[12] !== 1'bx ) && ( BInstruction_prev[12] !== BInstruction_expected_prev[12] )
		&& ((BInstruction_expected_prev[12] !== last_BInstruction_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[12] = BInstruction_expected_prev[12];
	end
	if (
		( BInstruction_expected_prev[13] !== 1'bx ) && ( BInstruction_prev[13] !== BInstruction_expected_prev[13] )
		&& ((BInstruction_expected_prev[13] !== last_BInstruction_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[13] = BInstruction_expected_prev[13];
	end
	if (
		( BInstruction_expected_prev[14] !== 1'bx ) && ( BInstruction_prev[14] !== BInstruction_expected_prev[14] )
		&& ((BInstruction_expected_prev[14] !== last_BInstruction_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[14] = BInstruction_expected_prev[14];
	end
	if (
		( BInstruction_expected_prev[15] !== 1'bx ) && ( BInstruction_prev[15] !== BInstruction_expected_prev[15] )
		&& ((BInstruction_expected_prev[15] !== last_BInstruction_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[15] = BInstruction_expected_prev[15];
	end
	if (
		( BInstruction_expected_prev[16] !== 1'bx ) && ( BInstruction_prev[16] !== BInstruction_expected_prev[16] )
		&& ((BInstruction_expected_prev[16] !== last_BInstruction_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[16] = BInstruction_expected_prev[16];
	end
	if (
		( BInstruction_expected_prev[17] !== 1'bx ) && ( BInstruction_prev[17] !== BInstruction_expected_prev[17] )
		&& ((BInstruction_expected_prev[17] !== last_BInstruction_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[17] = BInstruction_expected_prev[17];
	end
	if (
		( BInstruction_expected_prev[18] !== 1'bx ) && ( BInstruction_prev[18] !== BInstruction_expected_prev[18] )
		&& ((BInstruction_expected_prev[18] !== last_BInstruction_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[18] = BInstruction_expected_prev[18];
	end
	if (
		( BInstruction_expected_prev[19] !== 1'bx ) && ( BInstruction_prev[19] !== BInstruction_expected_prev[19] )
		&& ((BInstruction_expected_prev[19] !== last_BInstruction_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[19] = BInstruction_expected_prev[19];
	end
	if (
		( BInstruction_expected_prev[20] !== 1'bx ) && ( BInstruction_prev[20] !== BInstruction_expected_prev[20] )
		&& ((BInstruction_expected_prev[20] !== last_BInstruction_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[20] = BInstruction_expected_prev[20];
	end
	if (
		( BInstruction_expected_prev[21] !== 1'bx ) && ( BInstruction_prev[21] !== BInstruction_expected_prev[21] )
		&& ((BInstruction_expected_prev[21] !== last_BInstruction_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[21] = BInstruction_expected_prev[21];
	end
	if (
		( BInstruction_expected_prev[22] !== 1'bx ) && ( BInstruction_prev[22] !== BInstruction_expected_prev[22] )
		&& ((BInstruction_expected_prev[22] !== last_BInstruction_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[22] = BInstruction_expected_prev[22];
	end
	if (
		( BInstruction_expected_prev[23] !== 1'bx ) && ( BInstruction_prev[23] !== BInstruction_expected_prev[23] )
		&& ((BInstruction_expected_prev[23] !== last_BInstruction_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[23] = BInstruction_expected_prev[23];
	end
	if (
		( BInstruction_expected_prev[24] !== 1'bx ) && ( BInstruction_prev[24] !== BInstruction_expected_prev[24] )
		&& ((BInstruction_expected_prev[24] !== last_BInstruction_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[24] = BInstruction_expected_prev[24];
	end
	if (
		( BInstruction_expected_prev[25] !== 1'bx ) && ( BInstruction_prev[25] !== BInstruction_expected_prev[25] )
		&& ((BInstruction_expected_prev[25] !== last_BInstruction_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[25] = BInstruction_expected_prev[25];
	end
	if (
		( BInstruction_expected_prev[26] !== 1'bx ) && ( BInstruction_prev[26] !== BInstruction_expected_prev[26] )
		&& ((BInstruction_expected_prev[26] !== last_BInstruction_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[26] = BInstruction_expected_prev[26];
	end
	if (
		( BInstruction_expected_prev[27] !== 1'bx ) && ( BInstruction_prev[27] !== BInstruction_expected_prev[27] )
		&& ((BInstruction_expected_prev[27] !== last_BInstruction_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[27] = BInstruction_expected_prev[27];
	end
	if (
		( BInstruction_expected_prev[28] !== 1'bx ) && ( BInstruction_prev[28] !== BInstruction_expected_prev[28] )
		&& ((BInstruction_expected_prev[28] !== last_BInstruction_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[28] = BInstruction_expected_prev[28];
	end
	if (
		( BInstruction_expected_prev[29] !== 1'bx ) && ( BInstruction_prev[29] !== BInstruction_expected_prev[29] )
		&& ((BInstruction_expected_prev[29] !== last_BInstruction_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[29] = BInstruction_expected_prev[29];
	end
	if (
		( BInstruction_expected_prev[30] !== 1'bx ) && ( BInstruction_prev[30] !== BInstruction_expected_prev[30] )
		&& ((BInstruction_expected_prev[30] !== last_BInstruction_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[30] = BInstruction_expected_prev[30];
	end
	if (
		( BInstruction_expected_prev[31] !== 1'bx ) && ( BInstruction_prev[31] !== BInstruction_expected_prev[31] )
		&& ((BInstruction_expected_prev[31] !== last_BInstruction_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInstruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInstruction_expected_prev);
		$display ("     Real value = %b", BInstruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInstruction_exp[31] = BInstruction_expected_prev[31];
	end
	if (
		( BPC_expected_prev[0] !== 1'bx ) && ( BPC_prev[0] !== BPC_expected_prev[0] )
		&& ((BPC_expected_prev[0] !== last_BPC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[0] = BPC_expected_prev[0];
	end
	if (
		( BPC_expected_prev[1] !== 1'bx ) && ( BPC_prev[1] !== BPC_expected_prev[1] )
		&& ((BPC_expected_prev[1] !== last_BPC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[1] = BPC_expected_prev[1];
	end
	if (
		( BPC_expected_prev[2] !== 1'bx ) && ( BPC_prev[2] !== BPC_expected_prev[2] )
		&& ((BPC_expected_prev[2] !== last_BPC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[2] = BPC_expected_prev[2];
	end
	if (
		( BPC_expected_prev[3] !== 1'bx ) && ( BPC_prev[3] !== BPC_expected_prev[3] )
		&& ((BPC_expected_prev[3] !== last_BPC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[3] = BPC_expected_prev[3];
	end
	if (
		( BPC_expected_prev[4] !== 1'bx ) && ( BPC_prev[4] !== BPC_expected_prev[4] )
		&& ((BPC_expected_prev[4] !== last_BPC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[4] = BPC_expected_prev[4];
	end
	if (
		( BPC_expected_prev[5] !== 1'bx ) && ( BPC_prev[5] !== BPC_expected_prev[5] )
		&& ((BPC_expected_prev[5] !== last_BPC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[5] = BPC_expected_prev[5];
	end
	if (
		( BPC_expected_prev[6] !== 1'bx ) && ( BPC_prev[6] !== BPC_expected_prev[6] )
		&& ((BPC_expected_prev[6] !== last_BPC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[6] = BPC_expected_prev[6];
	end
	if (
		( BPC_expected_prev[7] !== 1'bx ) && ( BPC_prev[7] !== BPC_expected_prev[7] )
		&& ((BPC_expected_prev[7] !== last_BPC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[7] = BPC_expected_prev[7];
	end
	if (
		( BPC_expected_prev[8] !== 1'bx ) && ( BPC_prev[8] !== BPC_expected_prev[8] )
		&& ((BPC_expected_prev[8] !== last_BPC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[8] = BPC_expected_prev[8];
	end
	if (
		( BPC_expected_prev[9] !== 1'bx ) && ( BPC_prev[9] !== BPC_expected_prev[9] )
		&& ((BPC_expected_prev[9] !== last_BPC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[9] = BPC_expected_prev[9];
	end
	if (
		( BPC_expected_prev[10] !== 1'bx ) && ( BPC_prev[10] !== BPC_expected_prev[10] )
		&& ((BPC_expected_prev[10] !== last_BPC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[10] = BPC_expected_prev[10];
	end
	if (
		( BPC_expected_prev[11] !== 1'bx ) && ( BPC_prev[11] !== BPC_expected_prev[11] )
		&& ((BPC_expected_prev[11] !== last_BPC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[11] = BPC_expected_prev[11];
	end
	if (
		( BPC_expected_prev[12] !== 1'bx ) && ( BPC_prev[12] !== BPC_expected_prev[12] )
		&& ((BPC_expected_prev[12] !== last_BPC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[12] = BPC_expected_prev[12];
	end
	if (
		( BPC_expected_prev[13] !== 1'bx ) && ( BPC_prev[13] !== BPC_expected_prev[13] )
		&& ((BPC_expected_prev[13] !== last_BPC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[13] = BPC_expected_prev[13];
	end
	if (
		( BPC_expected_prev[14] !== 1'bx ) && ( BPC_prev[14] !== BPC_expected_prev[14] )
		&& ((BPC_expected_prev[14] !== last_BPC_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[14] = BPC_expected_prev[14];
	end
	if (
		( BPC_expected_prev[15] !== 1'bx ) && ( BPC_prev[15] !== BPC_expected_prev[15] )
		&& ((BPC_expected_prev[15] !== last_BPC_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[15] = BPC_expected_prev[15];
	end
	if (
		( BPC_expected_prev[16] !== 1'bx ) && ( BPC_prev[16] !== BPC_expected_prev[16] )
		&& ((BPC_expected_prev[16] !== last_BPC_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[16] = BPC_expected_prev[16];
	end
	if (
		( BPC_expected_prev[17] !== 1'bx ) && ( BPC_prev[17] !== BPC_expected_prev[17] )
		&& ((BPC_expected_prev[17] !== last_BPC_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[17] = BPC_expected_prev[17];
	end
	if (
		( BPC_expected_prev[18] !== 1'bx ) && ( BPC_prev[18] !== BPC_expected_prev[18] )
		&& ((BPC_expected_prev[18] !== last_BPC_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[18] = BPC_expected_prev[18];
	end
	if (
		( BPC_expected_prev[19] !== 1'bx ) && ( BPC_prev[19] !== BPC_expected_prev[19] )
		&& ((BPC_expected_prev[19] !== last_BPC_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[19] = BPC_expected_prev[19];
	end
	if (
		( BPC_expected_prev[20] !== 1'bx ) && ( BPC_prev[20] !== BPC_expected_prev[20] )
		&& ((BPC_expected_prev[20] !== last_BPC_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[20] = BPC_expected_prev[20];
	end
	if (
		( BPC_expected_prev[21] !== 1'bx ) && ( BPC_prev[21] !== BPC_expected_prev[21] )
		&& ((BPC_expected_prev[21] !== last_BPC_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[21] = BPC_expected_prev[21];
	end
	if (
		( BPC_expected_prev[22] !== 1'bx ) && ( BPC_prev[22] !== BPC_expected_prev[22] )
		&& ((BPC_expected_prev[22] !== last_BPC_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[22] = BPC_expected_prev[22];
	end
	if (
		( BPC_expected_prev[23] !== 1'bx ) && ( BPC_prev[23] !== BPC_expected_prev[23] )
		&& ((BPC_expected_prev[23] !== last_BPC_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[23] = BPC_expected_prev[23];
	end
	if (
		( BPC_expected_prev[24] !== 1'bx ) && ( BPC_prev[24] !== BPC_expected_prev[24] )
		&& ((BPC_expected_prev[24] !== last_BPC_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[24] = BPC_expected_prev[24];
	end
	if (
		( BPC_expected_prev[25] !== 1'bx ) && ( BPC_prev[25] !== BPC_expected_prev[25] )
		&& ((BPC_expected_prev[25] !== last_BPC_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[25] = BPC_expected_prev[25];
	end
	if (
		( BPC_expected_prev[26] !== 1'bx ) && ( BPC_prev[26] !== BPC_expected_prev[26] )
		&& ((BPC_expected_prev[26] !== last_BPC_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[26] = BPC_expected_prev[26];
	end
	if (
		( BPC_expected_prev[27] !== 1'bx ) && ( BPC_prev[27] !== BPC_expected_prev[27] )
		&& ((BPC_expected_prev[27] !== last_BPC_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[27] = BPC_expected_prev[27];
	end
	if (
		( BPC_expected_prev[28] !== 1'bx ) && ( BPC_prev[28] !== BPC_expected_prev[28] )
		&& ((BPC_expected_prev[28] !== last_BPC_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[28] = BPC_expected_prev[28];
	end
	if (
		( BPC_expected_prev[29] !== 1'bx ) && ( BPC_prev[29] !== BPC_expected_prev[29] )
		&& ((BPC_expected_prev[29] !== last_BPC_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[29] = BPC_expected_prev[29];
	end
	if (
		( BPC_expected_prev[30] !== 1'bx ) && ( BPC_prev[30] !== BPC_expected_prev[30] )
		&& ((BPC_expected_prev[30] !== last_BPC_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[30] = BPC_expected_prev[30];
	end
	if (
		( BPC_expected_prev[31] !== 1'bx ) && ( BPC_prev[31] !== BPC_expected_prev[31] )
		&& ((BPC_expected_prev[31] !== last_BPC_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BPC_expected_prev);
		$display ("     Real value = %b", BPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BPC_exp[31] = BPC_expected_prev[31];
	end
	if (
		( BproxPC_expected_prev[0] !== 1'bx ) && ( BproxPC_prev[0] !== BproxPC_expected_prev[0] )
		&& ((BproxPC_expected_prev[0] !== last_BproxPC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[0] = BproxPC_expected_prev[0];
	end
	if (
		( BproxPC_expected_prev[1] !== 1'bx ) && ( BproxPC_prev[1] !== BproxPC_expected_prev[1] )
		&& ((BproxPC_expected_prev[1] !== last_BproxPC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[1] = BproxPC_expected_prev[1];
	end
	if (
		( BproxPC_expected_prev[2] !== 1'bx ) && ( BproxPC_prev[2] !== BproxPC_expected_prev[2] )
		&& ((BproxPC_expected_prev[2] !== last_BproxPC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[2] = BproxPC_expected_prev[2];
	end
	if (
		( BproxPC_expected_prev[3] !== 1'bx ) && ( BproxPC_prev[3] !== BproxPC_expected_prev[3] )
		&& ((BproxPC_expected_prev[3] !== last_BproxPC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[3] = BproxPC_expected_prev[3];
	end
	if (
		( BproxPC_expected_prev[4] !== 1'bx ) && ( BproxPC_prev[4] !== BproxPC_expected_prev[4] )
		&& ((BproxPC_expected_prev[4] !== last_BproxPC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[4] = BproxPC_expected_prev[4];
	end
	if (
		( BproxPC_expected_prev[5] !== 1'bx ) && ( BproxPC_prev[5] !== BproxPC_expected_prev[5] )
		&& ((BproxPC_expected_prev[5] !== last_BproxPC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[5] = BproxPC_expected_prev[5];
	end
	if (
		( BproxPC_expected_prev[6] !== 1'bx ) && ( BproxPC_prev[6] !== BproxPC_expected_prev[6] )
		&& ((BproxPC_expected_prev[6] !== last_BproxPC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[6] = BproxPC_expected_prev[6];
	end
	if (
		( BproxPC_expected_prev[7] !== 1'bx ) && ( BproxPC_prev[7] !== BproxPC_expected_prev[7] )
		&& ((BproxPC_expected_prev[7] !== last_BproxPC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[7] = BproxPC_expected_prev[7];
	end
	if (
		( BproxPC_expected_prev[8] !== 1'bx ) && ( BproxPC_prev[8] !== BproxPC_expected_prev[8] )
		&& ((BproxPC_expected_prev[8] !== last_BproxPC_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[8] = BproxPC_expected_prev[8];
	end
	if (
		( BproxPC_expected_prev[9] !== 1'bx ) && ( BproxPC_prev[9] !== BproxPC_expected_prev[9] )
		&& ((BproxPC_expected_prev[9] !== last_BproxPC_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[9] = BproxPC_expected_prev[9];
	end
	if (
		( BproxPC_expected_prev[10] !== 1'bx ) && ( BproxPC_prev[10] !== BproxPC_expected_prev[10] )
		&& ((BproxPC_expected_prev[10] !== last_BproxPC_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[10] = BproxPC_expected_prev[10];
	end
	if (
		( BproxPC_expected_prev[11] !== 1'bx ) && ( BproxPC_prev[11] !== BproxPC_expected_prev[11] )
		&& ((BproxPC_expected_prev[11] !== last_BproxPC_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[11] = BproxPC_expected_prev[11];
	end
	if (
		( BproxPC_expected_prev[12] !== 1'bx ) && ( BproxPC_prev[12] !== BproxPC_expected_prev[12] )
		&& ((BproxPC_expected_prev[12] !== last_BproxPC_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[12] = BproxPC_expected_prev[12];
	end
	if (
		( BproxPC_expected_prev[13] !== 1'bx ) && ( BproxPC_prev[13] !== BproxPC_expected_prev[13] )
		&& ((BproxPC_expected_prev[13] !== last_BproxPC_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[13] = BproxPC_expected_prev[13];
	end
	if (
		( BproxPC_expected_prev[14] !== 1'bx ) && ( BproxPC_prev[14] !== BproxPC_expected_prev[14] )
		&& ((BproxPC_expected_prev[14] !== last_BproxPC_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[14] = BproxPC_expected_prev[14];
	end
	if (
		( BproxPC_expected_prev[15] !== 1'bx ) && ( BproxPC_prev[15] !== BproxPC_expected_prev[15] )
		&& ((BproxPC_expected_prev[15] !== last_BproxPC_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[15] = BproxPC_expected_prev[15];
	end
	if (
		( BproxPC_expected_prev[16] !== 1'bx ) && ( BproxPC_prev[16] !== BproxPC_expected_prev[16] )
		&& ((BproxPC_expected_prev[16] !== last_BproxPC_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[16] = BproxPC_expected_prev[16];
	end
	if (
		( BproxPC_expected_prev[17] !== 1'bx ) && ( BproxPC_prev[17] !== BproxPC_expected_prev[17] )
		&& ((BproxPC_expected_prev[17] !== last_BproxPC_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[17] = BproxPC_expected_prev[17];
	end
	if (
		( BproxPC_expected_prev[18] !== 1'bx ) && ( BproxPC_prev[18] !== BproxPC_expected_prev[18] )
		&& ((BproxPC_expected_prev[18] !== last_BproxPC_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[18] = BproxPC_expected_prev[18];
	end
	if (
		( BproxPC_expected_prev[19] !== 1'bx ) && ( BproxPC_prev[19] !== BproxPC_expected_prev[19] )
		&& ((BproxPC_expected_prev[19] !== last_BproxPC_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[19] = BproxPC_expected_prev[19];
	end
	if (
		( BproxPC_expected_prev[20] !== 1'bx ) && ( BproxPC_prev[20] !== BproxPC_expected_prev[20] )
		&& ((BproxPC_expected_prev[20] !== last_BproxPC_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[20] = BproxPC_expected_prev[20];
	end
	if (
		( BproxPC_expected_prev[21] !== 1'bx ) && ( BproxPC_prev[21] !== BproxPC_expected_prev[21] )
		&& ((BproxPC_expected_prev[21] !== last_BproxPC_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[21] = BproxPC_expected_prev[21];
	end
	if (
		( BproxPC_expected_prev[22] !== 1'bx ) && ( BproxPC_prev[22] !== BproxPC_expected_prev[22] )
		&& ((BproxPC_expected_prev[22] !== last_BproxPC_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[22] = BproxPC_expected_prev[22];
	end
	if (
		( BproxPC_expected_prev[23] !== 1'bx ) && ( BproxPC_prev[23] !== BproxPC_expected_prev[23] )
		&& ((BproxPC_expected_prev[23] !== last_BproxPC_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[23] = BproxPC_expected_prev[23];
	end
	if (
		( BproxPC_expected_prev[24] !== 1'bx ) && ( BproxPC_prev[24] !== BproxPC_expected_prev[24] )
		&& ((BproxPC_expected_prev[24] !== last_BproxPC_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[24] = BproxPC_expected_prev[24];
	end
	if (
		( BproxPC_expected_prev[25] !== 1'bx ) && ( BproxPC_prev[25] !== BproxPC_expected_prev[25] )
		&& ((BproxPC_expected_prev[25] !== last_BproxPC_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[25] = BproxPC_expected_prev[25];
	end
	if (
		( BproxPC_expected_prev[26] !== 1'bx ) && ( BproxPC_prev[26] !== BproxPC_expected_prev[26] )
		&& ((BproxPC_expected_prev[26] !== last_BproxPC_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[26] = BproxPC_expected_prev[26];
	end
	if (
		( BproxPC_expected_prev[27] !== 1'bx ) && ( BproxPC_prev[27] !== BproxPC_expected_prev[27] )
		&& ((BproxPC_expected_prev[27] !== last_BproxPC_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[27] = BproxPC_expected_prev[27];
	end
	if (
		( BproxPC_expected_prev[28] !== 1'bx ) && ( BproxPC_prev[28] !== BproxPC_expected_prev[28] )
		&& ((BproxPC_expected_prev[28] !== last_BproxPC_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[28] = BproxPC_expected_prev[28];
	end
	if (
		( BproxPC_expected_prev[29] !== 1'bx ) && ( BproxPC_prev[29] !== BproxPC_expected_prev[29] )
		&& ((BproxPC_expected_prev[29] !== last_BproxPC_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[29] = BproxPC_expected_prev[29];
	end
	if (
		( BproxPC_expected_prev[30] !== 1'bx ) && ( BproxPC_prev[30] !== BproxPC_expected_prev[30] )
		&& ((BproxPC_expected_prev[30] !== last_BproxPC_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[30] = BproxPC_expected_prev[30];
	end
	if (
		( BproxPC_expected_prev[31] !== 1'bx ) && ( BproxPC_prev[31] !== BproxPC_expected_prev[31] )
		&& ((BproxPC_expected_prev[31] !== last_BproxPC_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BproxPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BproxPC_expected_prev);
		$display ("     Real value = %b", BproxPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BproxPC_exp[31] = BproxPC_expected_prev[31];
	end
	if (
		( DCtrlBranch_expected_prev[0] !== 1'bx ) && ( DCtrlBranch_prev[0] !== DCtrlBranch_expected_prev[0] )
		&& ((DCtrlBranch_expected_prev[0] !== last_DCtrlBranch_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlBranch[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlBranch_expected_prev);
		$display ("     Real value = %b", DCtrlBranch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DCtrlBranch_exp[0] = DCtrlBranch_expected_prev[0];
	end
	if (
		( DCtrlBranch_expected_prev[1] !== 1'bx ) && ( DCtrlBranch_prev[1] !== DCtrlBranch_expected_prev[1] )
		&& ((DCtrlBranch_expected_prev[1] !== last_DCtrlBranch_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlBranch[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlBranch_expected_prev);
		$display ("     Real value = %b", DCtrlBranch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DCtrlBranch_exp[1] = DCtrlBranch_expected_prev[1];
	end
	if (
		( DCtrlcontrolJump_expected_prev[0] !== 1'bx ) && ( DCtrlcontrolJump_prev[0] !== DCtrlcontrolJump_expected_prev[0] )
		&& ((DCtrlcontrolJump_expected_prev[0] !== last_DCtrlcontrolJump_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlcontrolJump[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlcontrolJump_expected_prev);
		$display ("     Real value = %b", DCtrlcontrolJump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DCtrlcontrolJump_exp[0] = DCtrlcontrolJump_expected_prev[0];
	end
	if (
		( DCtrlcontrolJump_expected_prev[1] !== 1'bx ) && ( DCtrlcontrolJump_prev[1] !== DCtrlcontrolJump_expected_prev[1] )
		&& ((DCtrlcontrolJump_expected_prev[1] !== last_DCtrlcontrolJump_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlcontrolJump[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlcontrolJump_expected_prev);
		$display ("     Real value = %b", DCtrlcontrolJump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DCtrlcontrolJump_exp[1] = DCtrlcontrolJump_expected_prev[1];
	end
	if (
		( DCtrlEscreveMem_expected_prev !== 1'bx ) && ( DCtrlEscreveMem_prev !== DCtrlEscreveMem_expected_prev )
		&& ((DCtrlEscreveMem_expected_prev !== last_DCtrlEscreveMem_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlEscreveMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlEscreveMem_expected_prev);
		$display ("     Real value = %b", DCtrlEscreveMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DCtrlEscreveMem_exp = DCtrlEscreveMem_expected_prev;
	end
	if (
		( DCtrlEscreveReg_expected_prev !== 1'bx ) && ( DCtrlEscreveReg_prev !== DCtrlEscreveReg_expected_prev )
		&& ((DCtrlEscreveReg_expected_prev !== last_DCtrlEscreveReg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlEscreveReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlEscreveReg_expected_prev);
		$display ("     Real value = %b", DCtrlEscreveReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DCtrlEscreveReg_exp = DCtrlEscreveReg_expected_prev;
	end
	if (
		( DCtrlExtent_expected_prev !== 1'bx ) && ( DCtrlExtent_prev !== DCtrlExtent_expected_prev )
		&& ((DCtrlExtent_expected_prev !== last_DCtrlExtent_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlExtent :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlExtent_expected_prev);
		$display ("     Real value = %b", DCtrlExtent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DCtrlExtent_exp = DCtrlExtent_expected_prev;
	end
	if (
		( DCtrlMemParaReg_expected_prev !== 1'bx ) && ( DCtrlMemParaReg_prev !== DCtrlMemParaReg_expected_prev )
		&& ((DCtrlMemParaReg_expected_prev !== last_DCtrlMemParaReg_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlMemParaReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlMemParaReg_expected_prev);
		$display ("     Real value = %b", DCtrlMemParaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DCtrlMemParaReg_exp = DCtrlMemParaReg_expected_prev;
	end
	if (
		( DCtrlopALU_expected_prev[0] !== 1'bx ) && ( DCtrlopALU_prev[0] !== DCtrlopALU_expected_prev[0] )
		&& ((DCtrlopALU_expected_prev[0] !== last_DCtrlopALU_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlopALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlopALU_expected_prev);
		$display ("     Real value = %b", DCtrlopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DCtrlopALU_exp[0] = DCtrlopALU_expected_prev[0];
	end
	if (
		( DCtrlopALU_expected_prev[1] !== 1'bx ) && ( DCtrlopALU_prev[1] !== DCtrlopALU_expected_prev[1] )
		&& ((DCtrlopALU_expected_prev[1] !== last_DCtrlopALU_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlopALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlopALU_expected_prev);
		$display ("     Real value = %b", DCtrlopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DCtrlopALU_exp[1] = DCtrlopALU_expected_prev[1];
	end
	if (
		( DCtrlopALU_expected_prev[2] !== 1'bx ) && ( DCtrlopALU_prev[2] !== DCtrlopALU_expected_prev[2] )
		&& ((DCtrlopALU_expected_prev[2] !== last_DCtrlopALU_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlopALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlopALU_expected_prev);
		$display ("     Real value = %b", DCtrlopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DCtrlopALU_exp[2] = DCtrlopALU_expected_prev[2];
	end
	if (
		( DCtrlOrigALU_expected_prev !== 1'bx ) && ( DCtrlOrigALU_prev !== DCtrlOrigALU_expected_prev )
		&& ((DCtrlOrigALU_expected_prev !== last_DCtrlOrigALU_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlOrigALU :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlOrigALU_expected_prev);
		$display ("     Real value = %b", DCtrlOrigALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DCtrlOrigALU_exp = DCtrlOrigALU_expected_prev;
	end
	if (
		( DCtrlRegDst_expected_prev[0] !== 1'bx ) && ( DCtrlRegDst_prev[0] !== DCtrlRegDst_expected_prev[0] )
		&& ((DCtrlRegDst_expected_prev[0] !== last_DCtrlRegDst_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlRegDst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlRegDst_expected_prev);
		$display ("     Real value = %b", DCtrlRegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_DCtrlRegDst_exp[0] = DCtrlRegDst_expected_prev[0];
	end
	if (
		( DCtrlRegDst_expected_prev[1] !== 1'bx ) && ( DCtrlRegDst_prev[1] !== DCtrlRegDst_expected_prev[1] )
		&& ((DCtrlRegDst_expected_prev[1] !== last_DCtrlRegDst_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DCtrlRegDst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DCtrlRegDst_expected_prev);
		$display ("     Real value = %b", DCtrlRegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_DCtrlRegDst_exp[1] = DCtrlRegDst_expected_prev[1];
	end
	if (
		( DJAL_expected_prev !== 1'bx ) && ( DJAL_prev !== DJAL_expected_prev )
		&& ((DJAL_expected_prev !== last_DJAL_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJAL_expected_prev);
		$display ("     Real value = %b", DJAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_DJAL_exp = DJAL_expected_prev;
	end
	if (
		( DJump_expected_prev !== 1'bx ) && ( DJump_prev !== DJump_expected_prev )
		&& ((DJump_expected_prev !== last_DJump_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJump_expected_prev);
		$display ("     Real value = %b", DJump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DJump_exp = DJump_expected_prev;
	end
	if (
		( DJumpPC_expected_prev[0] !== 1'bx ) && ( DJumpPC_prev[0] !== DJumpPC_expected_prev[0] )
		&& ((DJumpPC_expected_prev[0] !== last_DJumpPC_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[0] = DJumpPC_expected_prev[0];
	end
	if (
		( DJumpPC_expected_prev[1] !== 1'bx ) && ( DJumpPC_prev[1] !== DJumpPC_expected_prev[1] )
		&& ((DJumpPC_expected_prev[1] !== last_DJumpPC_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[1] = DJumpPC_expected_prev[1];
	end
	if (
		( DJumpPC_expected_prev[2] !== 1'bx ) && ( DJumpPC_prev[2] !== DJumpPC_expected_prev[2] )
		&& ((DJumpPC_expected_prev[2] !== last_DJumpPC_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[2] = DJumpPC_expected_prev[2];
	end
	if (
		( DJumpPC_expected_prev[3] !== 1'bx ) && ( DJumpPC_prev[3] !== DJumpPC_expected_prev[3] )
		&& ((DJumpPC_expected_prev[3] !== last_DJumpPC_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[3] = DJumpPC_expected_prev[3];
	end
	if (
		( DJumpPC_expected_prev[4] !== 1'bx ) && ( DJumpPC_prev[4] !== DJumpPC_expected_prev[4] )
		&& ((DJumpPC_expected_prev[4] !== last_DJumpPC_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[4] = DJumpPC_expected_prev[4];
	end
	if (
		( DJumpPC_expected_prev[5] !== 1'bx ) && ( DJumpPC_prev[5] !== DJumpPC_expected_prev[5] )
		&& ((DJumpPC_expected_prev[5] !== last_DJumpPC_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[5] = DJumpPC_expected_prev[5];
	end
	if (
		( DJumpPC_expected_prev[6] !== 1'bx ) && ( DJumpPC_prev[6] !== DJumpPC_expected_prev[6] )
		&& ((DJumpPC_expected_prev[6] !== last_DJumpPC_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[6] = DJumpPC_expected_prev[6];
	end
	if (
		( DJumpPC_expected_prev[7] !== 1'bx ) && ( DJumpPC_prev[7] !== DJumpPC_expected_prev[7] )
		&& ((DJumpPC_expected_prev[7] !== last_DJumpPC_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[7] = DJumpPC_expected_prev[7];
	end
	if (
		( DJumpPC_expected_prev[8] !== 1'bx ) && ( DJumpPC_prev[8] !== DJumpPC_expected_prev[8] )
		&& ((DJumpPC_expected_prev[8] !== last_DJumpPC_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[8] = DJumpPC_expected_prev[8];
	end
	if (
		( DJumpPC_expected_prev[9] !== 1'bx ) && ( DJumpPC_prev[9] !== DJumpPC_expected_prev[9] )
		&& ((DJumpPC_expected_prev[9] !== last_DJumpPC_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[9] = DJumpPC_expected_prev[9];
	end
	if (
		( DJumpPC_expected_prev[10] !== 1'bx ) && ( DJumpPC_prev[10] !== DJumpPC_expected_prev[10] )
		&& ((DJumpPC_expected_prev[10] !== last_DJumpPC_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[10] = DJumpPC_expected_prev[10];
	end
	if (
		( DJumpPC_expected_prev[11] !== 1'bx ) && ( DJumpPC_prev[11] !== DJumpPC_expected_prev[11] )
		&& ((DJumpPC_expected_prev[11] !== last_DJumpPC_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[11] = DJumpPC_expected_prev[11];
	end
	if (
		( DJumpPC_expected_prev[12] !== 1'bx ) && ( DJumpPC_prev[12] !== DJumpPC_expected_prev[12] )
		&& ((DJumpPC_expected_prev[12] !== last_DJumpPC_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[12] = DJumpPC_expected_prev[12];
	end
	if (
		( DJumpPC_expected_prev[13] !== 1'bx ) && ( DJumpPC_prev[13] !== DJumpPC_expected_prev[13] )
		&& ((DJumpPC_expected_prev[13] !== last_DJumpPC_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[13] = DJumpPC_expected_prev[13];
	end
	if (
		( DJumpPC_expected_prev[14] !== 1'bx ) && ( DJumpPC_prev[14] !== DJumpPC_expected_prev[14] )
		&& ((DJumpPC_expected_prev[14] !== last_DJumpPC_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[14] = DJumpPC_expected_prev[14];
	end
	if (
		( DJumpPC_expected_prev[15] !== 1'bx ) && ( DJumpPC_prev[15] !== DJumpPC_expected_prev[15] )
		&& ((DJumpPC_expected_prev[15] !== last_DJumpPC_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[15] = DJumpPC_expected_prev[15];
	end
	if (
		( DJumpPC_expected_prev[16] !== 1'bx ) && ( DJumpPC_prev[16] !== DJumpPC_expected_prev[16] )
		&& ((DJumpPC_expected_prev[16] !== last_DJumpPC_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[16] = DJumpPC_expected_prev[16];
	end
	if (
		( DJumpPC_expected_prev[17] !== 1'bx ) && ( DJumpPC_prev[17] !== DJumpPC_expected_prev[17] )
		&& ((DJumpPC_expected_prev[17] !== last_DJumpPC_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[17] = DJumpPC_expected_prev[17];
	end
	if (
		( DJumpPC_expected_prev[18] !== 1'bx ) && ( DJumpPC_prev[18] !== DJumpPC_expected_prev[18] )
		&& ((DJumpPC_expected_prev[18] !== last_DJumpPC_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[18] = DJumpPC_expected_prev[18];
	end
	if (
		( DJumpPC_expected_prev[19] !== 1'bx ) && ( DJumpPC_prev[19] !== DJumpPC_expected_prev[19] )
		&& ((DJumpPC_expected_prev[19] !== last_DJumpPC_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[19] = DJumpPC_expected_prev[19];
	end
	if (
		( DJumpPC_expected_prev[20] !== 1'bx ) && ( DJumpPC_prev[20] !== DJumpPC_expected_prev[20] )
		&& ((DJumpPC_expected_prev[20] !== last_DJumpPC_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[20] = DJumpPC_expected_prev[20];
	end
	if (
		( DJumpPC_expected_prev[21] !== 1'bx ) && ( DJumpPC_prev[21] !== DJumpPC_expected_prev[21] )
		&& ((DJumpPC_expected_prev[21] !== last_DJumpPC_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[21] = DJumpPC_expected_prev[21];
	end
	if (
		( DJumpPC_expected_prev[22] !== 1'bx ) && ( DJumpPC_prev[22] !== DJumpPC_expected_prev[22] )
		&& ((DJumpPC_expected_prev[22] !== last_DJumpPC_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[22] = DJumpPC_expected_prev[22];
	end
	if (
		( DJumpPC_expected_prev[23] !== 1'bx ) && ( DJumpPC_prev[23] !== DJumpPC_expected_prev[23] )
		&& ((DJumpPC_expected_prev[23] !== last_DJumpPC_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[23] = DJumpPC_expected_prev[23];
	end
	if (
		( DJumpPC_expected_prev[24] !== 1'bx ) && ( DJumpPC_prev[24] !== DJumpPC_expected_prev[24] )
		&& ((DJumpPC_expected_prev[24] !== last_DJumpPC_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[24] = DJumpPC_expected_prev[24];
	end
	if (
		( DJumpPC_expected_prev[25] !== 1'bx ) && ( DJumpPC_prev[25] !== DJumpPC_expected_prev[25] )
		&& ((DJumpPC_expected_prev[25] !== last_DJumpPC_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[25] = DJumpPC_expected_prev[25];
	end
	if (
		( DJumpPC_expected_prev[26] !== 1'bx ) && ( DJumpPC_prev[26] !== DJumpPC_expected_prev[26] )
		&& ((DJumpPC_expected_prev[26] !== last_DJumpPC_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[26] = DJumpPC_expected_prev[26];
	end
	if (
		( DJumpPC_expected_prev[27] !== 1'bx ) && ( DJumpPC_prev[27] !== DJumpPC_expected_prev[27] )
		&& ((DJumpPC_expected_prev[27] !== last_DJumpPC_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[27] = DJumpPC_expected_prev[27];
	end
	if (
		( DJumpPC_expected_prev[28] !== 1'bx ) && ( DJumpPC_prev[28] !== DJumpPC_expected_prev[28] )
		&& ((DJumpPC_expected_prev[28] !== last_DJumpPC_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[28] = DJumpPC_expected_prev[28];
	end
	if (
		( DJumpPC_expected_prev[29] !== 1'bx ) && ( DJumpPC_prev[29] !== DJumpPC_expected_prev[29] )
		&& ((DJumpPC_expected_prev[29] !== last_DJumpPC_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[29] = DJumpPC_expected_prev[29];
	end
	if (
		( DJumpPC_expected_prev[30] !== 1'bx ) && ( DJumpPC_prev[30] !== DJumpPC_expected_prev[30] )
		&& ((DJumpPC_expected_prev[30] !== last_DJumpPC_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[30] = DJumpPC_expected_prev[30];
	end
	if (
		( DJumpPC_expected_prev[31] !== 1'bx ) && ( DJumpPC_prev[31] !== DJumpPC_expected_prev[31] )
		&& ((DJumpPC_expected_prev[31] !== last_DJumpPC_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DJumpPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DJumpPC_expected_prev);
		$display ("     Real value = %b", DJumpPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DJumpPC_exp[31] = DJumpPC_expected_prev[31];
	end
	if (
		( DRSDados0_expected_prev[0] !== 1'bx ) && ( DRSDados0_prev[0] !== DRSDados0_expected_prev[0] )
		&& ((DRSDados0_expected_prev[0] !== last_DRSDados0_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[0] = DRSDados0_expected_prev[0];
	end
	if (
		( DRSDados0_expected_prev[1] !== 1'bx ) && ( DRSDados0_prev[1] !== DRSDados0_expected_prev[1] )
		&& ((DRSDados0_expected_prev[1] !== last_DRSDados0_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[1] = DRSDados0_expected_prev[1];
	end
	if (
		( DRSDados0_expected_prev[2] !== 1'bx ) && ( DRSDados0_prev[2] !== DRSDados0_expected_prev[2] )
		&& ((DRSDados0_expected_prev[2] !== last_DRSDados0_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[2] = DRSDados0_expected_prev[2];
	end
	if (
		( DRSDados0_expected_prev[3] !== 1'bx ) && ( DRSDados0_prev[3] !== DRSDados0_expected_prev[3] )
		&& ((DRSDados0_expected_prev[3] !== last_DRSDados0_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[3] = DRSDados0_expected_prev[3];
	end
	if (
		( DRSDados0_expected_prev[4] !== 1'bx ) && ( DRSDados0_prev[4] !== DRSDados0_expected_prev[4] )
		&& ((DRSDados0_expected_prev[4] !== last_DRSDados0_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[4] = DRSDados0_expected_prev[4];
	end
	if (
		( DRSDados0_expected_prev[5] !== 1'bx ) && ( DRSDados0_prev[5] !== DRSDados0_expected_prev[5] )
		&& ((DRSDados0_expected_prev[5] !== last_DRSDados0_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[5] = DRSDados0_expected_prev[5];
	end
	if (
		( DRSDados0_expected_prev[6] !== 1'bx ) && ( DRSDados0_prev[6] !== DRSDados0_expected_prev[6] )
		&& ((DRSDados0_expected_prev[6] !== last_DRSDados0_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[6] = DRSDados0_expected_prev[6];
	end
	if (
		( DRSDados0_expected_prev[7] !== 1'bx ) && ( DRSDados0_prev[7] !== DRSDados0_expected_prev[7] )
		&& ((DRSDados0_expected_prev[7] !== last_DRSDados0_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[7] = DRSDados0_expected_prev[7];
	end
	if (
		( DRSDados0_expected_prev[8] !== 1'bx ) && ( DRSDados0_prev[8] !== DRSDados0_expected_prev[8] )
		&& ((DRSDados0_expected_prev[8] !== last_DRSDados0_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[8] = DRSDados0_expected_prev[8];
	end
	if (
		( DRSDados0_expected_prev[9] !== 1'bx ) && ( DRSDados0_prev[9] !== DRSDados0_expected_prev[9] )
		&& ((DRSDados0_expected_prev[9] !== last_DRSDados0_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[9] = DRSDados0_expected_prev[9];
	end
	if (
		( DRSDados0_expected_prev[10] !== 1'bx ) && ( DRSDados0_prev[10] !== DRSDados0_expected_prev[10] )
		&& ((DRSDados0_expected_prev[10] !== last_DRSDados0_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[10] = DRSDados0_expected_prev[10];
	end
	if (
		( DRSDados0_expected_prev[11] !== 1'bx ) && ( DRSDados0_prev[11] !== DRSDados0_expected_prev[11] )
		&& ((DRSDados0_expected_prev[11] !== last_DRSDados0_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[11] = DRSDados0_expected_prev[11];
	end
	if (
		( DRSDados0_expected_prev[12] !== 1'bx ) && ( DRSDados0_prev[12] !== DRSDados0_expected_prev[12] )
		&& ((DRSDados0_expected_prev[12] !== last_DRSDados0_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[12] = DRSDados0_expected_prev[12];
	end
	if (
		( DRSDados0_expected_prev[13] !== 1'bx ) && ( DRSDados0_prev[13] !== DRSDados0_expected_prev[13] )
		&& ((DRSDados0_expected_prev[13] !== last_DRSDados0_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[13] = DRSDados0_expected_prev[13];
	end
	if (
		( DRSDados0_expected_prev[14] !== 1'bx ) && ( DRSDados0_prev[14] !== DRSDados0_expected_prev[14] )
		&& ((DRSDados0_expected_prev[14] !== last_DRSDados0_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[14] = DRSDados0_expected_prev[14];
	end
	if (
		( DRSDados0_expected_prev[15] !== 1'bx ) && ( DRSDados0_prev[15] !== DRSDados0_expected_prev[15] )
		&& ((DRSDados0_expected_prev[15] !== last_DRSDados0_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[15] = DRSDados0_expected_prev[15];
	end
	if (
		( DRSDados0_expected_prev[16] !== 1'bx ) && ( DRSDados0_prev[16] !== DRSDados0_expected_prev[16] )
		&& ((DRSDados0_expected_prev[16] !== last_DRSDados0_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[16] = DRSDados0_expected_prev[16];
	end
	if (
		( DRSDados0_expected_prev[17] !== 1'bx ) && ( DRSDados0_prev[17] !== DRSDados0_expected_prev[17] )
		&& ((DRSDados0_expected_prev[17] !== last_DRSDados0_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[17] = DRSDados0_expected_prev[17];
	end
	if (
		( DRSDados0_expected_prev[18] !== 1'bx ) && ( DRSDados0_prev[18] !== DRSDados0_expected_prev[18] )
		&& ((DRSDados0_expected_prev[18] !== last_DRSDados0_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[18] = DRSDados0_expected_prev[18];
	end
	if (
		( DRSDados0_expected_prev[19] !== 1'bx ) && ( DRSDados0_prev[19] !== DRSDados0_expected_prev[19] )
		&& ((DRSDados0_expected_prev[19] !== last_DRSDados0_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[19] = DRSDados0_expected_prev[19];
	end
	if (
		( DRSDados0_expected_prev[20] !== 1'bx ) && ( DRSDados0_prev[20] !== DRSDados0_expected_prev[20] )
		&& ((DRSDados0_expected_prev[20] !== last_DRSDados0_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[20] = DRSDados0_expected_prev[20];
	end
	if (
		( DRSDados0_expected_prev[21] !== 1'bx ) && ( DRSDados0_prev[21] !== DRSDados0_expected_prev[21] )
		&& ((DRSDados0_expected_prev[21] !== last_DRSDados0_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[21] = DRSDados0_expected_prev[21];
	end
	if (
		( DRSDados0_expected_prev[22] !== 1'bx ) && ( DRSDados0_prev[22] !== DRSDados0_expected_prev[22] )
		&& ((DRSDados0_expected_prev[22] !== last_DRSDados0_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[22] = DRSDados0_expected_prev[22];
	end
	if (
		( DRSDados0_expected_prev[23] !== 1'bx ) && ( DRSDados0_prev[23] !== DRSDados0_expected_prev[23] )
		&& ((DRSDados0_expected_prev[23] !== last_DRSDados0_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[23] = DRSDados0_expected_prev[23];
	end
	if (
		( DRSDados0_expected_prev[24] !== 1'bx ) && ( DRSDados0_prev[24] !== DRSDados0_expected_prev[24] )
		&& ((DRSDados0_expected_prev[24] !== last_DRSDados0_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[24] = DRSDados0_expected_prev[24];
	end
	if (
		( DRSDados0_expected_prev[25] !== 1'bx ) && ( DRSDados0_prev[25] !== DRSDados0_expected_prev[25] )
		&& ((DRSDados0_expected_prev[25] !== last_DRSDados0_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[25] = DRSDados0_expected_prev[25];
	end
	if (
		( DRSDados0_expected_prev[26] !== 1'bx ) && ( DRSDados0_prev[26] !== DRSDados0_expected_prev[26] )
		&& ((DRSDados0_expected_prev[26] !== last_DRSDados0_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[26] = DRSDados0_expected_prev[26];
	end
	if (
		( DRSDados0_expected_prev[27] !== 1'bx ) && ( DRSDados0_prev[27] !== DRSDados0_expected_prev[27] )
		&& ((DRSDados0_expected_prev[27] !== last_DRSDados0_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[27] = DRSDados0_expected_prev[27];
	end
	if (
		( DRSDados0_expected_prev[28] !== 1'bx ) && ( DRSDados0_prev[28] !== DRSDados0_expected_prev[28] )
		&& ((DRSDados0_expected_prev[28] !== last_DRSDados0_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[28] = DRSDados0_expected_prev[28];
	end
	if (
		( DRSDados0_expected_prev[29] !== 1'bx ) && ( DRSDados0_prev[29] !== DRSDados0_expected_prev[29] )
		&& ((DRSDados0_expected_prev[29] !== last_DRSDados0_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[29] = DRSDados0_expected_prev[29];
	end
	if (
		( DRSDados0_expected_prev[30] !== 1'bx ) && ( DRSDados0_prev[30] !== DRSDados0_expected_prev[30] )
		&& ((DRSDados0_expected_prev[30] !== last_DRSDados0_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[30] = DRSDados0_expected_prev[30];
	end
	if (
		( DRSDados0_expected_prev[31] !== 1'bx ) && ( DRSDados0_prev[31] !== DRSDados0_expected_prev[31] )
		&& ((DRSDados0_expected_prev[31] !== last_DRSDados0_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRSDados0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRSDados0_expected_prev);
		$display ("     Real value = %b", DRSDados0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRSDados0_exp[31] = DRSDados0_expected_prev[31];
	end
	if (
		( DRTDados1_expected_prev[0] !== 1'bx ) && ( DRTDados1_prev[0] !== DRTDados1_expected_prev[0] )
		&& ((DRTDados1_expected_prev[0] !== last_DRTDados1_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[0] = DRTDados1_expected_prev[0];
	end
	if (
		( DRTDados1_expected_prev[1] !== 1'bx ) && ( DRTDados1_prev[1] !== DRTDados1_expected_prev[1] )
		&& ((DRTDados1_expected_prev[1] !== last_DRTDados1_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[1] = DRTDados1_expected_prev[1];
	end
	if (
		( DRTDados1_expected_prev[2] !== 1'bx ) && ( DRTDados1_prev[2] !== DRTDados1_expected_prev[2] )
		&& ((DRTDados1_expected_prev[2] !== last_DRTDados1_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[2] = DRTDados1_expected_prev[2];
	end
	if (
		( DRTDados1_expected_prev[3] !== 1'bx ) && ( DRTDados1_prev[3] !== DRTDados1_expected_prev[3] )
		&& ((DRTDados1_expected_prev[3] !== last_DRTDados1_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[3] = DRTDados1_expected_prev[3];
	end
	if (
		( DRTDados1_expected_prev[4] !== 1'bx ) && ( DRTDados1_prev[4] !== DRTDados1_expected_prev[4] )
		&& ((DRTDados1_expected_prev[4] !== last_DRTDados1_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[4] = DRTDados1_expected_prev[4];
	end
	if (
		( DRTDados1_expected_prev[5] !== 1'bx ) && ( DRTDados1_prev[5] !== DRTDados1_expected_prev[5] )
		&& ((DRTDados1_expected_prev[5] !== last_DRTDados1_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[5] = DRTDados1_expected_prev[5];
	end
	if (
		( DRTDados1_expected_prev[6] !== 1'bx ) && ( DRTDados1_prev[6] !== DRTDados1_expected_prev[6] )
		&& ((DRTDados1_expected_prev[6] !== last_DRTDados1_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[6] = DRTDados1_expected_prev[6];
	end
	if (
		( DRTDados1_expected_prev[7] !== 1'bx ) && ( DRTDados1_prev[7] !== DRTDados1_expected_prev[7] )
		&& ((DRTDados1_expected_prev[7] !== last_DRTDados1_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[7] = DRTDados1_expected_prev[7];
	end
	if (
		( DRTDados1_expected_prev[8] !== 1'bx ) && ( DRTDados1_prev[8] !== DRTDados1_expected_prev[8] )
		&& ((DRTDados1_expected_prev[8] !== last_DRTDados1_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[8] = DRTDados1_expected_prev[8];
	end
	if (
		( DRTDados1_expected_prev[9] !== 1'bx ) && ( DRTDados1_prev[9] !== DRTDados1_expected_prev[9] )
		&& ((DRTDados1_expected_prev[9] !== last_DRTDados1_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[9] = DRTDados1_expected_prev[9];
	end
	if (
		( DRTDados1_expected_prev[10] !== 1'bx ) && ( DRTDados1_prev[10] !== DRTDados1_expected_prev[10] )
		&& ((DRTDados1_expected_prev[10] !== last_DRTDados1_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[10] = DRTDados1_expected_prev[10];
	end
	if (
		( DRTDados1_expected_prev[11] !== 1'bx ) && ( DRTDados1_prev[11] !== DRTDados1_expected_prev[11] )
		&& ((DRTDados1_expected_prev[11] !== last_DRTDados1_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[11] = DRTDados1_expected_prev[11];
	end
	if (
		( DRTDados1_expected_prev[12] !== 1'bx ) && ( DRTDados1_prev[12] !== DRTDados1_expected_prev[12] )
		&& ((DRTDados1_expected_prev[12] !== last_DRTDados1_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[12] = DRTDados1_expected_prev[12];
	end
	if (
		( DRTDados1_expected_prev[13] !== 1'bx ) && ( DRTDados1_prev[13] !== DRTDados1_expected_prev[13] )
		&& ((DRTDados1_expected_prev[13] !== last_DRTDados1_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[13] = DRTDados1_expected_prev[13];
	end
	if (
		( DRTDados1_expected_prev[14] !== 1'bx ) && ( DRTDados1_prev[14] !== DRTDados1_expected_prev[14] )
		&& ((DRTDados1_expected_prev[14] !== last_DRTDados1_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[14] = DRTDados1_expected_prev[14];
	end
	if (
		( DRTDados1_expected_prev[15] !== 1'bx ) && ( DRTDados1_prev[15] !== DRTDados1_expected_prev[15] )
		&& ((DRTDados1_expected_prev[15] !== last_DRTDados1_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[15] = DRTDados1_expected_prev[15];
	end
	if (
		( DRTDados1_expected_prev[16] !== 1'bx ) && ( DRTDados1_prev[16] !== DRTDados1_expected_prev[16] )
		&& ((DRTDados1_expected_prev[16] !== last_DRTDados1_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[16] = DRTDados1_expected_prev[16];
	end
	if (
		( DRTDados1_expected_prev[17] !== 1'bx ) && ( DRTDados1_prev[17] !== DRTDados1_expected_prev[17] )
		&& ((DRTDados1_expected_prev[17] !== last_DRTDados1_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[17] = DRTDados1_expected_prev[17];
	end
	if (
		( DRTDados1_expected_prev[18] !== 1'bx ) && ( DRTDados1_prev[18] !== DRTDados1_expected_prev[18] )
		&& ((DRTDados1_expected_prev[18] !== last_DRTDados1_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[18] = DRTDados1_expected_prev[18];
	end
	if (
		( DRTDados1_expected_prev[19] !== 1'bx ) && ( DRTDados1_prev[19] !== DRTDados1_expected_prev[19] )
		&& ((DRTDados1_expected_prev[19] !== last_DRTDados1_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[19] = DRTDados1_expected_prev[19];
	end
	if (
		( DRTDados1_expected_prev[20] !== 1'bx ) && ( DRTDados1_prev[20] !== DRTDados1_expected_prev[20] )
		&& ((DRTDados1_expected_prev[20] !== last_DRTDados1_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[20] = DRTDados1_expected_prev[20];
	end
	if (
		( DRTDados1_expected_prev[21] !== 1'bx ) && ( DRTDados1_prev[21] !== DRTDados1_expected_prev[21] )
		&& ((DRTDados1_expected_prev[21] !== last_DRTDados1_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[21] = DRTDados1_expected_prev[21];
	end
	if (
		( DRTDados1_expected_prev[22] !== 1'bx ) && ( DRTDados1_prev[22] !== DRTDados1_expected_prev[22] )
		&& ((DRTDados1_expected_prev[22] !== last_DRTDados1_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[22] = DRTDados1_expected_prev[22];
	end
	if (
		( DRTDados1_expected_prev[23] !== 1'bx ) && ( DRTDados1_prev[23] !== DRTDados1_expected_prev[23] )
		&& ((DRTDados1_expected_prev[23] !== last_DRTDados1_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[23] = DRTDados1_expected_prev[23];
	end
	if (
		( DRTDados1_expected_prev[24] !== 1'bx ) && ( DRTDados1_prev[24] !== DRTDados1_expected_prev[24] )
		&& ((DRTDados1_expected_prev[24] !== last_DRTDados1_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[24] = DRTDados1_expected_prev[24];
	end
	if (
		( DRTDados1_expected_prev[25] !== 1'bx ) && ( DRTDados1_prev[25] !== DRTDados1_expected_prev[25] )
		&& ((DRTDados1_expected_prev[25] !== last_DRTDados1_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[25] = DRTDados1_expected_prev[25];
	end
	if (
		( DRTDados1_expected_prev[26] !== 1'bx ) && ( DRTDados1_prev[26] !== DRTDados1_expected_prev[26] )
		&& ((DRTDados1_expected_prev[26] !== last_DRTDados1_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[26] = DRTDados1_expected_prev[26];
	end
	if (
		( DRTDados1_expected_prev[27] !== 1'bx ) && ( DRTDados1_prev[27] !== DRTDados1_expected_prev[27] )
		&& ((DRTDados1_expected_prev[27] !== last_DRTDados1_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[27] = DRTDados1_expected_prev[27];
	end
	if (
		( DRTDados1_expected_prev[28] !== 1'bx ) && ( DRTDados1_prev[28] !== DRTDados1_expected_prev[28] )
		&& ((DRTDados1_expected_prev[28] !== last_DRTDados1_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[28] = DRTDados1_expected_prev[28];
	end
	if (
		( DRTDados1_expected_prev[29] !== 1'bx ) && ( DRTDados1_prev[29] !== DRTDados1_expected_prev[29] )
		&& ((DRTDados1_expected_prev[29] !== last_DRTDados1_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[29] = DRTDados1_expected_prev[29];
	end
	if (
		( DRTDados1_expected_prev[30] !== 1'bx ) && ( DRTDados1_prev[30] !== DRTDados1_expected_prev[30] )
		&& ((DRTDados1_expected_prev[30] !== last_DRTDados1_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[30] = DRTDados1_expected_prev[30];
	end
	if (
		( DRTDados1_expected_prev[31] !== 1'bx ) && ( DRTDados1_prev[31] !== DRTDados1_expected_prev[31] )
		&& ((DRTDados1_expected_prev[31] !== last_DRTDados1_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRTDados1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRTDados1_expected_prev);
		$display ("     Real value = %b", DRTDados1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRTDados1_exp[31] = DRTDados1_expected_prev[31];
	end
	if (
		( EXHIGH_expected_prev[0] !== 1'bx ) && ( EXHIGH_prev[0] !== EXHIGH_expected_prev[0] )
		&& ((EXHIGH_expected_prev[0] !== last_EXHIGH_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[0] = EXHIGH_expected_prev[0];
	end
	if (
		( EXHIGH_expected_prev[1] !== 1'bx ) && ( EXHIGH_prev[1] !== EXHIGH_expected_prev[1] )
		&& ((EXHIGH_expected_prev[1] !== last_EXHIGH_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[1] = EXHIGH_expected_prev[1];
	end
	if (
		( EXHIGH_expected_prev[2] !== 1'bx ) && ( EXHIGH_prev[2] !== EXHIGH_expected_prev[2] )
		&& ((EXHIGH_expected_prev[2] !== last_EXHIGH_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[2] = EXHIGH_expected_prev[2];
	end
	if (
		( EXHIGH_expected_prev[3] !== 1'bx ) && ( EXHIGH_prev[3] !== EXHIGH_expected_prev[3] )
		&& ((EXHIGH_expected_prev[3] !== last_EXHIGH_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[3] = EXHIGH_expected_prev[3];
	end
	if (
		( EXHIGH_expected_prev[4] !== 1'bx ) && ( EXHIGH_prev[4] !== EXHIGH_expected_prev[4] )
		&& ((EXHIGH_expected_prev[4] !== last_EXHIGH_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[4] = EXHIGH_expected_prev[4];
	end
	if (
		( EXHIGH_expected_prev[5] !== 1'bx ) && ( EXHIGH_prev[5] !== EXHIGH_expected_prev[5] )
		&& ((EXHIGH_expected_prev[5] !== last_EXHIGH_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[5] = EXHIGH_expected_prev[5];
	end
	if (
		( EXHIGH_expected_prev[6] !== 1'bx ) && ( EXHIGH_prev[6] !== EXHIGH_expected_prev[6] )
		&& ((EXHIGH_expected_prev[6] !== last_EXHIGH_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[6] = EXHIGH_expected_prev[6];
	end
	if (
		( EXHIGH_expected_prev[7] !== 1'bx ) && ( EXHIGH_prev[7] !== EXHIGH_expected_prev[7] )
		&& ((EXHIGH_expected_prev[7] !== last_EXHIGH_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[7] = EXHIGH_expected_prev[7];
	end
	if (
		( EXHIGH_expected_prev[8] !== 1'bx ) && ( EXHIGH_prev[8] !== EXHIGH_expected_prev[8] )
		&& ((EXHIGH_expected_prev[8] !== last_EXHIGH_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[8] = EXHIGH_expected_prev[8];
	end
	if (
		( EXHIGH_expected_prev[9] !== 1'bx ) && ( EXHIGH_prev[9] !== EXHIGH_expected_prev[9] )
		&& ((EXHIGH_expected_prev[9] !== last_EXHIGH_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[9] = EXHIGH_expected_prev[9];
	end
	if (
		( EXHIGH_expected_prev[10] !== 1'bx ) && ( EXHIGH_prev[10] !== EXHIGH_expected_prev[10] )
		&& ((EXHIGH_expected_prev[10] !== last_EXHIGH_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[10] = EXHIGH_expected_prev[10];
	end
	if (
		( EXHIGH_expected_prev[11] !== 1'bx ) && ( EXHIGH_prev[11] !== EXHIGH_expected_prev[11] )
		&& ((EXHIGH_expected_prev[11] !== last_EXHIGH_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[11] = EXHIGH_expected_prev[11];
	end
	if (
		( EXHIGH_expected_prev[12] !== 1'bx ) && ( EXHIGH_prev[12] !== EXHIGH_expected_prev[12] )
		&& ((EXHIGH_expected_prev[12] !== last_EXHIGH_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[12] = EXHIGH_expected_prev[12];
	end
	if (
		( EXHIGH_expected_prev[13] !== 1'bx ) && ( EXHIGH_prev[13] !== EXHIGH_expected_prev[13] )
		&& ((EXHIGH_expected_prev[13] !== last_EXHIGH_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[13] = EXHIGH_expected_prev[13];
	end
	if (
		( EXHIGH_expected_prev[14] !== 1'bx ) && ( EXHIGH_prev[14] !== EXHIGH_expected_prev[14] )
		&& ((EXHIGH_expected_prev[14] !== last_EXHIGH_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[14] = EXHIGH_expected_prev[14];
	end
	if (
		( EXHIGH_expected_prev[15] !== 1'bx ) && ( EXHIGH_prev[15] !== EXHIGH_expected_prev[15] )
		&& ((EXHIGH_expected_prev[15] !== last_EXHIGH_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[15] = EXHIGH_expected_prev[15];
	end
	if (
		( EXHIGH_expected_prev[16] !== 1'bx ) && ( EXHIGH_prev[16] !== EXHIGH_expected_prev[16] )
		&& ((EXHIGH_expected_prev[16] !== last_EXHIGH_exp[16]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[16] = EXHIGH_expected_prev[16];
	end
	if (
		( EXHIGH_expected_prev[17] !== 1'bx ) && ( EXHIGH_prev[17] !== EXHIGH_expected_prev[17] )
		&& ((EXHIGH_expected_prev[17] !== last_EXHIGH_exp[17]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[17] = EXHIGH_expected_prev[17];
	end
	if (
		( EXHIGH_expected_prev[18] !== 1'bx ) && ( EXHIGH_prev[18] !== EXHIGH_expected_prev[18] )
		&& ((EXHIGH_expected_prev[18] !== last_EXHIGH_exp[18]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[18] = EXHIGH_expected_prev[18];
	end
	if (
		( EXHIGH_expected_prev[19] !== 1'bx ) && ( EXHIGH_prev[19] !== EXHIGH_expected_prev[19] )
		&& ((EXHIGH_expected_prev[19] !== last_EXHIGH_exp[19]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[19] = EXHIGH_expected_prev[19];
	end
	if (
		( EXHIGH_expected_prev[20] !== 1'bx ) && ( EXHIGH_prev[20] !== EXHIGH_expected_prev[20] )
		&& ((EXHIGH_expected_prev[20] !== last_EXHIGH_exp[20]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[20] = EXHIGH_expected_prev[20];
	end
	if (
		( EXHIGH_expected_prev[21] !== 1'bx ) && ( EXHIGH_prev[21] !== EXHIGH_expected_prev[21] )
		&& ((EXHIGH_expected_prev[21] !== last_EXHIGH_exp[21]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[21] = EXHIGH_expected_prev[21];
	end
	if (
		( EXHIGH_expected_prev[22] !== 1'bx ) && ( EXHIGH_prev[22] !== EXHIGH_expected_prev[22] )
		&& ((EXHIGH_expected_prev[22] !== last_EXHIGH_exp[22]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[22] = EXHIGH_expected_prev[22];
	end
	if (
		( EXHIGH_expected_prev[23] !== 1'bx ) && ( EXHIGH_prev[23] !== EXHIGH_expected_prev[23] )
		&& ((EXHIGH_expected_prev[23] !== last_EXHIGH_exp[23]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[23] = EXHIGH_expected_prev[23];
	end
	if (
		( EXHIGH_expected_prev[24] !== 1'bx ) && ( EXHIGH_prev[24] !== EXHIGH_expected_prev[24] )
		&& ((EXHIGH_expected_prev[24] !== last_EXHIGH_exp[24]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[24] = EXHIGH_expected_prev[24];
	end
	if (
		( EXHIGH_expected_prev[25] !== 1'bx ) && ( EXHIGH_prev[25] !== EXHIGH_expected_prev[25] )
		&& ((EXHIGH_expected_prev[25] !== last_EXHIGH_exp[25]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[25] = EXHIGH_expected_prev[25];
	end
	if (
		( EXHIGH_expected_prev[26] !== 1'bx ) && ( EXHIGH_prev[26] !== EXHIGH_expected_prev[26] )
		&& ((EXHIGH_expected_prev[26] !== last_EXHIGH_exp[26]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[26] = EXHIGH_expected_prev[26];
	end
	if (
		( EXHIGH_expected_prev[27] !== 1'bx ) && ( EXHIGH_prev[27] !== EXHIGH_expected_prev[27] )
		&& ((EXHIGH_expected_prev[27] !== last_EXHIGH_exp[27]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[27] = EXHIGH_expected_prev[27];
	end
	if (
		( EXHIGH_expected_prev[28] !== 1'bx ) && ( EXHIGH_prev[28] !== EXHIGH_expected_prev[28] )
		&& ((EXHIGH_expected_prev[28] !== last_EXHIGH_exp[28]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[28] = EXHIGH_expected_prev[28];
	end
	if (
		( EXHIGH_expected_prev[29] !== 1'bx ) && ( EXHIGH_prev[29] !== EXHIGH_expected_prev[29] )
		&& ((EXHIGH_expected_prev[29] !== last_EXHIGH_exp[29]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[29] = EXHIGH_expected_prev[29];
	end
	if (
		( EXHIGH_expected_prev[30] !== 1'bx ) && ( EXHIGH_prev[30] !== EXHIGH_expected_prev[30] )
		&& ((EXHIGH_expected_prev[30] !== last_EXHIGH_exp[30]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[30] = EXHIGH_expected_prev[30];
	end
	if (
		( EXHIGH_expected_prev[31] !== 1'bx ) && ( EXHIGH_prev[31] !== EXHIGH_expected_prev[31] )
		&& ((EXHIGH_expected_prev[31] !== last_EXHIGH_exp[31]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXHIGH[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXHIGH_expected_prev);
		$display ("     Real value = %b", EXHIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_EXHIGH_exp[31] = EXHIGH_expected_prev[31];
	end
	if (
		( EXImm_expected_prev[0] !== 1'bx ) && ( EXImm_prev[0] !== EXImm_expected_prev[0] )
		&& ((EXImm_expected_prev[0] !== last_EXImm_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[0] = EXImm_expected_prev[0];
	end
	if (
		( EXImm_expected_prev[1] !== 1'bx ) && ( EXImm_prev[1] !== EXImm_expected_prev[1] )
		&& ((EXImm_expected_prev[1] !== last_EXImm_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[1] = EXImm_expected_prev[1];
	end
	if (
		( EXImm_expected_prev[2] !== 1'bx ) && ( EXImm_prev[2] !== EXImm_expected_prev[2] )
		&& ((EXImm_expected_prev[2] !== last_EXImm_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[2] = EXImm_expected_prev[2];
	end
	if (
		( EXImm_expected_prev[3] !== 1'bx ) && ( EXImm_prev[3] !== EXImm_expected_prev[3] )
		&& ((EXImm_expected_prev[3] !== last_EXImm_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[3] = EXImm_expected_prev[3];
	end
	if (
		( EXImm_expected_prev[4] !== 1'bx ) && ( EXImm_prev[4] !== EXImm_expected_prev[4] )
		&& ((EXImm_expected_prev[4] !== last_EXImm_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[4] = EXImm_expected_prev[4];
	end
	if (
		( EXImm_expected_prev[5] !== 1'bx ) && ( EXImm_prev[5] !== EXImm_expected_prev[5] )
		&& ((EXImm_expected_prev[5] !== last_EXImm_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXImm[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXImm_expected_prev);
		$display ("     Real value = %b", EXImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_EXImm_exp[5] = EXImm_expected_prev[5];
	end
	if (
		( EXLOW_expected_prev[0] !== 1'bx ) && ( EXLOW_prev[0] !== EXLOW_expected_prev[0] )
		&& ((EXLOW_expected_prev[0] !== last_EXLOW_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[0] = EXLOW_expected_prev[0];
	end
	if (
		( EXLOW_expected_prev[1] !== 1'bx ) && ( EXLOW_prev[1] !== EXLOW_expected_prev[1] )
		&& ((EXLOW_expected_prev[1] !== last_EXLOW_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[1] = EXLOW_expected_prev[1];
	end
	if (
		( EXLOW_expected_prev[2] !== 1'bx ) && ( EXLOW_prev[2] !== EXLOW_expected_prev[2] )
		&& ((EXLOW_expected_prev[2] !== last_EXLOW_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[2] = EXLOW_expected_prev[2];
	end
	if (
		( EXLOW_expected_prev[3] !== 1'bx ) && ( EXLOW_prev[3] !== EXLOW_expected_prev[3] )
		&& ((EXLOW_expected_prev[3] !== last_EXLOW_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[3] = EXLOW_expected_prev[3];
	end
	if (
		( EXLOW_expected_prev[4] !== 1'bx ) && ( EXLOW_prev[4] !== EXLOW_expected_prev[4] )
		&& ((EXLOW_expected_prev[4] !== last_EXLOW_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[4] = EXLOW_expected_prev[4];
	end
	if (
		( EXLOW_expected_prev[5] !== 1'bx ) && ( EXLOW_prev[5] !== EXLOW_expected_prev[5] )
		&& ((EXLOW_expected_prev[5] !== last_EXLOW_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[5] = EXLOW_expected_prev[5];
	end
	if (
		( EXLOW_expected_prev[6] !== 1'bx ) && ( EXLOW_prev[6] !== EXLOW_expected_prev[6] )
		&& ((EXLOW_expected_prev[6] !== last_EXLOW_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[6] = EXLOW_expected_prev[6];
	end
	if (
		( EXLOW_expected_prev[7] !== 1'bx ) && ( EXLOW_prev[7] !== EXLOW_expected_prev[7] )
		&& ((EXLOW_expected_prev[7] !== last_EXLOW_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[7] = EXLOW_expected_prev[7];
	end
	if (
		( EXLOW_expected_prev[8] !== 1'bx ) && ( EXLOW_prev[8] !== EXLOW_expected_prev[8] )
		&& ((EXLOW_expected_prev[8] !== last_EXLOW_exp[8]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[8] = EXLOW_expected_prev[8];
	end
	if (
		( EXLOW_expected_prev[9] !== 1'bx ) && ( EXLOW_prev[9] !== EXLOW_expected_prev[9] )
		&& ((EXLOW_expected_prev[9] !== last_EXLOW_exp[9]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[9] = EXLOW_expected_prev[9];
	end
	if (
		( EXLOW_expected_prev[10] !== 1'bx ) && ( EXLOW_prev[10] !== EXLOW_expected_prev[10] )
		&& ((EXLOW_expected_prev[10] !== last_EXLOW_exp[10]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[10] = EXLOW_expected_prev[10];
	end
	if (
		( EXLOW_expected_prev[11] !== 1'bx ) && ( EXLOW_prev[11] !== EXLOW_expected_prev[11] )
		&& ((EXLOW_expected_prev[11] !== last_EXLOW_exp[11]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[11] = EXLOW_expected_prev[11];
	end
	if (
		( EXLOW_expected_prev[12] !== 1'bx ) && ( EXLOW_prev[12] !== EXLOW_expected_prev[12] )
		&& ((EXLOW_expected_prev[12] !== last_EXLOW_exp[12]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[12] = EXLOW_expected_prev[12];
	end
	if (
		( EXLOW_expected_prev[13] !== 1'bx ) && ( EXLOW_prev[13] !== EXLOW_expected_prev[13] )
		&& ((EXLOW_expected_prev[13] !== last_EXLOW_exp[13]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[13] = EXLOW_expected_prev[13];
	end
	if (
		( EXLOW_expected_prev[14] !== 1'bx ) && ( EXLOW_prev[14] !== EXLOW_expected_prev[14] )
		&& ((EXLOW_expected_prev[14] !== last_EXLOW_exp[14]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[14] = EXLOW_expected_prev[14];
	end
	if (
		( EXLOW_expected_prev[15] !== 1'bx ) && ( EXLOW_prev[15] !== EXLOW_expected_prev[15] )
		&& ((EXLOW_expected_prev[15] !== last_EXLOW_exp[15]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[15] = EXLOW_expected_prev[15];
	end
	if (
		( EXLOW_expected_prev[16] !== 1'bx ) && ( EXLOW_prev[16] !== EXLOW_expected_prev[16] )
		&& ((EXLOW_expected_prev[16] !== last_EXLOW_exp[16]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[16] = EXLOW_expected_prev[16];
	end
	if (
		( EXLOW_expected_prev[17] !== 1'bx ) && ( EXLOW_prev[17] !== EXLOW_expected_prev[17] )
		&& ((EXLOW_expected_prev[17] !== last_EXLOW_exp[17]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[17] = EXLOW_expected_prev[17];
	end
	if (
		( EXLOW_expected_prev[18] !== 1'bx ) && ( EXLOW_prev[18] !== EXLOW_expected_prev[18] )
		&& ((EXLOW_expected_prev[18] !== last_EXLOW_exp[18]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[18] = EXLOW_expected_prev[18];
	end
	if (
		( EXLOW_expected_prev[19] !== 1'bx ) && ( EXLOW_prev[19] !== EXLOW_expected_prev[19] )
		&& ((EXLOW_expected_prev[19] !== last_EXLOW_exp[19]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[19] = EXLOW_expected_prev[19];
	end
	if (
		( EXLOW_expected_prev[20] !== 1'bx ) && ( EXLOW_prev[20] !== EXLOW_expected_prev[20] )
		&& ((EXLOW_expected_prev[20] !== last_EXLOW_exp[20]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[20] = EXLOW_expected_prev[20];
	end
	if (
		( EXLOW_expected_prev[21] !== 1'bx ) && ( EXLOW_prev[21] !== EXLOW_expected_prev[21] )
		&& ((EXLOW_expected_prev[21] !== last_EXLOW_exp[21]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[21] = EXLOW_expected_prev[21];
	end
	if (
		( EXLOW_expected_prev[22] !== 1'bx ) && ( EXLOW_prev[22] !== EXLOW_expected_prev[22] )
		&& ((EXLOW_expected_prev[22] !== last_EXLOW_exp[22]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[22] = EXLOW_expected_prev[22];
	end
	if (
		( EXLOW_expected_prev[23] !== 1'bx ) && ( EXLOW_prev[23] !== EXLOW_expected_prev[23] )
		&& ((EXLOW_expected_prev[23] !== last_EXLOW_exp[23]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[23] = EXLOW_expected_prev[23];
	end
	if (
		( EXLOW_expected_prev[24] !== 1'bx ) && ( EXLOW_prev[24] !== EXLOW_expected_prev[24] )
		&& ((EXLOW_expected_prev[24] !== last_EXLOW_exp[24]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[24] = EXLOW_expected_prev[24];
	end
	if (
		( EXLOW_expected_prev[25] !== 1'bx ) && ( EXLOW_prev[25] !== EXLOW_expected_prev[25] )
		&& ((EXLOW_expected_prev[25] !== last_EXLOW_exp[25]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[25] = EXLOW_expected_prev[25];
	end
	if (
		( EXLOW_expected_prev[26] !== 1'bx ) && ( EXLOW_prev[26] !== EXLOW_expected_prev[26] )
		&& ((EXLOW_expected_prev[26] !== last_EXLOW_exp[26]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[26] = EXLOW_expected_prev[26];
	end
	if (
		( EXLOW_expected_prev[27] !== 1'bx ) && ( EXLOW_prev[27] !== EXLOW_expected_prev[27] )
		&& ((EXLOW_expected_prev[27] !== last_EXLOW_exp[27]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[27] = EXLOW_expected_prev[27];
	end
	if (
		( EXLOW_expected_prev[28] !== 1'bx ) && ( EXLOW_prev[28] !== EXLOW_expected_prev[28] )
		&& ((EXLOW_expected_prev[28] !== last_EXLOW_exp[28]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[28] = EXLOW_expected_prev[28];
	end
	if (
		( EXLOW_expected_prev[29] !== 1'bx ) && ( EXLOW_prev[29] !== EXLOW_expected_prev[29] )
		&& ((EXLOW_expected_prev[29] !== last_EXLOW_exp[29]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[29] = EXLOW_expected_prev[29];
	end
	if (
		( EXLOW_expected_prev[30] !== 1'bx ) && ( EXLOW_prev[30] !== EXLOW_expected_prev[30] )
		&& ((EXLOW_expected_prev[30] !== last_EXLOW_exp[30]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[30] = EXLOW_expected_prev[30];
	end
	if (
		( EXLOW_expected_prev[31] !== 1'bx ) && ( EXLOW_prev[31] !== EXLOW_expected_prev[31] )
		&& ((EXLOW_expected_prev[31] !== last_EXLOW_exp[31]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXLOW[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXLOW_expected_prev);
		$display ("     Real value = %b", EXLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_EXLOW_exp[31] = EXLOW_expected_prev[31];
	end
	if (
		( EXopALU_expected_prev[0] !== 1'bx ) && ( EXopALU_prev[0] !== EXopALU_expected_prev[0] )
		&& ((EXopALU_expected_prev[0] !== last_EXopALU_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_EXopALU_exp[0] = EXopALU_expected_prev[0];
	end
	if (
		( EXopALU_expected_prev[1] !== 1'bx ) && ( EXopALU_prev[1] !== EXopALU_expected_prev[1] )
		&& ((EXopALU_expected_prev[1] !== last_EXopALU_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_EXopALU_exp[1] = EXopALU_expected_prev[1];
	end
	if (
		( EXopALU_expected_prev[2] !== 1'bx ) && ( EXopALU_prev[2] !== EXopALU_expected_prev[2] )
		&& ((EXopALU_expected_prev[2] !== last_EXopALU_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXopALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXopALU_expected_prev);
		$display ("     Real value = %b", EXopALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_EXopALU_exp[2] = EXopALU_expected_prev[2];
	end
	if (
		( EXULAA_expected_prev[0] !== 1'bx ) && ( EXULAA_prev[0] !== EXULAA_expected_prev[0] )
		&& ((EXULAA_expected_prev[0] !== last_EXULAA_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[0] = EXULAA_expected_prev[0];
	end
	if (
		( EXULAA_expected_prev[1] !== 1'bx ) && ( EXULAA_prev[1] !== EXULAA_expected_prev[1] )
		&& ((EXULAA_expected_prev[1] !== last_EXULAA_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[1] = EXULAA_expected_prev[1];
	end
	if (
		( EXULAA_expected_prev[2] !== 1'bx ) && ( EXULAA_prev[2] !== EXULAA_expected_prev[2] )
		&& ((EXULAA_expected_prev[2] !== last_EXULAA_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[2] = EXULAA_expected_prev[2];
	end
	if (
		( EXULAA_expected_prev[3] !== 1'bx ) && ( EXULAA_prev[3] !== EXULAA_expected_prev[3] )
		&& ((EXULAA_expected_prev[3] !== last_EXULAA_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[3] = EXULAA_expected_prev[3];
	end
	if (
		( EXULAA_expected_prev[4] !== 1'bx ) && ( EXULAA_prev[4] !== EXULAA_expected_prev[4] )
		&& ((EXULAA_expected_prev[4] !== last_EXULAA_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[4] = EXULAA_expected_prev[4];
	end
	if (
		( EXULAA_expected_prev[5] !== 1'bx ) && ( EXULAA_prev[5] !== EXULAA_expected_prev[5] )
		&& ((EXULAA_expected_prev[5] !== last_EXULAA_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[5] = EXULAA_expected_prev[5];
	end
	if (
		( EXULAA_expected_prev[6] !== 1'bx ) && ( EXULAA_prev[6] !== EXULAA_expected_prev[6] )
		&& ((EXULAA_expected_prev[6] !== last_EXULAA_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[6] = EXULAA_expected_prev[6];
	end
	if (
		( EXULAA_expected_prev[7] !== 1'bx ) && ( EXULAA_prev[7] !== EXULAA_expected_prev[7] )
		&& ((EXULAA_expected_prev[7] !== last_EXULAA_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[7] = EXULAA_expected_prev[7];
	end
	if (
		( EXULAA_expected_prev[8] !== 1'bx ) && ( EXULAA_prev[8] !== EXULAA_expected_prev[8] )
		&& ((EXULAA_expected_prev[8] !== last_EXULAA_exp[8]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[8] = EXULAA_expected_prev[8];
	end
	if (
		( EXULAA_expected_prev[9] !== 1'bx ) && ( EXULAA_prev[9] !== EXULAA_expected_prev[9] )
		&& ((EXULAA_expected_prev[9] !== last_EXULAA_exp[9]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[9] = EXULAA_expected_prev[9];
	end
	if (
		( EXULAA_expected_prev[10] !== 1'bx ) && ( EXULAA_prev[10] !== EXULAA_expected_prev[10] )
		&& ((EXULAA_expected_prev[10] !== last_EXULAA_exp[10]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[10] = EXULAA_expected_prev[10];
	end
	if (
		( EXULAA_expected_prev[11] !== 1'bx ) && ( EXULAA_prev[11] !== EXULAA_expected_prev[11] )
		&& ((EXULAA_expected_prev[11] !== last_EXULAA_exp[11]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[11] = EXULAA_expected_prev[11];
	end
	if (
		( EXULAA_expected_prev[12] !== 1'bx ) && ( EXULAA_prev[12] !== EXULAA_expected_prev[12] )
		&& ((EXULAA_expected_prev[12] !== last_EXULAA_exp[12]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[12] = EXULAA_expected_prev[12];
	end
	if (
		( EXULAA_expected_prev[13] !== 1'bx ) && ( EXULAA_prev[13] !== EXULAA_expected_prev[13] )
		&& ((EXULAA_expected_prev[13] !== last_EXULAA_exp[13]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[13] = EXULAA_expected_prev[13];
	end
	if (
		( EXULAA_expected_prev[14] !== 1'bx ) && ( EXULAA_prev[14] !== EXULAA_expected_prev[14] )
		&& ((EXULAA_expected_prev[14] !== last_EXULAA_exp[14]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[14] = EXULAA_expected_prev[14];
	end
	if (
		( EXULAA_expected_prev[15] !== 1'bx ) && ( EXULAA_prev[15] !== EXULAA_expected_prev[15] )
		&& ((EXULAA_expected_prev[15] !== last_EXULAA_exp[15]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[15] = EXULAA_expected_prev[15];
	end
	if (
		( EXULAA_expected_prev[16] !== 1'bx ) && ( EXULAA_prev[16] !== EXULAA_expected_prev[16] )
		&& ((EXULAA_expected_prev[16] !== last_EXULAA_exp[16]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[16] = EXULAA_expected_prev[16];
	end
	if (
		( EXULAA_expected_prev[17] !== 1'bx ) && ( EXULAA_prev[17] !== EXULAA_expected_prev[17] )
		&& ((EXULAA_expected_prev[17] !== last_EXULAA_exp[17]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[17] = EXULAA_expected_prev[17];
	end
	if (
		( EXULAA_expected_prev[18] !== 1'bx ) && ( EXULAA_prev[18] !== EXULAA_expected_prev[18] )
		&& ((EXULAA_expected_prev[18] !== last_EXULAA_exp[18]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[18] = EXULAA_expected_prev[18];
	end
	if (
		( EXULAA_expected_prev[19] !== 1'bx ) && ( EXULAA_prev[19] !== EXULAA_expected_prev[19] )
		&& ((EXULAA_expected_prev[19] !== last_EXULAA_exp[19]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[19] = EXULAA_expected_prev[19];
	end
	if (
		( EXULAA_expected_prev[20] !== 1'bx ) && ( EXULAA_prev[20] !== EXULAA_expected_prev[20] )
		&& ((EXULAA_expected_prev[20] !== last_EXULAA_exp[20]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[20] = EXULAA_expected_prev[20];
	end
	if (
		( EXULAA_expected_prev[21] !== 1'bx ) && ( EXULAA_prev[21] !== EXULAA_expected_prev[21] )
		&& ((EXULAA_expected_prev[21] !== last_EXULAA_exp[21]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[21] = EXULAA_expected_prev[21];
	end
	if (
		( EXULAA_expected_prev[22] !== 1'bx ) && ( EXULAA_prev[22] !== EXULAA_expected_prev[22] )
		&& ((EXULAA_expected_prev[22] !== last_EXULAA_exp[22]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[22] = EXULAA_expected_prev[22];
	end
	if (
		( EXULAA_expected_prev[23] !== 1'bx ) && ( EXULAA_prev[23] !== EXULAA_expected_prev[23] )
		&& ((EXULAA_expected_prev[23] !== last_EXULAA_exp[23]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[23] = EXULAA_expected_prev[23];
	end
	if (
		( EXULAA_expected_prev[24] !== 1'bx ) && ( EXULAA_prev[24] !== EXULAA_expected_prev[24] )
		&& ((EXULAA_expected_prev[24] !== last_EXULAA_exp[24]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[24] = EXULAA_expected_prev[24];
	end
	if (
		( EXULAA_expected_prev[25] !== 1'bx ) && ( EXULAA_prev[25] !== EXULAA_expected_prev[25] )
		&& ((EXULAA_expected_prev[25] !== last_EXULAA_exp[25]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[25] = EXULAA_expected_prev[25];
	end
	if (
		( EXULAA_expected_prev[26] !== 1'bx ) && ( EXULAA_prev[26] !== EXULAA_expected_prev[26] )
		&& ((EXULAA_expected_prev[26] !== last_EXULAA_exp[26]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[26] = EXULAA_expected_prev[26];
	end
	if (
		( EXULAA_expected_prev[27] !== 1'bx ) && ( EXULAA_prev[27] !== EXULAA_expected_prev[27] )
		&& ((EXULAA_expected_prev[27] !== last_EXULAA_exp[27]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[27] = EXULAA_expected_prev[27];
	end
	if (
		( EXULAA_expected_prev[28] !== 1'bx ) && ( EXULAA_prev[28] !== EXULAA_expected_prev[28] )
		&& ((EXULAA_expected_prev[28] !== last_EXULAA_exp[28]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[28] = EXULAA_expected_prev[28];
	end
	if (
		( EXULAA_expected_prev[29] !== 1'bx ) && ( EXULAA_prev[29] !== EXULAA_expected_prev[29] )
		&& ((EXULAA_expected_prev[29] !== last_EXULAA_exp[29]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[29] = EXULAA_expected_prev[29];
	end
	if (
		( EXULAA_expected_prev[30] !== 1'bx ) && ( EXULAA_prev[30] !== EXULAA_expected_prev[30] )
		&& ((EXULAA_expected_prev[30] !== last_EXULAA_exp[30]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[30] = EXULAA_expected_prev[30];
	end
	if (
		( EXULAA_expected_prev[31] !== 1'bx ) && ( EXULAA_prev[31] !== EXULAA_expected_prev[31] )
		&& ((EXULAA_expected_prev[31] !== last_EXULAA_exp[31]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAA_expected_prev);
		$display ("     Real value = %b", EXULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_EXULAA_exp[31] = EXULAA_expected_prev[31];
	end
	if (
		( EXULAB_expected_prev[0] !== 1'bx ) && ( EXULAB_prev[0] !== EXULAB_expected_prev[0] )
		&& ((EXULAB_expected_prev[0] !== last_EXULAB_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[0] = EXULAB_expected_prev[0];
	end
	if (
		( EXULAB_expected_prev[1] !== 1'bx ) && ( EXULAB_prev[1] !== EXULAB_expected_prev[1] )
		&& ((EXULAB_expected_prev[1] !== last_EXULAB_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[1] = EXULAB_expected_prev[1];
	end
	if (
		( EXULAB_expected_prev[2] !== 1'bx ) && ( EXULAB_prev[2] !== EXULAB_expected_prev[2] )
		&& ((EXULAB_expected_prev[2] !== last_EXULAB_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[2] = EXULAB_expected_prev[2];
	end
	if (
		( EXULAB_expected_prev[3] !== 1'bx ) && ( EXULAB_prev[3] !== EXULAB_expected_prev[3] )
		&& ((EXULAB_expected_prev[3] !== last_EXULAB_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[3] = EXULAB_expected_prev[3];
	end
	if (
		( EXULAB_expected_prev[4] !== 1'bx ) && ( EXULAB_prev[4] !== EXULAB_expected_prev[4] )
		&& ((EXULAB_expected_prev[4] !== last_EXULAB_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[4] = EXULAB_expected_prev[4];
	end
	if (
		( EXULAB_expected_prev[5] !== 1'bx ) && ( EXULAB_prev[5] !== EXULAB_expected_prev[5] )
		&& ((EXULAB_expected_prev[5] !== last_EXULAB_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[5] = EXULAB_expected_prev[5];
	end
	if (
		( EXULAB_expected_prev[6] !== 1'bx ) && ( EXULAB_prev[6] !== EXULAB_expected_prev[6] )
		&& ((EXULAB_expected_prev[6] !== last_EXULAB_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[6] = EXULAB_expected_prev[6];
	end
	if (
		( EXULAB_expected_prev[7] !== 1'bx ) && ( EXULAB_prev[7] !== EXULAB_expected_prev[7] )
		&& ((EXULAB_expected_prev[7] !== last_EXULAB_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[7] = EXULAB_expected_prev[7];
	end
	if (
		( EXULAB_expected_prev[8] !== 1'bx ) && ( EXULAB_prev[8] !== EXULAB_expected_prev[8] )
		&& ((EXULAB_expected_prev[8] !== last_EXULAB_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[8] = EXULAB_expected_prev[8];
	end
	if (
		( EXULAB_expected_prev[9] !== 1'bx ) && ( EXULAB_prev[9] !== EXULAB_expected_prev[9] )
		&& ((EXULAB_expected_prev[9] !== last_EXULAB_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[9] = EXULAB_expected_prev[9];
	end
	if (
		( EXULAB_expected_prev[10] !== 1'bx ) && ( EXULAB_prev[10] !== EXULAB_expected_prev[10] )
		&& ((EXULAB_expected_prev[10] !== last_EXULAB_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[10] = EXULAB_expected_prev[10];
	end
	if (
		( EXULAB_expected_prev[11] !== 1'bx ) && ( EXULAB_prev[11] !== EXULAB_expected_prev[11] )
		&& ((EXULAB_expected_prev[11] !== last_EXULAB_exp[11]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[11] = EXULAB_expected_prev[11];
	end
	if (
		( EXULAB_expected_prev[12] !== 1'bx ) && ( EXULAB_prev[12] !== EXULAB_expected_prev[12] )
		&& ((EXULAB_expected_prev[12] !== last_EXULAB_exp[12]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[12] = EXULAB_expected_prev[12];
	end
	if (
		( EXULAB_expected_prev[13] !== 1'bx ) && ( EXULAB_prev[13] !== EXULAB_expected_prev[13] )
		&& ((EXULAB_expected_prev[13] !== last_EXULAB_exp[13]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[13] = EXULAB_expected_prev[13];
	end
	if (
		( EXULAB_expected_prev[14] !== 1'bx ) && ( EXULAB_prev[14] !== EXULAB_expected_prev[14] )
		&& ((EXULAB_expected_prev[14] !== last_EXULAB_exp[14]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[14] = EXULAB_expected_prev[14];
	end
	if (
		( EXULAB_expected_prev[15] !== 1'bx ) && ( EXULAB_prev[15] !== EXULAB_expected_prev[15] )
		&& ((EXULAB_expected_prev[15] !== last_EXULAB_exp[15]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[15] = EXULAB_expected_prev[15];
	end
	if (
		( EXULAB_expected_prev[16] !== 1'bx ) && ( EXULAB_prev[16] !== EXULAB_expected_prev[16] )
		&& ((EXULAB_expected_prev[16] !== last_EXULAB_exp[16]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[16] = EXULAB_expected_prev[16];
	end
	if (
		( EXULAB_expected_prev[17] !== 1'bx ) && ( EXULAB_prev[17] !== EXULAB_expected_prev[17] )
		&& ((EXULAB_expected_prev[17] !== last_EXULAB_exp[17]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[17] = EXULAB_expected_prev[17];
	end
	if (
		( EXULAB_expected_prev[18] !== 1'bx ) && ( EXULAB_prev[18] !== EXULAB_expected_prev[18] )
		&& ((EXULAB_expected_prev[18] !== last_EXULAB_exp[18]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[18] = EXULAB_expected_prev[18];
	end
	if (
		( EXULAB_expected_prev[19] !== 1'bx ) && ( EXULAB_prev[19] !== EXULAB_expected_prev[19] )
		&& ((EXULAB_expected_prev[19] !== last_EXULAB_exp[19]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[19] = EXULAB_expected_prev[19];
	end
	if (
		( EXULAB_expected_prev[20] !== 1'bx ) && ( EXULAB_prev[20] !== EXULAB_expected_prev[20] )
		&& ((EXULAB_expected_prev[20] !== last_EXULAB_exp[20]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[20] = EXULAB_expected_prev[20];
	end
	if (
		( EXULAB_expected_prev[21] !== 1'bx ) && ( EXULAB_prev[21] !== EXULAB_expected_prev[21] )
		&& ((EXULAB_expected_prev[21] !== last_EXULAB_exp[21]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[21] = EXULAB_expected_prev[21];
	end
	if (
		( EXULAB_expected_prev[22] !== 1'bx ) && ( EXULAB_prev[22] !== EXULAB_expected_prev[22] )
		&& ((EXULAB_expected_prev[22] !== last_EXULAB_exp[22]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[22] = EXULAB_expected_prev[22];
	end
	if (
		( EXULAB_expected_prev[23] !== 1'bx ) && ( EXULAB_prev[23] !== EXULAB_expected_prev[23] )
		&& ((EXULAB_expected_prev[23] !== last_EXULAB_exp[23]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[23] = EXULAB_expected_prev[23];
	end
	if (
		( EXULAB_expected_prev[24] !== 1'bx ) && ( EXULAB_prev[24] !== EXULAB_expected_prev[24] )
		&& ((EXULAB_expected_prev[24] !== last_EXULAB_exp[24]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[24] = EXULAB_expected_prev[24];
	end
	if (
		( EXULAB_expected_prev[25] !== 1'bx ) && ( EXULAB_prev[25] !== EXULAB_expected_prev[25] )
		&& ((EXULAB_expected_prev[25] !== last_EXULAB_exp[25]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[25] = EXULAB_expected_prev[25];
	end
	if (
		( EXULAB_expected_prev[26] !== 1'bx ) && ( EXULAB_prev[26] !== EXULAB_expected_prev[26] )
		&& ((EXULAB_expected_prev[26] !== last_EXULAB_exp[26]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[26] = EXULAB_expected_prev[26];
	end
	if (
		( EXULAB_expected_prev[27] !== 1'bx ) && ( EXULAB_prev[27] !== EXULAB_expected_prev[27] )
		&& ((EXULAB_expected_prev[27] !== last_EXULAB_exp[27]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[27] = EXULAB_expected_prev[27];
	end
	if (
		( EXULAB_expected_prev[28] !== 1'bx ) && ( EXULAB_prev[28] !== EXULAB_expected_prev[28] )
		&& ((EXULAB_expected_prev[28] !== last_EXULAB_exp[28]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[28] = EXULAB_expected_prev[28];
	end
	if (
		( EXULAB_expected_prev[29] !== 1'bx ) && ( EXULAB_prev[29] !== EXULAB_expected_prev[29] )
		&& ((EXULAB_expected_prev[29] !== last_EXULAB_exp[29]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[29] = EXULAB_expected_prev[29];
	end
	if (
		( EXULAB_expected_prev[30] !== 1'bx ) && ( EXULAB_prev[30] !== EXULAB_expected_prev[30] )
		&& ((EXULAB_expected_prev[30] !== last_EXULAB_exp[30]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[30] = EXULAB_expected_prev[30];
	end
	if (
		( EXULAB_expected_prev[31] !== 1'bx ) && ( EXULAB_prev[31] !== EXULAB_expected_prev[31] )
		&& ((EXULAB_expected_prev[31] !== last_EXULAB_exp[31]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXULAB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXULAB_expected_prev);
		$display ("     Real value = %b", EXULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_EXULAB_exp[31] = EXULAB_expected_prev[31];
	end
	if (
		( Flush_expected_prev !== 1'bx ) && ( Flush_prev !== Flush_expected_prev )
		&& ((Flush_expected_prev !== last_Flush_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flush :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flush_expected_prev);
		$display ("     Real value = %b", Flush_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Flush_exp = Flush_expected_prev;
	end
	if (
		( ForwardA_expected_prev[0] !== 1'bx ) && ( ForwardA_prev[0] !== ForwardA_expected_prev[0] )
		&& ((ForwardA_expected_prev[0] !== last_ForwardA_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_ForwardA_exp[0] = ForwardA_expected_prev[0];
	end
	if (
		( ForwardA_expected_prev[1] !== 1'bx ) && ( ForwardA_prev[1] !== ForwardA_expected_prev[1] )
		&& ((ForwardA_expected_prev[1] !== last_ForwardA_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_ForwardA_exp[1] = ForwardA_expected_prev[1];
	end
	if (
		( ForwardB_expected_prev[0] !== 1'bx ) && ( ForwardB_prev[0] !== ForwardB_expected_prev[0] )
		&& ((ForwardB_expected_prev[0] !== last_ForwardB_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_ForwardB_exp[0] = ForwardB_expected_prev[0];
	end
	if (
		( ForwardB_expected_prev[1] !== 1'bx ) && ( ForwardB_prev[1] !== ForwardB_expected_prev[1] )
		&& ((ForwardB_expected_prev[1] !== last_ForwardB_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_ForwardB_exp[1] = ForwardB_expected_prev[1];
	end
	if (
		( Jump_expected_prev !== 1'bx ) && ( Jump_prev !== Jump_expected_prev )
		&& ((Jump_expected_prev !== last_Jump_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Jump_expected_prev);
		$display ("     Real value = %b", Jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_Jump_exp = Jump_expected_prev;
	end
	if (
		( MEMBranch_expected_prev[0] !== 1'bx ) && ( MEMBranch_prev[0] !== MEMBranch_expected_prev[0] )
		&& ((MEMBranch_expected_prev[0] !== last_MEMBranch_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMBranch[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMBranch_expected_prev);
		$display ("     Real value = %b", MEMBranch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_MEMBranch_exp[0] = MEMBranch_expected_prev[0];
	end
	if (
		( MEMBranch_expected_prev[1] !== 1'bx ) && ( MEMBranch_prev[1] !== MEMBranch_expected_prev[1] )
		&& ((MEMBranch_expected_prev[1] !== last_MEMBranch_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMBranch[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMBranch_expected_prev);
		$display ("     Real value = %b", MEMBranch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_MEMBranch_exp[1] = MEMBranch_expected_prev[1];
	end
	if (
		( MEMEscreveMem_expected_prev !== 1'bx ) && ( MEMEscreveMem_prev !== MEMEscreveMem_expected_prev )
		&& ((MEMEscreveMem_expected_prev !== last_MEMEscreveMem_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMEscreveMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMEscreveMem_expected_prev);
		$display ("     Real value = %b", MEMEscreveMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_MEMEscreveMem_exp = MEMEscreveMem_expected_prev;
	end
	if (
		( MEMnPC_expected_prev[0] !== 1'bx ) && ( MEMnPC_prev[0] !== MEMnPC_expected_prev[0] )
		&& ((MEMnPC_expected_prev[0] !== last_MEMnPC_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[0] = MEMnPC_expected_prev[0];
	end
	if (
		( MEMnPC_expected_prev[1] !== 1'bx ) && ( MEMnPC_prev[1] !== MEMnPC_expected_prev[1] )
		&& ((MEMnPC_expected_prev[1] !== last_MEMnPC_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[1] = MEMnPC_expected_prev[1];
	end
	if (
		( MEMnPC_expected_prev[2] !== 1'bx ) && ( MEMnPC_prev[2] !== MEMnPC_expected_prev[2] )
		&& ((MEMnPC_expected_prev[2] !== last_MEMnPC_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[2] = MEMnPC_expected_prev[2];
	end
	if (
		( MEMnPC_expected_prev[3] !== 1'bx ) && ( MEMnPC_prev[3] !== MEMnPC_expected_prev[3] )
		&& ((MEMnPC_expected_prev[3] !== last_MEMnPC_exp[3]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[3] = MEMnPC_expected_prev[3];
	end
	if (
		( MEMnPC_expected_prev[4] !== 1'bx ) && ( MEMnPC_prev[4] !== MEMnPC_expected_prev[4] )
		&& ((MEMnPC_expected_prev[4] !== last_MEMnPC_exp[4]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[4] = MEMnPC_expected_prev[4];
	end
	if (
		( MEMnPC_expected_prev[5] !== 1'bx ) && ( MEMnPC_prev[5] !== MEMnPC_expected_prev[5] )
		&& ((MEMnPC_expected_prev[5] !== last_MEMnPC_exp[5]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[5] = MEMnPC_expected_prev[5];
	end
	if (
		( MEMnPC_expected_prev[6] !== 1'bx ) && ( MEMnPC_prev[6] !== MEMnPC_expected_prev[6] )
		&& ((MEMnPC_expected_prev[6] !== last_MEMnPC_exp[6]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[6] = MEMnPC_expected_prev[6];
	end
	if (
		( MEMnPC_expected_prev[7] !== 1'bx ) && ( MEMnPC_prev[7] !== MEMnPC_expected_prev[7] )
		&& ((MEMnPC_expected_prev[7] !== last_MEMnPC_exp[7]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[7] = MEMnPC_expected_prev[7];
	end
	if (
		( MEMnPC_expected_prev[8] !== 1'bx ) && ( MEMnPC_prev[8] !== MEMnPC_expected_prev[8] )
		&& ((MEMnPC_expected_prev[8] !== last_MEMnPC_exp[8]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[8] = MEMnPC_expected_prev[8];
	end
	if (
		( MEMnPC_expected_prev[9] !== 1'bx ) && ( MEMnPC_prev[9] !== MEMnPC_expected_prev[9] )
		&& ((MEMnPC_expected_prev[9] !== last_MEMnPC_exp[9]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[9] = MEMnPC_expected_prev[9];
	end
	if (
		( MEMnPC_expected_prev[10] !== 1'bx ) && ( MEMnPC_prev[10] !== MEMnPC_expected_prev[10] )
		&& ((MEMnPC_expected_prev[10] !== last_MEMnPC_exp[10]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[10] = MEMnPC_expected_prev[10];
	end
	if (
		( MEMnPC_expected_prev[11] !== 1'bx ) && ( MEMnPC_prev[11] !== MEMnPC_expected_prev[11] )
		&& ((MEMnPC_expected_prev[11] !== last_MEMnPC_exp[11]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[11] = MEMnPC_expected_prev[11];
	end
	if (
		( MEMnPC_expected_prev[12] !== 1'bx ) && ( MEMnPC_prev[12] !== MEMnPC_expected_prev[12] )
		&& ((MEMnPC_expected_prev[12] !== last_MEMnPC_exp[12]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[12] = MEMnPC_expected_prev[12];
	end
	if (
		( MEMnPC_expected_prev[13] !== 1'bx ) && ( MEMnPC_prev[13] !== MEMnPC_expected_prev[13] )
		&& ((MEMnPC_expected_prev[13] !== last_MEMnPC_exp[13]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[13] = MEMnPC_expected_prev[13];
	end
	if (
		( MEMnPC_expected_prev[14] !== 1'bx ) && ( MEMnPC_prev[14] !== MEMnPC_expected_prev[14] )
		&& ((MEMnPC_expected_prev[14] !== last_MEMnPC_exp[14]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[14] = MEMnPC_expected_prev[14];
	end
	if (
		( MEMnPC_expected_prev[15] !== 1'bx ) && ( MEMnPC_prev[15] !== MEMnPC_expected_prev[15] )
		&& ((MEMnPC_expected_prev[15] !== last_MEMnPC_exp[15]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[15] = MEMnPC_expected_prev[15];
	end
	if (
		( MEMnPC_expected_prev[16] !== 1'bx ) && ( MEMnPC_prev[16] !== MEMnPC_expected_prev[16] )
		&& ((MEMnPC_expected_prev[16] !== last_MEMnPC_exp[16]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[16] = MEMnPC_expected_prev[16];
	end
	if (
		( MEMnPC_expected_prev[17] !== 1'bx ) && ( MEMnPC_prev[17] !== MEMnPC_expected_prev[17] )
		&& ((MEMnPC_expected_prev[17] !== last_MEMnPC_exp[17]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[17] = MEMnPC_expected_prev[17];
	end
	if (
		( MEMnPC_expected_prev[18] !== 1'bx ) && ( MEMnPC_prev[18] !== MEMnPC_expected_prev[18] )
		&& ((MEMnPC_expected_prev[18] !== last_MEMnPC_exp[18]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[18] = MEMnPC_expected_prev[18];
	end
	if (
		( MEMnPC_expected_prev[19] !== 1'bx ) && ( MEMnPC_prev[19] !== MEMnPC_expected_prev[19] )
		&& ((MEMnPC_expected_prev[19] !== last_MEMnPC_exp[19]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[19] = MEMnPC_expected_prev[19];
	end
	if (
		( MEMnPC_expected_prev[20] !== 1'bx ) && ( MEMnPC_prev[20] !== MEMnPC_expected_prev[20] )
		&& ((MEMnPC_expected_prev[20] !== last_MEMnPC_exp[20]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[20] = MEMnPC_expected_prev[20];
	end
	if (
		( MEMnPC_expected_prev[21] !== 1'bx ) && ( MEMnPC_prev[21] !== MEMnPC_expected_prev[21] )
		&& ((MEMnPC_expected_prev[21] !== last_MEMnPC_exp[21]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[21] = MEMnPC_expected_prev[21];
	end
	if (
		( MEMnPC_expected_prev[22] !== 1'bx ) && ( MEMnPC_prev[22] !== MEMnPC_expected_prev[22] )
		&& ((MEMnPC_expected_prev[22] !== last_MEMnPC_exp[22]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[22] = MEMnPC_expected_prev[22];
	end
	if (
		( MEMnPC_expected_prev[23] !== 1'bx ) && ( MEMnPC_prev[23] !== MEMnPC_expected_prev[23] )
		&& ((MEMnPC_expected_prev[23] !== last_MEMnPC_exp[23]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[23] = MEMnPC_expected_prev[23];
	end
	if (
		( MEMnPC_expected_prev[24] !== 1'bx ) && ( MEMnPC_prev[24] !== MEMnPC_expected_prev[24] )
		&& ((MEMnPC_expected_prev[24] !== last_MEMnPC_exp[24]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[24] = MEMnPC_expected_prev[24];
	end
	if (
		( MEMnPC_expected_prev[25] !== 1'bx ) && ( MEMnPC_prev[25] !== MEMnPC_expected_prev[25] )
		&& ((MEMnPC_expected_prev[25] !== last_MEMnPC_exp[25]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[25] = MEMnPC_expected_prev[25];
	end
	if (
		( MEMnPC_expected_prev[26] !== 1'bx ) && ( MEMnPC_prev[26] !== MEMnPC_expected_prev[26] )
		&& ((MEMnPC_expected_prev[26] !== last_MEMnPC_exp[26]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[26] = MEMnPC_expected_prev[26];
	end
	if (
		( MEMnPC_expected_prev[27] !== 1'bx ) && ( MEMnPC_prev[27] !== MEMnPC_expected_prev[27] )
		&& ((MEMnPC_expected_prev[27] !== last_MEMnPC_exp[27]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[27] = MEMnPC_expected_prev[27];
	end
	if (
		( MEMnPC_expected_prev[28] !== 1'bx ) && ( MEMnPC_prev[28] !== MEMnPC_expected_prev[28] )
		&& ((MEMnPC_expected_prev[28] !== last_MEMnPC_exp[28]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[28] = MEMnPC_expected_prev[28];
	end
	if (
		( MEMnPC_expected_prev[29] !== 1'bx ) && ( MEMnPC_prev[29] !== MEMnPC_expected_prev[29] )
		&& ((MEMnPC_expected_prev[29] !== last_MEMnPC_exp[29]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[29] = MEMnPC_expected_prev[29];
	end
	if (
		( MEMnPC_expected_prev[30] !== 1'bx ) && ( MEMnPC_prev[30] !== MEMnPC_expected_prev[30] )
		&& ((MEMnPC_expected_prev[30] !== last_MEMnPC_exp[30]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[30] = MEMnPC_expected_prev[30];
	end
	if (
		( MEMnPC_expected_prev[31] !== 1'bx ) && ( MEMnPC_prev[31] !== MEMnPC_expected_prev[31] )
		&& ((MEMnPC_expected_prev[31] !== last_MEMnPC_exp[31]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMnPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMnPC_expected_prev);
		$display ("     Real value = %b", MEMnPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_MEMnPC_exp[31] = MEMnPC_expected_prev[31];
	end
	if (
		( MEMReadValue_expected_prev[0] !== 1'bx ) && ( MEMReadValue_prev[0] !== MEMReadValue_expected_prev[0] )
		&& ((MEMReadValue_expected_prev[0] !== last_MEMReadValue_exp[0]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[0] = MEMReadValue_expected_prev[0];
	end
	if (
		( MEMReadValue_expected_prev[1] !== 1'bx ) && ( MEMReadValue_prev[1] !== MEMReadValue_expected_prev[1] )
		&& ((MEMReadValue_expected_prev[1] !== last_MEMReadValue_exp[1]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[1] = MEMReadValue_expected_prev[1];
	end
	if (
		( MEMReadValue_expected_prev[2] !== 1'bx ) && ( MEMReadValue_prev[2] !== MEMReadValue_expected_prev[2] )
		&& ((MEMReadValue_expected_prev[2] !== last_MEMReadValue_exp[2]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[2] = MEMReadValue_expected_prev[2];
	end
	if (
		( MEMReadValue_expected_prev[3] !== 1'bx ) && ( MEMReadValue_prev[3] !== MEMReadValue_expected_prev[3] )
		&& ((MEMReadValue_expected_prev[3] !== last_MEMReadValue_exp[3]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[3] = MEMReadValue_expected_prev[3];
	end
	if (
		( MEMReadValue_expected_prev[4] !== 1'bx ) && ( MEMReadValue_prev[4] !== MEMReadValue_expected_prev[4] )
		&& ((MEMReadValue_expected_prev[4] !== last_MEMReadValue_exp[4]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[4] = MEMReadValue_expected_prev[4];
	end
	if (
		( MEMReadValue_expected_prev[5] !== 1'bx ) && ( MEMReadValue_prev[5] !== MEMReadValue_expected_prev[5] )
		&& ((MEMReadValue_expected_prev[5] !== last_MEMReadValue_exp[5]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[5] = MEMReadValue_expected_prev[5];
	end
	if (
		( MEMReadValue_expected_prev[6] !== 1'bx ) && ( MEMReadValue_prev[6] !== MEMReadValue_expected_prev[6] )
		&& ((MEMReadValue_expected_prev[6] !== last_MEMReadValue_exp[6]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[6] = MEMReadValue_expected_prev[6];
	end
	if (
		( MEMReadValue_expected_prev[7] !== 1'bx ) && ( MEMReadValue_prev[7] !== MEMReadValue_expected_prev[7] )
		&& ((MEMReadValue_expected_prev[7] !== last_MEMReadValue_exp[7]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[7] = MEMReadValue_expected_prev[7];
	end
	if (
		( MEMReadValue_expected_prev[8] !== 1'bx ) && ( MEMReadValue_prev[8] !== MEMReadValue_expected_prev[8] )
		&& ((MEMReadValue_expected_prev[8] !== last_MEMReadValue_exp[8]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[8] = MEMReadValue_expected_prev[8];
	end
	if (
		( MEMReadValue_expected_prev[9] !== 1'bx ) && ( MEMReadValue_prev[9] !== MEMReadValue_expected_prev[9] )
		&& ((MEMReadValue_expected_prev[9] !== last_MEMReadValue_exp[9]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[9] = MEMReadValue_expected_prev[9];
	end
	if (
		( MEMReadValue_expected_prev[10] !== 1'bx ) && ( MEMReadValue_prev[10] !== MEMReadValue_expected_prev[10] )
		&& ((MEMReadValue_expected_prev[10] !== last_MEMReadValue_exp[10]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[10] = MEMReadValue_expected_prev[10];
	end
	if (
		( MEMReadValue_expected_prev[11] !== 1'bx ) && ( MEMReadValue_prev[11] !== MEMReadValue_expected_prev[11] )
		&& ((MEMReadValue_expected_prev[11] !== last_MEMReadValue_exp[11]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[11] = MEMReadValue_expected_prev[11];
	end
	if (
		( MEMReadValue_expected_prev[12] !== 1'bx ) && ( MEMReadValue_prev[12] !== MEMReadValue_expected_prev[12] )
		&& ((MEMReadValue_expected_prev[12] !== last_MEMReadValue_exp[12]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[12] = MEMReadValue_expected_prev[12];
	end
	if (
		( MEMReadValue_expected_prev[13] !== 1'bx ) && ( MEMReadValue_prev[13] !== MEMReadValue_expected_prev[13] )
		&& ((MEMReadValue_expected_prev[13] !== last_MEMReadValue_exp[13]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[13] = MEMReadValue_expected_prev[13];
	end
	if (
		( MEMReadValue_expected_prev[14] !== 1'bx ) && ( MEMReadValue_prev[14] !== MEMReadValue_expected_prev[14] )
		&& ((MEMReadValue_expected_prev[14] !== last_MEMReadValue_exp[14]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[14] = MEMReadValue_expected_prev[14];
	end
	if (
		( MEMReadValue_expected_prev[15] !== 1'bx ) && ( MEMReadValue_prev[15] !== MEMReadValue_expected_prev[15] )
		&& ((MEMReadValue_expected_prev[15] !== last_MEMReadValue_exp[15]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[15] = MEMReadValue_expected_prev[15];
	end
	if (
		( MEMReadValue_expected_prev[16] !== 1'bx ) && ( MEMReadValue_prev[16] !== MEMReadValue_expected_prev[16] )
		&& ((MEMReadValue_expected_prev[16] !== last_MEMReadValue_exp[16]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[16] = MEMReadValue_expected_prev[16];
	end
	if (
		( MEMReadValue_expected_prev[17] !== 1'bx ) && ( MEMReadValue_prev[17] !== MEMReadValue_expected_prev[17] )
		&& ((MEMReadValue_expected_prev[17] !== last_MEMReadValue_exp[17]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[17] = MEMReadValue_expected_prev[17];
	end
	if (
		( MEMReadValue_expected_prev[18] !== 1'bx ) && ( MEMReadValue_prev[18] !== MEMReadValue_expected_prev[18] )
		&& ((MEMReadValue_expected_prev[18] !== last_MEMReadValue_exp[18]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[18] = MEMReadValue_expected_prev[18];
	end
	if (
		( MEMReadValue_expected_prev[19] !== 1'bx ) && ( MEMReadValue_prev[19] !== MEMReadValue_expected_prev[19] )
		&& ((MEMReadValue_expected_prev[19] !== last_MEMReadValue_exp[19]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[19] = MEMReadValue_expected_prev[19];
	end
	if (
		( MEMReadValue_expected_prev[20] !== 1'bx ) && ( MEMReadValue_prev[20] !== MEMReadValue_expected_prev[20] )
		&& ((MEMReadValue_expected_prev[20] !== last_MEMReadValue_exp[20]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[20] = MEMReadValue_expected_prev[20];
	end
	if (
		( MEMReadValue_expected_prev[21] !== 1'bx ) && ( MEMReadValue_prev[21] !== MEMReadValue_expected_prev[21] )
		&& ((MEMReadValue_expected_prev[21] !== last_MEMReadValue_exp[21]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[21] = MEMReadValue_expected_prev[21];
	end
	if (
		( MEMReadValue_expected_prev[22] !== 1'bx ) && ( MEMReadValue_prev[22] !== MEMReadValue_expected_prev[22] )
		&& ((MEMReadValue_expected_prev[22] !== last_MEMReadValue_exp[22]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[22] = MEMReadValue_expected_prev[22];
	end
	if (
		( MEMReadValue_expected_prev[23] !== 1'bx ) && ( MEMReadValue_prev[23] !== MEMReadValue_expected_prev[23] )
		&& ((MEMReadValue_expected_prev[23] !== last_MEMReadValue_exp[23]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[23] = MEMReadValue_expected_prev[23];
	end
	if (
		( MEMReadValue_expected_prev[24] !== 1'bx ) && ( MEMReadValue_prev[24] !== MEMReadValue_expected_prev[24] )
		&& ((MEMReadValue_expected_prev[24] !== last_MEMReadValue_exp[24]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[24] = MEMReadValue_expected_prev[24];
	end
	if (
		( MEMReadValue_expected_prev[25] !== 1'bx ) && ( MEMReadValue_prev[25] !== MEMReadValue_expected_prev[25] )
		&& ((MEMReadValue_expected_prev[25] !== last_MEMReadValue_exp[25]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[25] = MEMReadValue_expected_prev[25];
	end
	if (
		( MEMReadValue_expected_prev[26] !== 1'bx ) && ( MEMReadValue_prev[26] !== MEMReadValue_expected_prev[26] )
		&& ((MEMReadValue_expected_prev[26] !== last_MEMReadValue_exp[26]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[26] = MEMReadValue_expected_prev[26];
	end
	if (
		( MEMReadValue_expected_prev[27] !== 1'bx ) && ( MEMReadValue_prev[27] !== MEMReadValue_expected_prev[27] )
		&& ((MEMReadValue_expected_prev[27] !== last_MEMReadValue_exp[27]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[27] = MEMReadValue_expected_prev[27];
	end
	if (
		( MEMReadValue_expected_prev[28] !== 1'bx ) && ( MEMReadValue_prev[28] !== MEMReadValue_expected_prev[28] )
		&& ((MEMReadValue_expected_prev[28] !== last_MEMReadValue_exp[28]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[28] = MEMReadValue_expected_prev[28];
	end
	if (
		( MEMReadValue_expected_prev[29] !== 1'bx ) && ( MEMReadValue_prev[29] !== MEMReadValue_expected_prev[29] )
		&& ((MEMReadValue_expected_prev[29] !== last_MEMReadValue_exp[29]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[29] = MEMReadValue_expected_prev[29];
	end
	if (
		( MEMReadValue_expected_prev[30] !== 1'bx ) && ( MEMReadValue_prev[30] !== MEMReadValue_expected_prev[30] )
		&& ((MEMReadValue_expected_prev[30] !== last_MEMReadValue_exp[30]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[30] = MEMReadValue_expected_prev[30];
	end
	if (
		( MEMReadValue_expected_prev[31] !== 1'bx ) && ( MEMReadValue_prev[31] !== MEMReadValue_expected_prev[31] )
		&& ((MEMReadValue_expected_prev[31] !== last_MEMReadValue_exp[31]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMReadValue[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMReadValue_expected_prev);
		$display ("     Real value = %b", MEMReadValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_MEMReadValue_exp[31] = MEMReadValue_expected_prev[31];
	end
	if (
		( MEMZero_expected_prev !== 1'bx ) && ( MEMZero_prev !== MEMZero_expected_prev )
		&& ((MEMZero_expected_prev !== last_MEMZero_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEMZero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEMZero_expected_prev);
		$display ("     Real value = %b", MEMZero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_MEMZero_exp = MEMZero_expected_prev;
	end
	if (
		( OrigPC_expected_prev !== 1'bx ) && ( OrigPC_prev !== OrigPC_expected_prev )
		&& ((OrigPC_expected_prev !== last_OrigPC_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OrigPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OrigPC_expected_prev);
		$display ("     Real value = %b", OrigPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_OrigPC_exp = OrigPC_expected_prev;
	end
	if (
		( outALU_expected_prev[0] !== 1'bx ) && ( outALU_prev[0] !== outALU_expected_prev[0] )
		&& ((outALU_expected_prev[0] !== last_outALU_exp[0]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[0] = outALU_expected_prev[0];
	end
	if (
		( outALU_expected_prev[1] !== 1'bx ) && ( outALU_prev[1] !== outALU_expected_prev[1] )
		&& ((outALU_expected_prev[1] !== last_outALU_exp[1]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[1] = outALU_expected_prev[1];
	end
	if (
		( outALU_expected_prev[2] !== 1'bx ) && ( outALU_prev[2] !== outALU_expected_prev[2] )
		&& ((outALU_expected_prev[2] !== last_outALU_exp[2]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[2] = outALU_expected_prev[2];
	end
	if (
		( outALU_expected_prev[3] !== 1'bx ) && ( outALU_prev[3] !== outALU_expected_prev[3] )
		&& ((outALU_expected_prev[3] !== last_outALU_exp[3]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[3] = outALU_expected_prev[3];
	end
	if (
		( outALU_expected_prev[4] !== 1'bx ) && ( outALU_prev[4] !== outALU_expected_prev[4] )
		&& ((outALU_expected_prev[4] !== last_outALU_exp[4]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[4] = outALU_expected_prev[4];
	end
	if (
		( outALU_expected_prev[5] !== 1'bx ) && ( outALU_prev[5] !== outALU_expected_prev[5] )
		&& ((outALU_expected_prev[5] !== last_outALU_exp[5]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[5] = outALU_expected_prev[5];
	end
	if (
		( outALU_expected_prev[6] !== 1'bx ) && ( outALU_prev[6] !== outALU_expected_prev[6] )
		&& ((outALU_expected_prev[6] !== last_outALU_exp[6]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[6] = outALU_expected_prev[6];
	end
	if (
		( outALU_expected_prev[7] !== 1'bx ) && ( outALU_prev[7] !== outALU_expected_prev[7] )
		&& ((outALU_expected_prev[7] !== last_outALU_exp[7]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[7] = outALU_expected_prev[7];
	end
	if (
		( outALU_expected_prev[8] !== 1'bx ) && ( outALU_prev[8] !== outALU_expected_prev[8] )
		&& ((outALU_expected_prev[8] !== last_outALU_exp[8]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[8] = outALU_expected_prev[8];
	end
	if (
		( outALU_expected_prev[9] !== 1'bx ) && ( outALU_prev[9] !== outALU_expected_prev[9] )
		&& ((outALU_expected_prev[9] !== last_outALU_exp[9]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[9] = outALU_expected_prev[9];
	end
	if (
		( outALU_expected_prev[10] !== 1'bx ) && ( outALU_prev[10] !== outALU_expected_prev[10] )
		&& ((outALU_expected_prev[10] !== last_outALU_exp[10]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[10] = outALU_expected_prev[10];
	end
	if (
		( outALU_expected_prev[11] !== 1'bx ) && ( outALU_prev[11] !== outALU_expected_prev[11] )
		&& ((outALU_expected_prev[11] !== last_outALU_exp[11]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[11] = outALU_expected_prev[11];
	end
	if (
		( outALU_expected_prev[12] !== 1'bx ) && ( outALU_prev[12] !== outALU_expected_prev[12] )
		&& ((outALU_expected_prev[12] !== last_outALU_exp[12]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[12] = outALU_expected_prev[12];
	end
	if (
		( outALU_expected_prev[13] !== 1'bx ) && ( outALU_prev[13] !== outALU_expected_prev[13] )
		&& ((outALU_expected_prev[13] !== last_outALU_exp[13]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[13] = outALU_expected_prev[13];
	end
	if (
		( outALU_expected_prev[14] !== 1'bx ) && ( outALU_prev[14] !== outALU_expected_prev[14] )
		&& ((outALU_expected_prev[14] !== last_outALU_exp[14]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[14] = outALU_expected_prev[14];
	end
	if (
		( outALU_expected_prev[15] !== 1'bx ) && ( outALU_prev[15] !== outALU_expected_prev[15] )
		&& ((outALU_expected_prev[15] !== last_outALU_exp[15]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[15] = outALU_expected_prev[15];
	end
	if (
		( outALU_expected_prev[16] !== 1'bx ) && ( outALU_prev[16] !== outALU_expected_prev[16] )
		&& ((outALU_expected_prev[16] !== last_outALU_exp[16]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[16] = outALU_expected_prev[16];
	end
	if (
		( outALU_expected_prev[17] !== 1'bx ) && ( outALU_prev[17] !== outALU_expected_prev[17] )
		&& ((outALU_expected_prev[17] !== last_outALU_exp[17]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[17] = outALU_expected_prev[17];
	end
	if (
		( outALU_expected_prev[18] !== 1'bx ) && ( outALU_prev[18] !== outALU_expected_prev[18] )
		&& ((outALU_expected_prev[18] !== last_outALU_exp[18]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[18] = outALU_expected_prev[18];
	end
	if (
		( outALU_expected_prev[19] !== 1'bx ) && ( outALU_prev[19] !== outALU_expected_prev[19] )
		&& ((outALU_expected_prev[19] !== last_outALU_exp[19]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[19] = outALU_expected_prev[19];
	end
	if (
		( outALU_expected_prev[20] !== 1'bx ) && ( outALU_prev[20] !== outALU_expected_prev[20] )
		&& ((outALU_expected_prev[20] !== last_outALU_exp[20]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[20] = outALU_expected_prev[20];
	end
	if (
		( outALU_expected_prev[21] !== 1'bx ) && ( outALU_prev[21] !== outALU_expected_prev[21] )
		&& ((outALU_expected_prev[21] !== last_outALU_exp[21]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[21] = outALU_expected_prev[21];
	end
	if (
		( outALU_expected_prev[22] !== 1'bx ) && ( outALU_prev[22] !== outALU_expected_prev[22] )
		&& ((outALU_expected_prev[22] !== last_outALU_exp[22]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[22] = outALU_expected_prev[22];
	end
	if (
		( outALU_expected_prev[23] !== 1'bx ) && ( outALU_prev[23] !== outALU_expected_prev[23] )
		&& ((outALU_expected_prev[23] !== last_outALU_exp[23]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[23] = outALU_expected_prev[23];
	end
	if (
		( outALU_expected_prev[24] !== 1'bx ) && ( outALU_prev[24] !== outALU_expected_prev[24] )
		&& ((outALU_expected_prev[24] !== last_outALU_exp[24]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[24] = outALU_expected_prev[24];
	end
	if (
		( outALU_expected_prev[25] !== 1'bx ) && ( outALU_prev[25] !== outALU_expected_prev[25] )
		&& ((outALU_expected_prev[25] !== last_outALU_exp[25]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[25] = outALU_expected_prev[25];
	end
	if (
		( outALU_expected_prev[26] !== 1'bx ) && ( outALU_prev[26] !== outALU_expected_prev[26] )
		&& ((outALU_expected_prev[26] !== last_outALU_exp[26]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[26] = outALU_expected_prev[26];
	end
	if (
		( outALU_expected_prev[27] !== 1'bx ) && ( outALU_prev[27] !== outALU_expected_prev[27] )
		&& ((outALU_expected_prev[27] !== last_outALU_exp[27]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[27] = outALU_expected_prev[27];
	end
	if (
		( outALU_expected_prev[28] !== 1'bx ) && ( outALU_prev[28] !== outALU_expected_prev[28] )
		&& ((outALU_expected_prev[28] !== last_outALU_exp[28]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[28] = outALU_expected_prev[28];
	end
	if (
		( outALU_expected_prev[29] !== 1'bx ) && ( outALU_prev[29] !== outALU_expected_prev[29] )
		&& ((outALU_expected_prev[29] !== last_outALU_exp[29]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[29] = outALU_expected_prev[29];
	end
	if (
		( outALU_expected_prev[30] !== 1'bx ) && ( outALU_prev[30] !== outALU_expected_prev[30] )
		&& ((outALU_expected_prev[30] !== last_outALU_exp[30]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[30] = outALU_expected_prev[30];
	end
	if (
		( outALU_expected_prev[31] !== 1'bx ) && ( outALU_prev[31] !== outALU_expected_prev[31] )
		&& ((outALU_expected_prev[31] !== last_outALU_exp[31]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outALU[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outALU_expected_prev);
		$display ("     Real value = %b", outALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_outALU_exp[31] = outALU_expected_prev[31];
	end
	if (
		( Stall_expected_prev !== 1'bx ) && ( Stall_prev !== Stall_expected_prev )
		&& ((Stall_expected_prev !== last_Stall_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stall :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stall_expected_prev);
		$display ("     Real value = %b", Stall_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_Stall_exp = Stall_expected_prev;
	end
	if (
		( WBDadoDeRetorno_expected_prev[0] !== 1'bx ) && ( WBDadoDeRetorno_prev[0] !== WBDadoDeRetorno_expected_prev[0] )
		&& ((WBDadoDeRetorno_expected_prev[0] !== last_WBDadoDeRetorno_exp[0]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[0] = WBDadoDeRetorno_expected_prev[0];
	end
	if (
		( WBDadoDeRetorno_expected_prev[1] !== 1'bx ) && ( WBDadoDeRetorno_prev[1] !== WBDadoDeRetorno_expected_prev[1] )
		&& ((WBDadoDeRetorno_expected_prev[1] !== last_WBDadoDeRetorno_exp[1]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[1] = WBDadoDeRetorno_expected_prev[1];
	end
	if (
		( WBDadoDeRetorno_expected_prev[2] !== 1'bx ) && ( WBDadoDeRetorno_prev[2] !== WBDadoDeRetorno_expected_prev[2] )
		&& ((WBDadoDeRetorno_expected_prev[2] !== last_WBDadoDeRetorno_exp[2]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[2] = WBDadoDeRetorno_expected_prev[2];
	end
	if (
		( WBDadoDeRetorno_expected_prev[3] !== 1'bx ) && ( WBDadoDeRetorno_prev[3] !== WBDadoDeRetorno_expected_prev[3] )
		&& ((WBDadoDeRetorno_expected_prev[3] !== last_WBDadoDeRetorno_exp[3]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[3] = WBDadoDeRetorno_expected_prev[3];
	end
	if (
		( WBDadoDeRetorno_expected_prev[4] !== 1'bx ) && ( WBDadoDeRetorno_prev[4] !== WBDadoDeRetorno_expected_prev[4] )
		&& ((WBDadoDeRetorno_expected_prev[4] !== last_WBDadoDeRetorno_exp[4]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[4] = WBDadoDeRetorno_expected_prev[4];
	end
	if (
		( WBDadoDeRetorno_expected_prev[5] !== 1'bx ) && ( WBDadoDeRetorno_prev[5] !== WBDadoDeRetorno_expected_prev[5] )
		&& ((WBDadoDeRetorno_expected_prev[5] !== last_WBDadoDeRetorno_exp[5]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[5] = WBDadoDeRetorno_expected_prev[5];
	end
	if (
		( WBDadoDeRetorno_expected_prev[6] !== 1'bx ) && ( WBDadoDeRetorno_prev[6] !== WBDadoDeRetorno_expected_prev[6] )
		&& ((WBDadoDeRetorno_expected_prev[6] !== last_WBDadoDeRetorno_exp[6]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[6] = WBDadoDeRetorno_expected_prev[6];
	end
	if (
		( WBDadoDeRetorno_expected_prev[7] !== 1'bx ) && ( WBDadoDeRetorno_prev[7] !== WBDadoDeRetorno_expected_prev[7] )
		&& ((WBDadoDeRetorno_expected_prev[7] !== last_WBDadoDeRetorno_exp[7]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[7] = WBDadoDeRetorno_expected_prev[7];
	end
	if (
		( WBDadoDeRetorno_expected_prev[8] !== 1'bx ) && ( WBDadoDeRetorno_prev[8] !== WBDadoDeRetorno_expected_prev[8] )
		&& ((WBDadoDeRetorno_expected_prev[8] !== last_WBDadoDeRetorno_exp[8]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[8] = WBDadoDeRetorno_expected_prev[8];
	end
	if (
		( WBDadoDeRetorno_expected_prev[9] !== 1'bx ) && ( WBDadoDeRetorno_prev[9] !== WBDadoDeRetorno_expected_prev[9] )
		&& ((WBDadoDeRetorno_expected_prev[9] !== last_WBDadoDeRetorno_exp[9]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[9] = WBDadoDeRetorno_expected_prev[9];
	end
	if (
		( WBDadoDeRetorno_expected_prev[10] !== 1'bx ) && ( WBDadoDeRetorno_prev[10] !== WBDadoDeRetorno_expected_prev[10] )
		&& ((WBDadoDeRetorno_expected_prev[10] !== last_WBDadoDeRetorno_exp[10]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[10] = WBDadoDeRetorno_expected_prev[10];
	end
	if (
		( WBDadoDeRetorno_expected_prev[11] !== 1'bx ) && ( WBDadoDeRetorno_prev[11] !== WBDadoDeRetorno_expected_prev[11] )
		&& ((WBDadoDeRetorno_expected_prev[11] !== last_WBDadoDeRetorno_exp[11]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[11] = WBDadoDeRetorno_expected_prev[11];
	end
	if (
		( WBDadoDeRetorno_expected_prev[12] !== 1'bx ) && ( WBDadoDeRetorno_prev[12] !== WBDadoDeRetorno_expected_prev[12] )
		&& ((WBDadoDeRetorno_expected_prev[12] !== last_WBDadoDeRetorno_exp[12]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[12] = WBDadoDeRetorno_expected_prev[12];
	end
	if (
		( WBDadoDeRetorno_expected_prev[13] !== 1'bx ) && ( WBDadoDeRetorno_prev[13] !== WBDadoDeRetorno_expected_prev[13] )
		&& ((WBDadoDeRetorno_expected_prev[13] !== last_WBDadoDeRetorno_exp[13]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[13] = WBDadoDeRetorno_expected_prev[13];
	end
	if (
		( WBDadoDeRetorno_expected_prev[14] !== 1'bx ) && ( WBDadoDeRetorno_prev[14] !== WBDadoDeRetorno_expected_prev[14] )
		&& ((WBDadoDeRetorno_expected_prev[14] !== last_WBDadoDeRetorno_exp[14]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[14] = WBDadoDeRetorno_expected_prev[14];
	end
	if (
		( WBDadoDeRetorno_expected_prev[15] !== 1'bx ) && ( WBDadoDeRetorno_prev[15] !== WBDadoDeRetorno_expected_prev[15] )
		&& ((WBDadoDeRetorno_expected_prev[15] !== last_WBDadoDeRetorno_exp[15]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[15] = WBDadoDeRetorno_expected_prev[15];
	end
	if (
		( WBDadoDeRetorno_expected_prev[16] !== 1'bx ) && ( WBDadoDeRetorno_prev[16] !== WBDadoDeRetorno_expected_prev[16] )
		&& ((WBDadoDeRetorno_expected_prev[16] !== last_WBDadoDeRetorno_exp[16]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[16] = WBDadoDeRetorno_expected_prev[16];
	end
	if (
		( WBDadoDeRetorno_expected_prev[17] !== 1'bx ) && ( WBDadoDeRetorno_prev[17] !== WBDadoDeRetorno_expected_prev[17] )
		&& ((WBDadoDeRetorno_expected_prev[17] !== last_WBDadoDeRetorno_exp[17]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[17] = WBDadoDeRetorno_expected_prev[17];
	end
	if (
		( WBDadoDeRetorno_expected_prev[18] !== 1'bx ) && ( WBDadoDeRetorno_prev[18] !== WBDadoDeRetorno_expected_prev[18] )
		&& ((WBDadoDeRetorno_expected_prev[18] !== last_WBDadoDeRetorno_exp[18]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[18] = WBDadoDeRetorno_expected_prev[18];
	end
	if (
		( WBDadoDeRetorno_expected_prev[19] !== 1'bx ) && ( WBDadoDeRetorno_prev[19] !== WBDadoDeRetorno_expected_prev[19] )
		&& ((WBDadoDeRetorno_expected_prev[19] !== last_WBDadoDeRetorno_exp[19]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[19] = WBDadoDeRetorno_expected_prev[19];
	end
	if (
		( WBDadoDeRetorno_expected_prev[20] !== 1'bx ) && ( WBDadoDeRetorno_prev[20] !== WBDadoDeRetorno_expected_prev[20] )
		&& ((WBDadoDeRetorno_expected_prev[20] !== last_WBDadoDeRetorno_exp[20]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[20] = WBDadoDeRetorno_expected_prev[20];
	end
	if (
		( WBDadoDeRetorno_expected_prev[21] !== 1'bx ) && ( WBDadoDeRetorno_prev[21] !== WBDadoDeRetorno_expected_prev[21] )
		&& ((WBDadoDeRetorno_expected_prev[21] !== last_WBDadoDeRetorno_exp[21]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[21] = WBDadoDeRetorno_expected_prev[21];
	end
	if (
		( WBDadoDeRetorno_expected_prev[22] !== 1'bx ) && ( WBDadoDeRetorno_prev[22] !== WBDadoDeRetorno_expected_prev[22] )
		&& ((WBDadoDeRetorno_expected_prev[22] !== last_WBDadoDeRetorno_exp[22]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[22] = WBDadoDeRetorno_expected_prev[22];
	end
	if (
		( WBDadoDeRetorno_expected_prev[23] !== 1'bx ) && ( WBDadoDeRetorno_prev[23] !== WBDadoDeRetorno_expected_prev[23] )
		&& ((WBDadoDeRetorno_expected_prev[23] !== last_WBDadoDeRetorno_exp[23]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[23] = WBDadoDeRetorno_expected_prev[23];
	end
	if (
		( WBDadoDeRetorno_expected_prev[24] !== 1'bx ) && ( WBDadoDeRetorno_prev[24] !== WBDadoDeRetorno_expected_prev[24] )
		&& ((WBDadoDeRetorno_expected_prev[24] !== last_WBDadoDeRetorno_exp[24]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[24] = WBDadoDeRetorno_expected_prev[24];
	end
	if (
		( WBDadoDeRetorno_expected_prev[25] !== 1'bx ) && ( WBDadoDeRetorno_prev[25] !== WBDadoDeRetorno_expected_prev[25] )
		&& ((WBDadoDeRetorno_expected_prev[25] !== last_WBDadoDeRetorno_exp[25]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[25] = WBDadoDeRetorno_expected_prev[25];
	end
	if (
		( WBDadoDeRetorno_expected_prev[26] !== 1'bx ) && ( WBDadoDeRetorno_prev[26] !== WBDadoDeRetorno_expected_prev[26] )
		&& ((WBDadoDeRetorno_expected_prev[26] !== last_WBDadoDeRetorno_exp[26]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[26] = WBDadoDeRetorno_expected_prev[26];
	end
	if (
		( WBDadoDeRetorno_expected_prev[27] !== 1'bx ) && ( WBDadoDeRetorno_prev[27] !== WBDadoDeRetorno_expected_prev[27] )
		&& ((WBDadoDeRetorno_expected_prev[27] !== last_WBDadoDeRetorno_exp[27]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[27] = WBDadoDeRetorno_expected_prev[27];
	end
	if (
		( WBDadoDeRetorno_expected_prev[28] !== 1'bx ) && ( WBDadoDeRetorno_prev[28] !== WBDadoDeRetorno_expected_prev[28] )
		&& ((WBDadoDeRetorno_expected_prev[28] !== last_WBDadoDeRetorno_exp[28]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[28] = WBDadoDeRetorno_expected_prev[28];
	end
	if (
		( WBDadoDeRetorno_expected_prev[29] !== 1'bx ) && ( WBDadoDeRetorno_prev[29] !== WBDadoDeRetorno_expected_prev[29] )
		&& ((WBDadoDeRetorno_expected_prev[29] !== last_WBDadoDeRetorno_exp[29]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[29] = WBDadoDeRetorno_expected_prev[29];
	end
	if (
		( WBDadoDeRetorno_expected_prev[30] !== 1'bx ) && ( WBDadoDeRetorno_prev[30] !== WBDadoDeRetorno_expected_prev[30] )
		&& ((WBDadoDeRetorno_expected_prev[30] !== last_WBDadoDeRetorno_exp[30]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[30] = WBDadoDeRetorno_expected_prev[30];
	end
	if (
		( WBDadoDeRetorno_expected_prev[31] !== 1'bx ) && ( WBDadoDeRetorno_prev[31] !== WBDadoDeRetorno_expected_prev[31] )
		&& ((WBDadoDeRetorno_expected_prev[31] !== last_WBDadoDeRetorno_exp[31]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WBDadoDeRetorno[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WBDadoDeRetorno_expected_prev);
		$display ("     Real value = %b", WBDadoDeRetorno_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_WBDadoDeRetorno_exp[31] = WBDadoDeRetorno_expected_prev[31];
	end
	if (
		( Zero_expected_prev !== 1'bx ) && ( Zero_prev !== Zero_expected_prev )
		&& ((Zero_expected_prev !== last_Zero_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Zero_expected_prev);
		$display ("     Real value = %b", Zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_Zero_exp = Zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PipelineInit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock2;
// wires                                               
wire [3:0] ALUOperation;
wire [31:0] BInstruction;
wire [31:0] BPC;
wire [31:0] BproxPC;
wire [1:0] DCtrlBranch;
wire [1:0] DCtrlcontrolJump;
wire DCtrlEscreveMem;
wire DCtrlEscreveReg;
wire DCtrlExtent;
wire DCtrlMemParaReg;
wire [2:0] DCtrlopALU;
wire DCtrlOrigALU;
wire [1:0] DCtrlRegDst;
wire DJAL;
wire DJump;
wire [31:0] DJumpPC;
wire [31:0] DRSDados0;
wire [31:0] DRTDados1;
wire [31:0] EXHIGH;
wire [5:0] EXImm;
wire [31:0] EXLOW;
wire [2:0] EXopALU;
wire [31:0] EXULAA;
wire [31:0] EXULAB;
wire Flush;
wire [1:0] ForwardA;
wire [1:0] ForwardB;
wire Jump;
wire [1:0] MEMBranch;
wire MEMEscreveMem;
wire [31:0] MEMnPC;
wire [31:0] MEMReadValue;
wire MEMZero;
wire OrigPC;
wire [31:0] outALU;
wire Stall;
wire [31:0] WBDadoDeRetorno;
wire WBEscreveReg;
wire WBMemParaReg;
wire Zero;

wire sampler;                             

// assign statements (if any)                          
PipelineInit i1 (
// port map - connection between master ports and signals/registers   
	.ALUOperation(ALUOperation),
	.BInstruction(BInstruction),
	.BPC(BPC),
	.BproxPC(BproxPC),
	.clock(clock),
	.clock2(clock2),
	.DCtrlBranch(DCtrlBranch),
	.DCtrlcontrolJump(DCtrlcontrolJump),
	.DCtrlEscreveMem(DCtrlEscreveMem),
	.DCtrlEscreveReg(DCtrlEscreveReg),
	.DCtrlExtent(DCtrlExtent),
	.DCtrlMemParaReg(DCtrlMemParaReg),
	.DCtrlopALU(DCtrlopALU),
	.DCtrlOrigALU(DCtrlOrigALU),
	.DCtrlRegDst(DCtrlRegDst),
	.DJAL(DJAL),
	.DJump(DJump),
	.DJumpPC(DJumpPC),
	.DRSDados0(DRSDados0),
	.DRTDados1(DRTDados1),
	.EXHIGH(EXHIGH),
	.EXImm(EXImm),
	.EXLOW(EXLOW),
	.EXopALU(EXopALU),
	.EXULAA(EXULAA),
	.EXULAB(EXULAB),
	.Flush(Flush),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.Jump(Jump),
	.MEMBranch(MEMBranch),
	.MEMEscreveMem(MEMEscreveMem),
	.MEMnPC(MEMnPC),
	.MEMReadValue(MEMReadValue),
	.MEMZero(MEMZero),
	.OrigPC(OrigPC),
	.outALU(outALU),
	.Stall(Stall),
	.WBDadoDeRetorno(WBDadoDeRetorno),
	.WBEscreveReg(WBEscreveReg),
	.WBMemParaReg(WBMemParaReg),
	.Zero(Zero)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// clock2
always
begin
	clock2 = 1'b0;
	clock2 = #5000 1'b1;
	#5000;
end 

PipelineInit_vlg_sample_tst tb_sample (
	.clock(clock),
	.clock2(clock2),
	.sampler_tx(sampler)
);

PipelineInit_vlg_check_tst tb_out(
	.ALUOperation(ALUOperation),
	.BInstruction(BInstruction),
	.BPC(BPC),
	.BproxPC(BproxPC),
	.DCtrlBranch(DCtrlBranch),
	.DCtrlcontrolJump(DCtrlcontrolJump),
	.DCtrlEscreveMem(DCtrlEscreveMem),
	.DCtrlEscreveReg(DCtrlEscreveReg),
	.DCtrlExtent(DCtrlExtent),
	.DCtrlMemParaReg(DCtrlMemParaReg),
	.DCtrlopALU(DCtrlopALU),
	.DCtrlOrigALU(DCtrlOrigALU),
	.DCtrlRegDst(DCtrlRegDst),
	.DJAL(DJAL),
	.DJump(DJump),
	.DJumpPC(DJumpPC),
	.DRSDados0(DRSDados0),
	.DRTDados1(DRTDados1),
	.EXHIGH(EXHIGH),
	.EXImm(EXImm),
	.EXLOW(EXLOW),
	.EXopALU(EXopALU),
	.EXULAA(EXULAA),
	.EXULAB(EXULAB),
	.Flush(Flush),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.Jump(Jump),
	.MEMBranch(MEMBranch),
	.MEMEscreveMem(MEMEscreveMem),
	.MEMnPC(MEMnPC),
	.MEMReadValue(MEMReadValue),
	.MEMZero(MEMZero),
	.OrigPC(OrigPC),
	.outALU(outALU),
	.Stall(Stall),
	.WBDadoDeRetorno(WBDadoDeRetorno),
	.WBEscreveReg(WBEscreveReg),
	.WBMemParaReg(WBMemParaReg),
	.Zero(Zero),
	.sampler_rx(sampler)
);
endmodule

